{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/a.PNG","path":"images/a.PNG","modified":0,"renderable":0},{"_id":"source/images/Personal/Blog.png","path":"images/Personal/Blog.png","modified":0,"renderable":0},{"_id":"source/images/Personal/Logo.png","path":"images/Personal/Logo.png","modified":0,"renderable":0},{"_id":"source/images/python/Python-thumbnail.png","path":"images/python/Python-thumbnail.png","modified":0,"renderable":0},{"_id":"source/images/python/Python-banner.png","path":"images/python/Python-banner.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/images/wall.jpg","path":"images/wall.jpg","modified":0,"renderable":0},{"_id":"source/images/algorithm/Project-Euler/project-euler-thumbnail.png","path":"images/algorithm/Project-Euler/project-euler-thumbnail.png","modified":0,"renderable":0},{"_id":"source/images/reproduce/literature/TengWangGeXu-thumbnail.png","path":"images/reproduce/literature/TengWangGeXu-thumbnail.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"source/images/reproduce/literature/TengWangGeXu-1-3.jpg","path":"images/reproduce/literature/TengWangGeXu-1-3.jpg","modified":0,"renderable":0},{"_id":"source/images/reproduce/literature/TengWangGeXu-1-1.png","path":"images/reproduce/literature/TengWangGeXu-1-1.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"source/images/algorithm/Project-Euler/project-euler-banner.png","path":"images/algorithm/Project-Euler/project-euler-banner.png","modified":0,"renderable":0},{"_id":"source/images/reproduce/literature/TengWangGeXu-banner.png","path":"images/reproduce/literature/TengWangGeXu-banner.png","modified":0,"renderable":0},{"_id":"source/images/reproduce/literature/TengWangGeXu-1-2.jpg","path":"images/reproduce/literature/TengWangGeXu-1-2.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1511137518000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1511137518000},{"_id":"themes/icarus/README.md","hash":"acd2d5d12820b065345d68f88bfc3a739f8d8ae2","modified":1511137518000},{"_id":"themes/icarus/_config.yml.example","hash":"96b245d58abb6e2a7f59edfccd93dedbea48821d","modified":1511137518000},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1511137518000},{"_id":"source/about/index.md","hash":"38df8bb62e3aa7d0689df063180fd48bfae207bc","modified":1531243872336},{"_id":"source/_posts/hello-world.md","hash":"5c057c4c17fd988ed909e131d4904994733dd545","modified":1531243872332},{"_id":"source/categories/index.md","hash":"0641a0b8e04c887233a8898840f0da0b7a0ecf0b","modified":1531243872336},{"_id":"source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1531243872354},{"_id":"source/images/a.PNG","hash":"0dbf4db974bfdd8ad1448f5520eda493a5a39b14","modified":1531243872338},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1511137518000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1511137518000},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1511137518000},{"_id":"themes/icarus/languages/id.yml","hash":"e4961da507f66c8f7c37f85653a9437cb2056bf6","modified":1511137518000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1511137518000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1511137518000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1511137518000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1511137518000},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1511137518000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1511137518000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1511137518000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1511137518000},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1511137518000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1531243872362},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1511137518000},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1511137518000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1531243872372},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1531243872373},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1511137518000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1531243872377},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1511137518000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1511137518000},{"_id":"source/_posts/python/grammar-1.md","hash":"5aa7c04f5f970a73966cca6ee3e59b1e9de59821","modified":1531243872332},{"_id":"source/_posts/python/grammar-2.md","hash":"54902724b4a5c3c23014a101f03fcdc7c7042d1a","modified":1531243872333},{"_id":"source/_posts/python/grammar-3.md","hash":"0a108ea7749bcc3614fadda356cda1b1be1a8c8b","modified":1531243872333},{"_id":"source/_posts/python/grammar-4.md","hash":"6677a5b8f131fc597ad5b5904f1c5e1b383a9879","modified":1531243872333},{"_id":"source/_posts/python/grammar-5.md","hash":"274b9c277fe45ac3e3615339b688a10d7f5bcc8d","modified":1531243872334},{"_id":"source/images/Personal/Blog.png","hash":"77dd6fa2321cc576353561c4056bceba93934d34","modified":1531243872337},{"_id":"source/images/Personal/Logo.png","hash":"480e52bc57ff54a8e417bc5f3522193c7fff3b30","modified":1531243872338},{"_id":"source/images/python/Python-thumbnail.png","hash":"2289e0a3a59b90b39b7514f84fc45b5fb6346b99","modified":1531243872343},{"_id":"source/images/python/Python-banner.png","hash":"045dc09806f92c878fba8a763cd70f5f5cbbc888","modified":1531243872342},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1511137518000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1511137518000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1511137518000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1511137518000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1511137518000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1511137518000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1511137518000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"9657384cda45f4d5864515c68a48e5ff45e4df8e","modified":1531245484048},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"1ee2384f98c8ccaa7a5b00f14ad2a9a67022c143","modified":1511137518000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1511137518000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1511137518000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1511137518000},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1511137518000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"57c194d0fa268ce2f3e9c755b3154b8a0709f613","modified":1511137518000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1511137518000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1511137518000},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1511137518000},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1531243872364},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"f6549e3113562548ed128181878a8146509cdc7b","modified":1511137518000},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1511137518000},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1511137518000},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1531243872366},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"4b5251ba5594e5d53f87b6603fadda400ba46544","modified":1511137518000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1511137518000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1511137518000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1511137518000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"e22f99652a220d926103801a3cad55ea9c450e05","modified":1511137518000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1511137518000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1511137518000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1511137518000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1511137518000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1511137518000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1511137518000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1511137518000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1511137518000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1511137518000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1511137518000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1511137518000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1511137518000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1511137518000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1511137518000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1511137518000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1511137518000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1511137518000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1511137518000},{"_id":"themes/icarus/source/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1511137518000},{"_id":"themes/icarus/source/css/style.styl","hash":"1716b199dba80b26086f325d69c36fa682465106","modified":1511137518000},{"_id":"themes/icarus/source/js/main.js","hash":"23b373067df0dbac27622bc7537bb4fda243a9c8","modified":1511137518000},{"_id":"source/images/wall.jpg","hash":"07a72bc6a585f203981e86325e8d313b74f14255","modified":1531243872353},{"_id":"source/_posts/algorithm/Project-Euler/001-005.md","hash":"bc68c883e36f114597359d4312a521e2a9148786","modified":1531243872330},{"_id":"source/_posts/algorithm/Project-Euler/006-010.md","hash":"57376133682e43001846641028323c327794b2cf","modified":1531243872330},{"_id":"source/_posts/algorithm/Project-Euler/011-015.md","hash":"13bdc858a7381cc71d411784ae3f44e7d11852a5","modified":1531243872331},{"_id":"source/_posts/algorithm/Project-Euler/016-020.md","hash":"89816abc68938436113312dd7994dd8227abc4e1","modified":1531243872331},{"_id":"source/_posts/algorithm/Project-Euler/021-025.md","hash":"c919c90c5a523d2a33b4168cb4da0c6f4f1f8b4e","modified":1531243872331},{"_id":"source/_posts/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-1.md","hash":"c997d6dc846015d7748803a2d051b0b061b3d424","modified":1531243872335},{"_id":"source/_posts/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-2.md","hash":"7d9de87592c75aadbf8b6ee74ddb69402f79bb1c","modified":1531243872335},{"_id":"source/_posts/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-3.md","hash":"51c5fc018f9fae7530dc9fa4c4d467af9f8dfe3a","modified":1531243872335},{"_id":"source/images/algorithm/Project-Euler/project-euler-thumbnail.png","hash":"d5a6b5584e562d2ec0296d4beba24f3a73a2356d","modified":1531243872342},{"_id":"source/images/reproduce/literature/TengWangGeXu-thumbnail.png","hash":"15a1727137f92c1ac72b680d4a3e28ed367a284b","modified":1531243872352},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1511137518000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1511137518000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1511137518000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1511137518000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1511137518000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1511137518000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1531243872391},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1531243872439},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1531243872445},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1511137518000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"77c4ae7fe3dc16c569bb45d365cc3c147c2e9498","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1511137518000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1511137518000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1511137518000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1511137518000},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1531243872474},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1531243872475},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1531243872475},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1511137518000},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1511137518000},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1511137518000},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1511137518000},{"_id":"source/images/reproduce/literature/TengWangGeXu-1-3.jpg","hash":"783376429488786c097abe80d8606b58b18d6579","modified":1531243872350},{"_id":"source/images/reproduce/literature/TengWangGeXu-1-1.png","hash":"85d349a382113142cde82493b6115bd7ae7b5a16","modified":1531243872346},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.css","hash":"ee60cb08477e43c779b9a6caac16779876b37448","modified":1531243872477},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-brands.min.css","hash":"24dad0f39e1cd33f44f27e960594327963ac6efa","modified":1531243872477},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.css","hash":"ef8d7019efb52fe14cb120c0be7101d0fe4b15b4","modified":1531243872478},{"_id":"themes/icarus/source/libs/font-awesome5/css/fa-solid.min.css","hash":"a88fa1bd6d5ebcf482ab5c639d19d1cd252ebbd5","modified":1531243872594},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.css","hash":"f30831895d6fc68a15f0ed4af8e445420535556e","modified":1531243872596},{"_id":"themes/icarus/source/libs/font-awesome5/css/fontawesome.min.css","hash":"0fe6c33b0f78e8b47ba6ba910bb7ef291014b0c2","modified":1531243872597},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff2","hash":"0ec12ea1707f5bc812b627f41cccad2aff01e54b","modified":1531243872635},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff","hash":"7b4a63abc8476f745f09775d7465f0a6c33daf85","modified":1531243872656},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.woff2","hash":"1ba4dd60af529d1a72d0e57467c3bc0bbb728a4d","modified":1531243872658},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1531243872844},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1531243872848},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1531243872851},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1531243872913},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1531243872915},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1531243872854},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1531243872856},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1531243872857},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1531243872858},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1531243872859},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1531243872859},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1531243872865},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1511137518000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1511137518000},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1531243872883},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1531243872883},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1531243872887},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1531243872887},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1531243872888},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1531243872889},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1531243872889},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1531243872890},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1531243872891},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1531243872891},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1531243872892},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1531243872893},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1531243872893},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1531243872903},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1531243872903},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1531243872904},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1531243872905},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1531243872905},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1531243872906},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1531243872907},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1531243872911},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.eot","hash":"d92c68223732a10ceffe54eecbe4ef70073e6dea","modified":1531243872602},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.ttf","hash":"9b4bb228d5b132e69ff8b6b248262449879eff3e","modified":1531243872632},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.woff","hash":"8b5cac7fbf1712c81d9cac19cda04e6a604eb9da","modified":1531243872633},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.eot","hash":"69aa0b829fd8562d0fb72948ce49ef201ff0ee83","modified":1531243872639},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.ttf","hash":"31dc9b748b8d2bf6c3edec919e763791e037bbff","modified":1531243872655},{"_id":"source/images/algorithm/Project-Euler/project-euler-banner.png","hash":"91c0a72bc248f96cfbd0c5d292f7981769f1621e","modified":1531243872341},{"_id":"source/images/reproduce/literature/TengWangGeXu-banner.png","hash":"54653155c3a5f0fa76e6a3f07c1b2ed547a1ef8c","modified":1531243872352},{"_id":"source/images/reproduce/literature/TengWangGeXu-1-2.jpg","hash":"57696872b9c860e502a780f5a92648bebb9597d7","modified":1531243872349},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-solid-900.svg","hash":"79651f9945627cdef4070a43806511d2ca555b5d","modified":1531243872647},{"_id":"themes/icarus/source/libs/font-awesome5/webfonts/fa-brands-400.svg","hash":"9f6b59723d9399b36e15ff569f84e9c01d8500a9","modified":1531243872612},{"_id":"public/about/index.html","hash":"2b73ccb7417b2ba846932f7013ec6e787233c5c8","modified":1531245489824},{"_id":"public/2018/07/11/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-1/index.html","hash":"2a3200b11bcc23814fed12afd9ef3c13e0eb07c2","modified":1531245489825},{"_id":"public/2018/07/11/hello-world/index.html","hash":"a70f979cec49fe8dd72d1cda5d4fefc1408ceccb","modified":1531245489825},{"_id":"public/2018/07/04/algorithm/Project-Euler/021-025/index.html","hash":"68f23b82dfa8064dcf83eee86f4c39395baaff29","modified":1531245489825},{"_id":"public/2018/07/03/algorithm/Project-Euler/016-020/index.html","hash":"165d64a501c6682197434672acfcebfeea6322fc","modified":1531245489825},{"_id":"public/2018/06/11/algorithm/Project-Euler/006-010/index.html","hash":"132bca2911b05315390ab7d3735e25602d8efc46","modified":1531245489825},{"_id":"public/2018/06/11/algorithm/Project-Euler/011-015/index.html","hash":"7478406285a89baf45a432c6cc097d672fcd59de","modified":1531245489825},{"_id":"public/2018/06/11/algorithm/Project-Euler/001-005/index.html","hash":"86f3d5d91b57033f682419c7631c000c61f7f721","modified":1531245489825},{"_id":"public/2018/06/11/python/grammar-5/index.html","hash":"7155a8eb0cfc7f4bb38299c2dfecf25f274f30df","modified":1531245489825},{"_id":"public/2018/06/10/python/grammar-4/index.html","hash":"745ad456a3e7b80e0a1e120358959b0c4e4a925d","modified":1531245489825},{"_id":"public/2018/06/10/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-3/index.html","hash":"59be0424ff2694c9e86be133d41bfd748254c70f","modified":1531245489826},{"_id":"public/2018/06/10/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-2/index.html","hash":"39d1a87e59f3d27a6312f1d2c2f6fa95e166cfb5","modified":1531245489825},{"_id":"public/2018/06/08/python/grammar-3/index.html","hash":"75b14177919161c15b8669212fb83efbd586275c","modified":1531245489826},{"_id":"public/2018/06/08/python/grammar-2/index.html","hash":"919005476cf5442920462be455368598db551a24","modified":1531245489826},{"_id":"public/2018/06/07/python/grammar-1/index.html","hash":"82f576ca9ad1e1d1cfb7f3ffe58f4d7411770def","modified":1531245489827},{"_id":"public/index.html","hash":"768d91e9fb5eb838209fad7231ee5f946bf82657","modified":1531245489827},{"_id":"public/page/2/index.html","hash":"399e8dcea4780ed329c7de25c6caf4ebef2e6b98","modified":1531245489827},{"_id":"public/tags/index.html","hash":"ed53f4ff78ce1b5e46482865cb0b35e58c079827","modified":1531245489824},{"_id":"public/categories/index.html","hash":"58e749a3470ecdf85cd48e94f0154e4653371535","modified":1531245489825},{"_id":"public/archives/index.html","hash":"6a851239e2980547d67f8f9106cc1ff6fa56ac45","modified":1531245489827},{"_id":"public/archives/page/2/index.html","hash":"1df51f932a4da2f632859580bf2a52778f73959e","modified":1531245489827},{"_id":"public/archives/2018/index.html","hash":"ff3bd1a33e4883f3a0d9862f2419779bb81e3b64","modified":1531245489827},{"_id":"public/archives/2018/page/2/index.html","hash":"394c52157756b9c61cbdc3c668a8997dbe2c921d","modified":1531245489827},{"_id":"public/archives/2018/06/index.html","hash":"c2f16ed27e2589a0c92f1d389c4e81fcbad0136f","modified":1531245489827},{"_id":"public/archives/2018/07/index.html","hash":"c7b17548b260e4792c52995ad69005828501a1a5","modified":1531245489827},{"_id":"public/tags/Hello-World/index.html","hash":"e170dd9326b1de134cb28148f380be8761807f9d","modified":1531245489828},{"_id":"public/tags/Python/index.html","hash":"9d11585ef820d972817dc0cd0f79d4e9a73dc920","modified":1531245489828},{"_id":"public/tags/Project-Euler/index.html","hash":"0b43923cae274a841e384027a58d156ba0c9eb0c","modified":1531245489828},{"_id":"public/tags/algorithm/index.html","hash":"e99b6c18d5ecb5f15e70729a1932e3681c2f05f3","modified":1531245489828},{"_id":"public/tags/文学/index.html","hash":"d0325da7f8ec43afff6f6277246c974324ce2803","modified":1531245489828},{"_id":"public/tags/滕王阁序/index.html","hash":"5e87223a95e33577899ebf3e462169bffe93dfcd","modified":1531245489828},{"_id":"public/tags/转载/index.html","hash":"c94beb2534cd35c6783b30af04d9aa66cbcd2f92","modified":1531245489828},{"_id":"public/categories/其他/index.html","hash":"707d474d1d346f3d52a26cc0d1864ee45594a9d4","modified":1531245489827},{"_id":"public/categories/Python/index.html","hash":"42dfa9e8b488bbc5bf14e49867db9d264e7a2728","modified":1531245489827},{"_id":"public/categories/algorithm/index.html","hash":"eab50155a74a5192d0b96f07db0d2e50cd627c9d","modified":1531245489827},{"_id":"public/categories/文学/index.html","hash":"0b7c60701283219a22759d4978bfd297d16b97db","modified":1531245489827},{"_id":"public/images/a.PNG","hash":"0dbf4db974bfdd8ad1448f5520eda493a5a39b14","modified":1531243948169},{"_id":"public/images/Personal/Blog.png","hash":"77dd6fa2321cc576353561c4056bceba93934d34","modified":1531243948169},{"_id":"public/images/Personal/Logo.png","hash":"480e52bc57ff54a8e417bc5f3522193c7fff3b30","modified":1531243948169},{"_id":"public/images/python/Python-thumbnail.png","hash":"2289e0a3a59b90b39b7514f84fc45b5fb6346b99","modified":1531243948169},{"_id":"public/images/python/Python-banner.png","hash":"045dc09806f92c878fba8a763cd70f5f5cbbc888","modified":1531243948169},{"_id":"public/images/algorithm/Project-Euler/project-euler-thumbnail.png","hash":"d5a6b5584e562d2ec0296d4beba24f3a73a2356d","modified":1531243948169},{"_id":"public/images/reproduce/literature/TengWangGeXu-thumbnail.png","hash":"15a1727137f92c1ac72b680d4a3e28ed367a284b","modified":1531243948170},{"_id":"public/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1531243948170},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1531243948170},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1531243948170},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.woff2","hash":"0ec12ea1707f5bc812b627f41cccad2aff01e54b","modified":1531243948170},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.woff","hash":"7b4a63abc8476f745f09775d7465f0a6c33daf85","modified":1531243948170},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1531244001606},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.woff2","hash":"1ba4dd60af529d1a72d0e57467c3bc0bbb728a4d","modified":1531243948170},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1531244001606},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1531244001607},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1531243948170},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1531243948170},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1531243948170},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1531244001607},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1531243948170},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1531243948170},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1531243948170},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1531243948170},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1531243948170},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1531243948171},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1531243948172},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1531243948172},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1531243948172},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1531243948173},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1531243948173},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1531243948173},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1531243948173},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1531243948173},{"_id":"public/images/reproduce/literature/TengWangGeXu-1-3.jpg","hash":"783376429488786c097abe80d8606b58b18d6579","modified":1531243948452},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.eot","hash":"d92c68223732a10ceffe54eecbe4ef70073e6dea","modified":1531243948453},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.ttf","hash":"9b4bb228d5b132e69ff8b6b248262449879eff3e","modified":1531243948454},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.woff","hash":"8b5cac7fbf1712c81d9cac19cda04e6a604eb9da","modified":1531243948454},{"_id":"public/css/style.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531243948461},{"_id":"public/js/main.js","hash":"23b373067df0dbac27622bc7537bb4fda243a9c8","modified":1531244001849},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1531243948462},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1531243948462},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1531243948463},{"_id":"public/libs/font-awesome5/css/fa-brands.css","hash":"3dc468f3a5d6dcbdb977b17c2c021f751c5bf7c6","modified":1531243948463},{"_id":"public/libs/font-awesome5/css/fa-brands.min.css","hash":"ae33d7d508d9fb4d8cc026f74007fae27017fc80","modified":1531243948463},{"_id":"public/libs/font-awesome5/css/fa-solid.css","hash":"5c960e4efb31a88b1319dcf63d4806175e3cb8cd","modified":1531243948463},{"_id":"public/libs/font-awesome5/css/fa-solid.min.css","hash":"ac3cc27cd41d44ed5d680541636604d0c397e5f6","modified":1531243948463},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1531243948463},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1531243948463},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1531243948463},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1531243948463},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1531243948463},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1531243948463},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1531243948464},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1531243948464},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1531243948464},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1531243948464},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1531243948464},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1531243948464},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1531243948464},{"_id":"public/images/reproduce/literature/TengWangGeXu-1-1.png","hash":"85d349a382113142cde82493b6115bd7ae7b5a16","modified":1531243948464},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.eot","hash":"69aa0b829fd8562d0fb72948ce49ef201ff0ee83","modified":1531243948464},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.ttf","hash":"31dc9b748b8d2bf6c3edec919e763791e037bbff","modified":1531243948464},{"_id":"public/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1531244001859},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1531243948475},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1531243948475},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1531243948475},{"_id":"public/images/wall.jpg","hash":"07a72bc6a585f203981e86325e8d313b74f14255","modified":1531243948475},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1531243948482},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1531243948482},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1531243948483},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1531243948483},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1531243948490},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1531243948490},{"_id":"public/images/algorithm/Project-Euler/project-euler-banner.png","hash":"91c0a72bc248f96cfbd0c5d292f7981769f1621e","modified":1531243948491},{"_id":"public/libs/font-awesome5/css/fontawesome.min.css","hash":"8518d72f88b376749244da2bdc96f261d9bd5645","modified":1531243948502},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1531243948502},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1531243948512},{"_id":"public/images/reproduce/literature/TengWangGeXu-banner.png","hash":"54653155c3a5f0fa76e6a3f07c1b2ed547a1ef8c","modified":1531243948512},{"_id":"public/images/reproduce/literature/TengWangGeXu-1-2.jpg","hash":"57696872b9c860e502a780f5a92648bebb9597d7","modified":1531243948514},{"_id":"public/libs/font-awesome5/webfonts/fa-solid-900.svg","hash":"79651f9945627cdef4070a43806511d2ca555b5d","modified":1531243948515},{"_id":"public/libs/font-awesome5/css/fontawesome.css","hash":"b818fea784ea93c6cc393d545bfc5e1ec2045ff7","modified":1531243948529},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1531243948538},{"_id":"public/libs/font-awesome5/webfonts/fa-brands-400.svg","hash":"9f6b59723d9399b36e15ff569f84e9c01d8500a9","modified":1531243948538},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1531243948559},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1511137518000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1511137518000},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1531244001844},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1531244001845},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1531244001846},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1531244001846},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1531244001849},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1531244001865},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1531244001867},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1531244001867},{"_id":"themes/icarus/_config.yml","hash":"0cbe9f854d38ee079196039911d94ea400f575cb","modified":1531245234758}],"Category":[{"name":"其他","_id":"cjjfz3zbq0003ektzx0i02wy0"},{"name":"Python","_id":"cjjfz3ze4000aektzggwcrkc2"},{"name":"algorithm","_id":"cjjfz3zfj000vektzs4guj9by"},{"name":"文学","_id":"cjjfz3zg2001lektz4jpun4s8"}],"Data":[],"Page":[{"title":"关于","date":"2018-06-06T19:10:20.000Z","_content":"\n谨以此页纪念消失在我硬盘里的两年的笔记。\n\n这不是一个单纯的技术博客，同时，也有文学。\n\n行文仓促，难以多次复查，难免会有错漏之处，希望各位读者能给予指正。\n我的邮箱是 zero-67@hotmail.com。如若收到，我必会尽快答复并及时修改。\n\n本博客采用的是 [hexo](https://hexo.io) 生成，主题源自 [icarus](https://github.com/ppoffice/hexo-theme-icarus)。感谢这些开源作者！","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-06-07 03:10:20\n---\n\n谨以此页纪念消失在我硬盘里的两年的笔记。\n\n这不是一个单纯的技术博客，同时，也有文学。\n\n行文仓促，难以多次复查，难免会有错漏之处，希望各位读者能给予指正。\n我的邮箱是 zero-67@hotmail.com。如若收到，我必会尽快答复并及时修改。\n\n本博客采用的是 [hexo](https://hexo.io) 生成，主题源自 [icarus](https://github.com/ppoffice/hexo-theme-icarus)。感谢这些开源作者！","updated":"2018-07-10T17:31:12.336Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjjfz3zbi0000ektz8z00whwp","content":"<p>谨以此页纪念消失在我硬盘里的两年的笔记。</p>\n<p>这不是一个单纯的技术博客，同时，也有文学。</p>\n<p>行文仓促，难以多次复查，难免会有错漏之处，希望各位读者能给予指正。<br>我的邮箱是 <a href=\"mailto:zero-67@hotmail.com\" target=\"_blank\" rel=\"noopener\">zero-67@hotmail.com</a>。如若收到，我必会尽快答复并及时修改。</p>\n<p>本博客采用的是 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a> 生成，主题源自 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\" target=\"_blank\" rel=\"noopener\">icarus</a>。感谢这些开源作者！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>谨以此页纪念消失在我硬盘里的两年的笔记。</p>\n<p>这不是一个单纯的技术博客，同时，也有文学。</p>\n<p>行文仓促，难以多次复查，难免会有错漏之处，希望各位读者能给予指正。<br>我的邮箱是 <a href=\"mailto:zero-67@hotmail.com\" target=\"_blank\" rel=\"noopener\">zero-67@hotmail.com</a>。如若收到，我必会尽快答复并及时修改。</p>\n<p>本博客采用的是 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a> 生成，主题源自 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\" target=\"_blank\" rel=\"noopener\">icarus</a>。感谢这些开源作者！</p>\n"},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2018-07-10T17:31:12.354Z","updated":"2018-07-10T17:31:12.354Z","path":"tags/index.html","comments":1,"_id":"cjjfz3zbo0002ektzxzdw05ic","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-06-06T19:00:25.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-06-07 03:00:25\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2018-07-10T17:31:12.336Z","path":"categories/index.html","comments":1,"_id":"cjjfz3zbs0005ektz639b0ywi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2018-07-10T17:31:12.332Z","toc":true,"thumbnail":"/images/wall.jpg","banner":"/images/wall.jpg","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### More Try\n\n``` c++\nprotected class A : public C{\npublic:\n    int X() {\n        return x;\n    }\nprivate:\n    int x;\n}\n```\n\n中文\n---\n\n__加粗__\n\n\n分割\n\n---\n\n`重点`\n\n表格1|表个\n:---:|:---:\n可|dadaa\nsdaa|ddddd\n\n$$\nF_x = a^2 + b^2\n$$","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018年6月6日 02:47:21\ncategories: 其他\ntags: \n    - Hello World\ntoc: true\nthumbnail: /images/wall.jpg\nbanner: /images/wall.jpg\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### More Try\n\n``` c++\nprotected class A : public C{\npublic:\n    int X() {\n        return x;\n    }\nprivate:\n    int x;\n}\n```\n\n中文\n---\n\n__加粗__\n\n\n分割\n\n---\n\n`重点`\n\n表格1|表个\n:---:|:---:\n可|dadaa\nsdaa|ddddd\n\n$$\nF_x = a^2 + b^2\n$$","slug":"hello-world","published":1,"updated":"2018-07-10T17:31:12.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zbj0001ektzaske7hfe","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"More-Try\"><a href=\"#More-Try\" class=\"headerlink\" title=\"More Try\"></a>More Try</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> :</span> <span class=\"keyword\">public</span> C&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">X</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h2><p><strong>加粗</strong></p>\n<p>分割</p>\n<hr>\n<p><code>重点</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表格1</th>\n<th style=\"text-align:center\">表个</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">可</td>\n<td style=\"text-align:center\">dadaa</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sdaa</td>\n<td style=\"text-align:center\">ddddd</td>\n</tr>\n</tbody>\n</table>\n<p>$$<br>F_x = a^2 + b^2<br>$$</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"More-Try\"><a href=\"#More-Try\" class=\"headerlink\" title=\"More Try\"></a>More Try</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> :</span> <span class=\"keyword\">public</span> C&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">X</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h2><p><strong>加粗</strong></p>\n<p>分割</p>\n<hr>\n<p><code>重点</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表格1</th>\n<th style=\"text-align:center\">表个</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">可</td>\n<td style=\"text-align:center\">dadaa</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sdaa</td>\n<td style=\"text-align:center\">ddddd</td>\n</tr>\n</tbody>\n</table>\n<p>$$<br>F_x = a^2 + b^2<br>$$</p>\n"},{"title":"Python3 学习之路(1) 初识","date":"2018-06-07T14:36:33.000Z","toc":true,"thumbnail":"/images/python/Python-thumbnail.png","banner":"/images/python/Python-banner.png","_content":"\n# Python 简介\n\nPython 是一种解释型[^1]、交互性、面向对象[^2]语言。\n\nPython 由 Guido van Rossum 在 1989 年圣诞节期间编写。\n\n## Python 设计之禅(The Zen of Python)\n\n*   Beautiful is better than ugly.\n    美丽胜于丑陋\n*   Explicit is better than implicit.\n    显式胜过隐式\n*   Simple is better than complex.\n    简单优于复杂\n*   Complex is better than complicated.\n    复杂好于超复杂\n*   Flat is better than nested.\n    单一胜过于嵌套\n*   Sparse is better than dense.\n    间隔胜于紧凑\n*   Readability counts.\n    可读性很重要\n*   Special cases aren’t special enough to break the rules.\n    特殊的情况并不足以特殊到打破规则\n*   Although practicality beats purity.\n    尽管实用性打击代码的纯洁\n*   Errors should never pass silently.\n    错误绝不应该被默默地放过\n*   Unless explicitly silenced.\n    除非你有意为之\n*   In the face of ambiguity, refuse the temptation to guess. \n    面对含糊不清的地方，忍住去猜想的冲动 \n*   There should be one – and preferably only one – obvious way to do it. \n    这里应该有一种（最好只有一种）明确的方法来了解它 \n*   Although that way may not be obvious at first unless you’re Dutch \n    除非你是Dutch, 在一开始它可能并不是那么明显 \n*   Now is better than never. \n    现在开始做总比最远不做的好 \n*   Although never is often better than right now. \n    不加思考就做还不如不做 \n*   If the implementation is hard to explain, it is a bad idea. \n    如果某个实现很难解释清楚，那一定是个糟糕的想法 \n*   If the implementation is easy to explain, it may be a good idea. \n    如果某个实现很好解释，这也许是个好的想法。 \n*   Namespaces are one honking great idea – let’s do more of those! \n    命名空间是个绝妙的想法，我们应该多用，多多益善！\n\n## Python 应用范围\n\n* 网络应用，包括网站、后台服务\n* 许多日常需要的小工具，包括系统管理员需要的脚本任务\n* 深度学习\n* 人工智能\n\n# Windows10 下安装配置\n\n到 [Python 官方网站](https://www.python.org/) 下载对应版本，现在我的版本是 __Python V3.6.5 for windows__。\n\n安装过程没有什么好说的，但是可以选择自动配置PATH，不然需要在后面手动进行配置。\n\n\n| 变量名 | 描述 |\n|:---:|:---:|\n| PATH | 系统维护的可用的命令行解释器和其他程序的信息，应添加\"(Python安装目录)\\\\Scripts\\\\\" 和 \"(Python安装目录)\\\\\" |\n| PYTHONPATH | PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。 |\n| PYTHONSTARTUP | Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。 |\n| PYTHONCASEOK | 加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写. |\n| PYTHONHOME | 另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。 |\n\n__安装完__，启动命令提示符，在任意目录下输入 `python` ，进入Python的交互式解释器，显示Python的版本，此时说明安装成功。\n\n接下来，python的语法，我将用 [IntelliJ IDEA](https://www.jetbrains.com/idea/)，加 Python 的拓展插件来实践。\n\n# Python解释器\n\n当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。\n\n由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。\n\n- CPython\n当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。\nCPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。\n- IPython\nIPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。\nCPython用>>>作为提示符，而IPython用In [序号]:作为提示符。\n- PyPy\nPyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。\n绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。\n- Jython\nJython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。\n- IronPython\nIronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。\n\n>小结\nPython的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。\n本教程的所有代码只确保在CPython 3.x版本下运行。请务必在本地安装CPython（也就是从Python官方网站下载的安装程序）。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python/python-intro.html\n2. http://www.runoob.com/python/python-install.html\n3. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000\n4. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431608990315a01b575e2ab041168ff0df194698afac000\n\n\n[^1]:运行效率较低，不适合运算密集型的部分。\n[^2]:当然可以只编写面向过程的部分。","source":"_posts/python/grammar-1.md","raw":"---\ntitle: Python3 学习之路(1) 初识\ndate: 2018-6-7 22:36:33\ncategories: Python\ntags: \n    - Python\ntoc: true\nthumbnail: /images/python/Python-thumbnail.png\nbanner: /images/python/Python-banner.png\n---\n\n# Python 简介\n\nPython 是一种解释型[^1]、交互性、面向对象[^2]语言。\n\nPython 由 Guido van Rossum 在 1989 年圣诞节期间编写。\n\n## Python 设计之禅(The Zen of Python)\n\n*   Beautiful is better than ugly.\n    美丽胜于丑陋\n*   Explicit is better than implicit.\n    显式胜过隐式\n*   Simple is better than complex.\n    简单优于复杂\n*   Complex is better than complicated.\n    复杂好于超复杂\n*   Flat is better than nested.\n    单一胜过于嵌套\n*   Sparse is better than dense.\n    间隔胜于紧凑\n*   Readability counts.\n    可读性很重要\n*   Special cases aren’t special enough to break the rules.\n    特殊的情况并不足以特殊到打破规则\n*   Although practicality beats purity.\n    尽管实用性打击代码的纯洁\n*   Errors should never pass silently.\n    错误绝不应该被默默地放过\n*   Unless explicitly silenced.\n    除非你有意为之\n*   In the face of ambiguity, refuse the temptation to guess. \n    面对含糊不清的地方，忍住去猜想的冲动 \n*   There should be one – and preferably only one – obvious way to do it. \n    这里应该有一种（最好只有一种）明确的方法来了解它 \n*   Although that way may not be obvious at first unless you’re Dutch \n    除非你是Dutch, 在一开始它可能并不是那么明显 \n*   Now is better than never. \n    现在开始做总比最远不做的好 \n*   Although never is often better than right now. \n    不加思考就做还不如不做 \n*   If the implementation is hard to explain, it is a bad idea. \n    如果某个实现很难解释清楚，那一定是个糟糕的想法 \n*   If the implementation is easy to explain, it may be a good idea. \n    如果某个实现很好解释，这也许是个好的想法。 \n*   Namespaces are one honking great idea – let’s do more of those! \n    命名空间是个绝妙的想法，我们应该多用，多多益善！\n\n## Python 应用范围\n\n* 网络应用，包括网站、后台服务\n* 许多日常需要的小工具，包括系统管理员需要的脚本任务\n* 深度学习\n* 人工智能\n\n# Windows10 下安装配置\n\n到 [Python 官方网站](https://www.python.org/) 下载对应版本，现在我的版本是 __Python V3.6.5 for windows__。\n\n安装过程没有什么好说的，但是可以选择自动配置PATH，不然需要在后面手动进行配置。\n\n\n| 变量名 | 描述 |\n|:---:|:---:|\n| PATH | 系统维护的可用的命令行解释器和其他程序的信息，应添加\"(Python安装目录)\\\\Scripts\\\\\" 和 \"(Python安装目录)\\\\\" |\n| PYTHONPATH | PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。 |\n| PYTHONSTARTUP | Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。 |\n| PYTHONCASEOK | 加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写. |\n| PYTHONHOME | 另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。 |\n\n__安装完__，启动命令提示符，在任意目录下输入 `python` ，进入Python的交互式解释器，显示Python的版本，此时说明安装成功。\n\n接下来，python的语法，我将用 [IntelliJ IDEA](https://www.jetbrains.com/idea/)，加 Python 的拓展插件来实践。\n\n# Python解释器\n\n当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。\n\n由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。\n\n- CPython\n当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。\nCPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。\n- IPython\nIPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。\nCPython用>>>作为提示符，而IPython用In [序号]:作为提示符。\n- PyPy\nPyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。\n绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。\n- Jython\nJython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。\n- IronPython\nIronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。\n\n>小结\nPython的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。\n本教程的所有代码只确保在CPython 3.x版本下运行。请务必在本地安装CPython（也就是从Python官方网站下载的安装程序）。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python/python-intro.html\n2. http://www.runoob.com/python/python-install.html\n3. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000\n4. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431608990315a01b575e2ab041168ff0df194698afac000\n\n\n[^1]:运行效率较低，不适合运算密集型的部分。\n[^2]:当然可以只编写面向过程的部分。","slug":"python/grammar-1","published":1,"updated":"2018-07-10T17:31:12.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zdu0008ektzkhytqqx3","content":"<h1 id=\"Python-简介\"><a href=\"#Python-简介\" class=\"headerlink\" title=\"Python 简介\"></a>Python 简介</h1><p>Python 是一种解释型<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>、交互性、面向对象<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>语言。</p>\n<p>Python 由 Guido van Rossum 在 1989 年圣诞节期间编写。</p>\n<h2 id=\"Python-设计之禅-The-Zen-of-Python\"><a href=\"#Python-设计之禅-The-Zen-of-Python\" class=\"headerlink\" title=\"Python 设计之禅(The Zen of Python)\"></a>Python 设计之禅(The Zen of Python)</h2><ul>\n<li>Beautiful is better than ugly.<br>美丽胜于丑陋</li>\n<li>Explicit is better than implicit.<br>显式胜过隐式</li>\n<li>Simple is better than complex.<br>简单优于复杂</li>\n<li>Complex is better than complicated.<br>复杂好于超复杂</li>\n<li>Flat is better than nested.<br>单一胜过于嵌套</li>\n<li>Sparse is better than dense.<br>间隔胜于紧凑</li>\n<li>Readability counts.<br>可读性很重要</li>\n<li>Special cases aren’t special enough to break the rules.<br>特殊的情况并不足以特殊到打破规则</li>\n<li>Although practicality beats purity.<br>尽管实用性打击代码的纯洁</li>\n<li>Errors should never pass silently.<br>错误绝不应该被默默地放过</li>\n<li>Unless explicitly silenced.<br>除非你有意为之</li>\n<li>In the face of ambiguity, refuse the temptation to guess.<br>面对含糊不清的地方，忍住去猜想的冲动 </li>\n<li>There should be one – and preferably only one – obvious way to do it.<br>这里应该有一种（最好只有一种）明确的方法来了解它 </li>\n<li>Although that way may not be obvious at first unless you’re Dutch<br>除非你是Dutch, 在一开始它可能并不是那么明显 </li>\n<li>Now is better than never.<br>现在开始做总比最远不做的好 </li>\n<li>Although never is often better than right now.<br>不加思考就做还不如不做 </li>\n<li>If the implementation is hard to explain, it is a bad idea.<br>如果某个实现很难解释清楚，那一定是个糟糕的想法 </li>\n<li>If the implementation is easy to explain, it may be a good idea.<br>如果某个实现很好解释，这也许是个好的想法。 </li>\n<li>Namespaces are one honking great idea – let’s do more of those!<br>命名空间是个绝妙的想法，我们应该多用，多多益善！</li>\n</ul>\n<h2 id=\"Python-应用范围\"><a href=\"#Python-应用范围\" class=\"headerlink\" title=\"Python 应用范围\"></a>Python 应用范围</h2><ul>\n<li>网络应用，包括网站、后台服务</li>\n<li>许多日常需要的小工具，包括系统管理员需要的脚本任务</li>\n<li>深度学习</li>\n<li>人工智能</li>\n</ul>\n<h1 id=\"Windows10-下安装配置\"><a href=\"#Windows10-下安装配置\" class=\"headerlink\" title=\"Windows10 下安装配置\"></a>Windows10 下安装配置</h1><p>到 <a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener\">Python 官方网站</a> 下载对应版本，现在我的版本是 <strong>Python V3.6.5 for windows</strong>。</p>\n<p>安装过程没有什么好说的，但是可以选择自动配置PATH，不然需要在后面手动进行配置。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">变量名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PATH</td>\n<td style=\"text-align:center\">系统维护的可用的命令行解释器和其他程序的信息，应添加”(Python安装目录)\\Scripts\\“ 和 “(Python安装目录)\\“</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PYTHONPATH</td>\n<td style=\"text-align:center\">PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PYTHONSTARTUP</td>\n<td style=\"text-align:center\">Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PYTHONCASEOK</td>\n<td style=\"text-align:center\">加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PYTHONHOME</td>\n<td style=\"text-align:center\">另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>安装完</strong>，启动命令提示符，在任意目录下输入 <code>python</code> ，进入Python的交互式解释器，显示Python的版本，此时说明安装成功。</p>\n<p>接下来，python的语法，我将用 <a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA</a>，加 Python 的拓展插件来实践。</p>\n<h1 id=\"Python解释器\"><a href=\"#Python解释器\" class=\"headerlink\" title=\"Python解释器\"></a>Python解释器</h1><p>当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。</p>\n<p>由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。</p>\n<ul>\n<li>CPython<br>当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。<br>CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。</li>\n<li>IPython<br>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。<br>CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。</li>\n<li>PyPy<br>PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。<br>绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。</li>\n<li>Jython<br>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</li>\n<li>IronPython<br>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</li>\n</ul>\n<blockquote>\n<p>小结<br>Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。<br>本教程的所有代码只确保在CPython 3.x版本下运行。请务必在本地安装CPython（也就是从Python官方网站下载的安装程序）。</p>\n</blockquote>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python/python-intro.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-intro.html</a></li>\n<li><a href=\"http://www.runoob.com/python/python-install.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-install.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431608990315a01b575e2ab041168ff0df194698afac000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431608990315a01b575e2ab041168ff0df194698afac000</a></li>\n</ol>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">运行效率较低，不适合运算密集型的部分。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">2.</span><span style=\"display: inline-block; vertical-align: top;\">当然可以只编写面向过程的部分。</span><a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-简介\"><a href=\"#Python-简介\" class=\"headerlink\" title=\"Python 简介\"></a>Python 简介</h1><p>Python 是一种解释型<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>、交互性、面向对象<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>语言。</p>\n<p>Python 由 Guido van Rossum 在 1989 年圣诞节期间编写。</p>\n<h2 id=\"Python-设计之禅-The-Zen-of-Python\"><a href=\"#Python-设计之禅-The-Zen-of-Python\" class=\"headerlink\" title=\"Python 设计之禅(The Zen of Python)\"></a>Python 设计之禅(The Zen of Python)</h2><ul>\n<li>Beautiful is better than ugly.<br>美丽胜于丑陋</li>\n<li>Explicit is better than implicit.<br>显式胜过隐式</li>\n<li>Simple is better than complex.<br>简单优于复杂</li>\n<li>Complex is better than complicated.<br>复杂好于超复杂</li>\n<li>Flat is better than nested.<br>单一胜过于嵌套</li>\n<li>Sparse is better than dense.<br>间隔胜于紧凑</li>\n<li>Readability counts.<br>可读性很重要</li>\n<li>Special cases aren’t special enough to break the rules.<br>特殊的情况并不足以特殊到打破规则</li>\n<li>Although practicality beats purity.<br>尽管实用性打击代码的纯洁</li>\n<li>Errors should never pass silently.<br>错误绝不应该被默默地放过</li>\n<li>Unless explicitly silenced.<br>除非你有意为之</li>\n<li>In the face of ambiguity, refuse the temptation to guess.<br>面对含糊不清的地方，忍住去猜想的冲动 </li>\n<li>There should be one – and preferably only one – obvious way to do it.<br>这里应该有一种（最好只有一种）明确的方法来了解它 </li>\n<li>Although that way may not be obvious at first unless you’re Dutch<br>除非你是Dutch, 在一开始它可能并不是那么明显 </li>\n<li>Now is better than never.<br>现在开始做总比最远不做的好 </li>\n<li>Although never is often better than right now.<br>不加思考就做还不如不做 </li>\n<li>If the implementation is hard to explain, it is a bad idea.<br>如果某个实现很难解释清楚，那一定是个糟糕的想法 </li>\n<li>If the implementation is easy to explain, it may be a good idea.<br>如果某个实现很好解释，这也许是个好的想法。 </li>\n<li>Namespaces are one honking great idea – let’s do more of those!<br>命名空间是个绝妙的想法，我们应该多用，多多益善！</li>\n</ul>\n<h2 id=\"Python-应用范围\"><a href=\"#Python-应用范围\" class=\"headerlink\" title=\"Python 应用范围\"></a>Python 应用范围</h2><ul>\n<li>网络应用，包括网站、后台服务</li>\n<li>许多日常需要的小工具，包括系统管理员需要的脚本任务</li>\n<li>深度学习</li>\n<li>人工智能</li>\n</ul>\n<h1 id=\"Windows10-下安装配置\"><a href=\"#Windows10-下安装配置\" class=\"headerlink\" title=\"Windows10 下安装配置\"></a>Windows10 下安装配置</h1><p>到 <a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener\">Python 官方网站</a> 下载对应版本，现在我的版本是 <strong>Python V3.6.5 for windows</strong>。</p>\n<p>安装过程没有什么好说的，但是可以选择自动配置PATH，不然需要在后面手动进行配置。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">变量名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PATH</td>\n<td style=\"text-align:center\">系统维护的可用的命令行解释器和其他程序的信息，应添加”(Python安装目录)\\Scripts\\“ 和 “(Python安装目录)\\“</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PYTHONPATH</td>\n<td style=\"text-align:center\">PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PYTHONSTARTUP</td>\n<td style=\"text-align:center\">Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PYTHONCASEOK</td>\n<td style=\"text-align:center\">加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PYTHONHOME</td>\n<td style=\"text-align:center\">另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>安装完</strong>，启动命令提示符，在任意目录下输入 <code>python</code> ，进入Python的交互式解释器，显示Python的版本，此时说明安装成功。</p>\n<p>接下来，python的语法，我将用 <a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA</a>，加 Python 的拓展插件来实践。</p>\n<h1 id=\"Python解释器\"><a href=\"#Python解释器\" class=\"headerlink\" title=\"Python解释器\"></a>Python解释器</h1><p>当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。</p>\n<p>由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。</p>\n<ul>\n<li>CPython<br>当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。<br>CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。</li>\n<li>IPython<br>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。<br>CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。</li>\n<li>PyPy<br>PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。<br>绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。</li>\n<li>Jython<br>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</li>\n<li>IronPython<br>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</li>\n</ul>\n<blockquote>\n<p>小结<br>Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。<br>本教程的所有代码只确保在CPython 3.x版本下运行。请务必在本地安装CPython（也就是从Python官方网站下载的安装程序）。</p>\n</blockquote>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python/python-intro.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-intro.html</a></li>\n<li><a href=\"http://www.runoob.com/python/python-install.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-install.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143161198846783e33de56d4041058c3dfc7e44ee1203000</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431608990315a01b575e2ab041168ff0df194698afac000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431608990315a01b575e2ab041168ff0df194698afac000</a></li>\n</ol>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\">运行效率较低，不适合运算密集型的部分。</span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">2.</span><span style=\"display: inline-block; vertical-align: top;\">当然可以只编写面向过程的部分。</span><a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Python3 学习之路(2) 基础语法","date":"2018-06-07T17:27:17.000Z","toc":true,"thumbnail":"/images/python/Python-thumbnail.png","banner":"/images/python/Python-banner.png","_content":"\n# 你好，世界\n\n在工程下新建 __main.py__ 文件，向文件写入\n\n```python\nprint(\"你好，世界\")\n```\n如果你的文件是UTF-8编码存储的，那么这个文件可以立即运行，如果不是，会报一个 SyntaxError 错误，我建议的解决方法是将存储的文件编码改成UTF-8 without BOM。\n\n同时，我还建议在文件头加入一行`#coding=utf-8`，这样Python会以UTF-8编码解析此文件。而之前没有加入本行也能运行的原因是因为：Python3.X 源码文件默认使用UTF-8编码，所以可以正常解析中文，无需指定UTF-8编码。\n\n# 命令提示符/终端下调用脚本\n\n在命令提示符/终端下，进入之前工程写好的 __main.py__ 文件的目录，输入 `python main.py`，便可执行，我们称这种方式为脚本编程。\n\n# 标识符\n\n在 Python 里，标识符由字母、数字、下划线组成。\n\n在 Python 中，所有标识符可以包括英文、数字以及下划线(\\_)，但不能以数字开头。\n\nPython 中的标识符是区分大小写的。\n\n以下划线开头的标识符是有特殊意义的。以单下划线开头 \\_foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；\n\n- 以双下划线开头的 \\_\\_foo 代表类的私有成员\n- 以双下划线开头和结尾的 \\_\\_foo\\_\\_ 代表 Python 里特殊方法专用的标识，如 \\_\\_init\\_\\_() 代表类的构造函数。\n\n# 保留字符\n\n下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。\n\n所有 Python 的关键字只包含小写字母。\n\n||||\n|:-:|:-:|:-:|\n| and | exec | not |\n| assert | finally | or |\n| break | for | pass |\n| class | from | print |\n| continue | global | raise |\n| def | if | return |\n| del | import | try |\n| elif | in | while |\n| else | is | with |\n| except | lambda | yield |\n\n# 行和缩进\n\nPython的代码不使用大括号 {} 来控制逻辑、作用范围，而是适用行首的空白缩进来控制。\n行首的空白缩进可以适用 Tab 或者空格来控制，每一个逻辑、作用范围的递进，需要保证相同的缩进量，譬如，一直缩进为4个空格的程序，进入一个判定，但是接下来的缩进量变成了5个空格，则会中断程序的运行。\n缩进量在一开始就需要定下，然后之后要严格执行，一般建议4个空格作为单位缩进量，并且不要混用 Tab。\n\n## 多行的语句\n\nPython不使用像 C/C++ 一样强制要求分号作为一个语句的结束，在python中一般以新行作为语句的结束符。\n\n但是我们可以使用斜杠（ \\\\）将一行的语句分为多行显示，\n\n```python\ntotal = a + \\\n        b + \\\n        c\n```\n语句中包含 [], {} 或 () 括号就不需要使用多行连接符。\n\n```python\ndays =  ['Monday',  'Tuesday',  'Wednesday',  \n\t\t\t'Thursday',  'Friday']\n```\nPython 也可以同一行显示多条语句，方法是用分号 ; 分开，但极不建议这样做。\n\n```python\nprint 'hello';print 'World';\n```\n# 引号\n\nPython 可以使用引号( ' )、双引号( \" )、三引号( ''' 或 \"\"\" ) 来表示字符串，引号的开始与结束必须的相同类型的。\n\n其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。\n\n```python\nword =  'word' \nsentence =  \"这是一个句子。\" \nparagraph =  \"\"\"这是一个段落。\n包含了多个语句\"\"\"\n```\n# 注释\n\npython中单行注释采用 # 开头。\n注释可以在语句或表达式行末：\n\n```python\nanswer =  \"42\"  # 这是一个注释\n```\npython 中多行注释使用三个单引号(''')或三个双引号(\"\"\")。\n\n# 转义字符\n\n\\\\可以转义很多字符，比如\\\\n表示换行，\\\\t表示制表符，字符\\\\本身也要转义，所以\\\\\\\\表示的字符就是\\\\\n\n如果字符串里面有很多字符都需要转义，就需要加很多\\\\，为了简化，Python还允许用r''表示''内部的字符串默认不转义。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python/python-basic-syntax.html\n2. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000\n\n","source":"_posts/python/grammar-2.md","raw":"---\ntitle: Python3 学习之路(2) 基础语法\ndate: 2018-6-8 01:27:17\ncategories: Python\ntags: \n    - Python\ntoc: true\nthumbnail: /images/python/Python-thumbnail.png\nbanner: /images/python/Python-banner.png\n---\n\n# 你好，世界\n\n在工程下新建 __main.py__ 文件，向文件写入\n\n```python\nprint(\"你好，世界\")\n```\n如果你的文件是UTF-8编码存储的，那么这个文件可以立即运行，如果不是，会报一个 SyntaxError 错误，我建议的解决方法是将存储的文件编码改成UTF-8 without BOM。\n\n同时，我还建议在文件头加入一行`#coding=utf-8`，这样Python会以UTF-8编码解析此文件。而之前没有加入本行也能运行的原因是因为：Python3.X 源码文件默认使用UTF-8编码，所以可以正常解析中文，无需指定UTF-8编码。\n\n# 命令提示符/终端下调用脚本\n\n在命令提示符/终端下，进入之前工程写好的 __main.py__ 文件的目录，输入 `python main.py`，便可执行，我们称这种方式为脚本编程。\n\n# 标识符\n\n在 Python 里，标识符由字母、数字、下划线组成。\n\n在 Python 中，所有标识符可以包括英文、数字以及下划线(\\_)，但不能以数字开头。\n\nPython 中的标识符是区分大小写的。\n\n以下划线开头的标识符是有特殊意义的。以单下划线开头 \\_foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；\n\n- 以双下划线开头的 \\_\\_foo 代表类的私有成员\n- 以双下划线开头和结尾的 \\_\\_foo\\_\\_ 代表 Python 里特殊方法专用的标识，如 \\_\\_init\\_\\_() 代表类的构造函数。\n\n# 保留字符\n\n下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。\n\n所有 Python 的关键字只包含小写字母。\n\n||||\n|:-:|:-:|:-:|\n| and | exec | not |\n| assert | finally | or |\n| break | for | pass |\n| class | from | print |\n| continue | global | raise |\n| def | if | return |\n| del | import | try |\n| elif | in | while |\n| else | is | with |\n| except | lambda | yield |\n\n# 行和缩进\n\nPython的代码不使用大括号 {} 来控制逻辑、作用范围，而是适用行首的空白缩进来控制。\n行首的空白缩进可以适用 Tab 或者空格来控制，每一个逻辑、作用范围的递进，需要保证相同的缩进量，譬如，一直缩进为4个空格的程序，进入一个判定，但是接下来的缩进量变成了5个空格，则会中断程序的运行。\n缩进量在一开始就需要定下，然后之后要严格执行，一般建议4个空格作为单位缩进量，并且不要混用 Tab。\n\n## 多行的语句\n\nPython不使用像 C/C++ 一样强制要求分号作为一个语句的结束，在python中一般以新行作为语句的结束符。\n\n但是我们可以使用斜杠（ \\\\）将一行的语句分为多行显示，\n\n```python\ntotal = a + \\\n        b + \\\n        c\n```\n语句中包含 [], {} 或 () 括号就不需要使用多行连接符。\n\n```python\ndays =  ['Monday',  'Tuesday',  'Wednesday',  \n\t\t\t'Thursday',  'Friday']\n```\nPython 也可以同一行显示多条语句，方法是用分号 ; 分开，但极不建议这样做。\n\n```python\nprint 'hello';print 'World';\n```\n# 引号\n\nPython 可以使用引号( ' )、双引号( \" )、三引号( ''' 或 \"\"\" ) 来表示字符串，引号的开始与结束必须的相同类型的。\n\n其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。\n\n```python\nword =  'word' \nsentence =  \"这是一个句子。\" \nparagraph =  \"\"\"这是一个段落。\n包含了多个语句\"\"\"\n```\n# 注释\n\npython中单行注释采用 # 开头。\n注释可以在语句或表达式行末：\n\n```python\nanswer =  \"42\"  # 这是一个注释\n```\npython 中多行注释使用三个单引号(''')或三个双引号(\"\"\")。\n\n# 转义字符\n\n\\\\可以转义很多字符，比如\\\\n表示换行，\\\\t表示制表符，字符\\\\本身也要转义，所以\\\\\\\\表示的字符就是\\\\\n\n如果字符串里面有很多字符都需要转义，就需要加很多\\\\，为了简化，Python还允许用r''表示''内部的字符串默认不转义。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python/python-basic-syntax.html\n2. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000\n\n","slug":"python/grammar-2","published":1,"updated":"2018-07-10T17:31:12.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3ze00009ektz39q6397r","content":"<h1 id=\"你好，世界\"><a href=\"#你好，世界\" class=\"headerlink\" title=\"你好，世界\"></a>你好，世界</h1><p>在工程下新建 <strong>main.py</strong> 文件，向文件写入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"你好，世界\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你的文件是UTF-8编码存储的，那么这个文件可以立即运行，如果不是，会报一个 SyntaxError 错误，我建议的解决方法是将存储的文件编码改成UTF-8 without BOM。</p>\n<p>同时，我还建议在文件头加入一行<code>#coding=utf-8</code>，这样Python会以UTF-8编码解析此文件。而之前没有加入本行也能运行的原因是因为：Python3.X 源码文件默认使用UTF-8编码，所以可以正常解析中文，无需指定UTF-8编码。</p>\n<h1 id=\"命令提示符-终端下调用脚本\"><a href=\"#命令提示符-终端下调用脚本\" class=\"headerlink\" title=\"命令提示符/终端下调用脚本\"></a>命令提示符/终端下调用脚本</h1><p>在命令提示符/终端下，进入之前工程写好的 <strong>main.py</strong> 文件的目录，输入 <code>python main.py</code>，便可执行，我们称这种方式为脚本编程。</p>\n<h1 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h1><p>在 Python 里，标识符由字母、数字、下划线组成。</p>\n<p>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。</p>\n<p>Python 中的标识符是区分大小写的。</p>\n<p>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；</p>\n<ul>\n<li>以双下划线开头的 __foo 代表类的私有成员</li>\n<li>以双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。</li>\n</ul>\n<h1 id=\"保留字符\"><a href=\"#保留字符\" class=\"headerlink\" title=\"保留字符\"></a>保留字符</h1><p>下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。</p>\n<p>所有 Python 的关键字只包含小写字母。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">exec</td>\n<td style=\"text-align:center\">not</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">assert</td>\n<td style=\"text-align:center\">finally</td>\n<td style=\"text-align:center\">or</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">break</td>\n<td style=\"text-align:center\">for</td>\n<td style=\"text-align:center\">pass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">class</td>\n<td style=\"text-align:center\">from</td>\n<td style=\"text-align:center\">print</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">continue</td>\n<td style=\"text-align:center\">global</td>\n<td style=\"text-align:center\">raise</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">def</td>\n<td style=\"text-align:center\">if</td>\n<td style=\"text-align:center\">return</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">del</td>\n<td style=\"text-align:center\">import</td>\n<td style=\"text-align:center\">try</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">elif</td>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\">while</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">else</td>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">with</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">except</td>\n<td style=\"text-align:center\">lambda</td>\n<td style=\"text-align:center\">yield</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"行和缩进\"><a href=\"#行和缩进\" class=\"headerlink\" title=\"行和缩进\"></a>行和缩进</h1><p>Python的代码不使用大括号 {} 来控制逻辑、作用范围，而是适用行首的空白缩进来控制。<br>行首的空白缩进可以适用 Tab 或者空格来控制，每一个逻辑、作用范围的递进，需要保证相同的缩进量，譬如，一直缩进为4个空格的程序，进入一个判定，但是接下来的缩进量变成了5个空格，则会中断程序的运行。<br>缩进量在一开始就需要定下，然后之后要严格执行，一般建议4个空格作为单位缩进量，并且不要混用 Tab。</p>\n<h2 id=\"多行的语句\"><a href=\"#多行的语句\" class=\"headerlink\" title=\"多行的语句\"></a>多行的语句</h2><p>Python不使用像 C/C++ 一样强制要求分号作为一个语句的结束，在python中一般以新行作为语句的结束符。</p>\n<p>但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = a + \\</span><br><span class=\"line\">        b + \\</span><br><span class=\"line\">        c</span><br></pre></td></tr></table></figure>\n<p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">days =  [<span class=\"string\">'Monday'</span>,  <span class=\"string\">'Tuesday'</span>,  <span class=\"string\">'Wednesday'</span>,  </span><br><span class=\"line\">\t\t\t<span class=\"string\">'Thursday'</span>,  <span class=\"string\">'Friday'</span>]</span><br></pre></td></tr></table></figure>\n<p>Python 也可以同一行显示多条语句，方法是用分号 ; 分开，但极不建议这样做。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello'</span>;<span class=\"keyword\">print</span> <span class=\"string\">'World'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h1><p>Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。</p>\n<p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word =  <span class=\"string\">'word'</span> </span><br><span class=\"line\">sentence =  <span class=\"string\">\"这是一个句子。\"</span> </span><br><span class=\"line\">paragraph =  <span class=\"string\">\"\"\"这是一个段落。</span></span><br><span class=\"line\"><span class=\"string\">包含了多个语句\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><p>python中单行注释采用 # 开头。<br>注释可以在语句或表达式行末：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer =  <span class=\"string\">\"42\"</span>  <span class=\"comment\"># 这是一个注释</span></span><br></pre></td></tr></table></figure>\n<p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。</p>\n<h1 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h1><p>\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\\\表示的字符就是\\</p>\n<p>如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义。</p>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python/python-basic-syntax.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-basic-syntax.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"你好，世界\"><a href=\"#你好，世界\" class=\"headerlink\" title=\"你好，世界\"></a>你好，世界</h1><p>在工程下新建 <strong>main.py</strong> 文件，向文件写入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"你好，世界\"</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你的文件是UTF-8编码存储的，那么这个文件可以立即运行，如果不是，会报一个 SyntaxError 错误，我建议的解决方法是将存储的文件编码改成UTF-8 without BOM。</p>\n<p>同时，我还建议在文件头加入一行<code>#coding=utf-8</code>，这样Python会以UTF-8编码解析此文件。而之前没有加入本行也能运行的原因是因为：Python3.X 源码文件默认使用UTF-8编码，所以可以正常解析中文，无需指定UTF-8编码。</p>\n<h1 id=\"命令提示符-终端下调用脚本\"><a href=\"#命令提示符-终端下调用脚本\" class=\"headerlink\" title=\"命令提示符/终端下调用脚本\"></a>命令提示符/终端下调用脚本</h1><p>在命令提示符/终端下，进入之前工程写好的 <strong>main.py</strong> 文件的目录，输入 <code>python main.py</code>，便可执行，我们称这种方式为脚本编程。</p>\n<h1 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h1><p>在 Python 里，标识符由字母、数字、下划线组成。</p>\n<p>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。</p>\n<p>Python 中的标识符是区分大小写的。</p>\n<p>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入；</p>\n<ul>\n<li>以双下划线开头的 __foo 代表类的私有成员</li>\n<li>以双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。</li>\n</ul>\n<h1 id=\"保留字符\"><a href=\"#保留字符\" class=\"headerlink\" title=\"保留字符\"></a>保留字符</h1><p>下面的列表显示了在Python中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。</p>\n<p>所有 Python 的关键字只包含小写字母。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">exec</td>\n<td style=\"text-align:center\">not</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">assert</td>\n<td style=\"text-align:center\">finally</td>\n<td style=\"text-align:center\">or</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">break</td>\n<td style=\"text-align:center\">for</td>\n<td style=\"text-align:center\">pass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">class</td>\n<td style=\"text-align:center\">from</td>\n<td style=\"text-align:center\">print</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">continue</td>\n<td style=\"text-align:center\">global</td>\n<td style=\"text-align:center\">raise</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">def</td>\n<td style=\"text-align:center\">if</td>\n<td style=\"text-align:center\">return</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">del</td>\n<td style=\"text-align:center\">import</td>\n<td style=\"text-align:center\">try</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">elif</td>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\">while</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">else</td>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">with</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">except</td>\n<td style=\"text-align:center\">lambda</td>\n<td style=\"text-align:center\">yield</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"行和缩进\"><a href=\"#行和缩进\" class=\"headerlink\" title=\"行和缩进\"></a>行和缩进</h1><p>Python的代码不使用大括号 {} 来控制逻辑、作用范围，而是适用行首的空白缩进来控制。<br>行首的空白缩进可以适用 Tab 或者空格来控制，每一个逻辑、作用范围的递进，需要保证相同的缩进量，譬如，一直缩进为4个空格的程序，进入一个判定，但是接下来的缩进量变成了5个空格，则会中断程序的运行。<br>缩进量在一开始就需要定下，然后之后要严格执行，一般建议4个空格作为单位缩进量，并且不要混用 Tab。</p>\n<h2 id=\"多行的语句\"><a href=\"#多行的语句\" class=\"headerlink\" title=\"多行的语句\"></a>多行的语句</h2><p>Python不使用像 C/C++ 一样强制要求分号作为一个语句的结束，在python中一般以新行作为语句的结束符。</p>\n<p>但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = a + \\</span><br><span class=\"line\">        b + \\</span><br><span class=\"line\">        c</span><br></pre></td></tr></table></figure>\n<p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">days =  [<span class=\"string\">'Monday'</span>,  <span class=\"string\">'Tuesday'</span>,  <span class=\"string\">'Wednesday'</span>,  </span><br><span class=\"line\">\t\t\t<span class=\"string\">'Thursday'</span>,  <span class=\"string\">'Friday'</span>]</span><br></pre></td></tr></table></figure>\n<p>Python 也可以同一行显示多条语句，方法是用分号 ; 分开，但极不建议这样做。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello'</span>;<span class=\"keyword\">print</span> <span class=\"string\">'World'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h1><p>Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。</p>\n<p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word =  <span class=\"string\">'word'</span> </span><br><span class=\"line\">sentence =  <span class=\"string\">\"这是一个句子。\"</span> </span><br><span class=\"line\">paragraph =  <span class=\"string\">\"\"\"这是一个段落。</span></span><br><span class=\"line\"><span class=\"string\">包含了多个语句\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><p>python中单行注释采用 # 开头。<br>注释可以在语句或表达式行末：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer =  <span class=\"string\">\"42\"</span>  <span class=\"comment\"># 这是一个注释</span></span><br></pre></td></tr></table></figure>\n<p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。</p>\n<h1 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h1><p>\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\\\表示的字符就是\\</p>\n<p>如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义。</p>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python/python-basic-syntax.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-basic-syntax.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000</a></li>\n</ol>\n"},{"title":"Python3 学习之路(5) 列表、元组与字典","date":"2018-06-10T16:02:38.000Z","toc":true,"thumbnail":"/images/python/Python-thumbnail.png","banner":"/images/python/Python-banner.png","_content":"\n# 列表\n\n可以理解为列表为可变的数组，不过Python中的列表较之灵活许多。\n\n## 访问改动\n\n使用下标索引来访问并改动列表中的值，同样你也可以使用方括号的形式截取字符，访问并改动，超出范围则会报错。\n\n### index(obj)\n\n返回目标列表中obj出现的位置，如果没有则抛出异常。\n\n## 增减\n\n### append(obj)\n\n向目标列表的最后添加一个元素。\n\n### extend(seq)\n\n向目标列表的最后添加如干个元素，seq要是一个可迭代的参数。\n\n### insert(index,obj)\n\n向目标列表指定位置插入一个元素。\n\n### del\n可以使用 del 语句来删除列表的的元素，可以删除整个列表，也可以通过下标索引来删除列表中的某个或某些元素。\n\n```python\nlist = ['A','B','C','D','E','F']\n\ndel list[0] # 删除一个元素 \nprint(list) # 输出['B', 'C', 'D', 'E', 'F'] \ndel list[1:3] # 删除一些元素 \nprint(list) # 输出['B', 'E', 'F'] \ndel list # 删除整个列表\n```\n### remove(obj)\n\n移除目标列表的指定元素，找不到则抛出异常。\n\n### pop([index=-1])\n\n移除列表中的一个元素（默认最后一个元素），并且返回该元素的值，没有值可以返回则抛出异常。\n\n## 操作符\n\n列表的操作与字符串运算符的种类和效果基本相同，此处不表，请参照之前的文章。\n\n## 其他函数\n\n### len(list)\n\n返回列表元素个数。\n\n### clear()\n\n清除目标列表的所有元素。\n\n### max(list) min(list)\n\n返回列表元素的最大/小值，如果列表中的元素不是一种类型或者没有重载小于号，会报错。\n当列表中元素均是一种类型，可以通过此类型的默认排序获得结果。\n\n```python\nlist = [[1,2],[4,4],[4,2,2]]\nprint(max(list)) # 输出[4,4] 即先比较第一个数，再比较第二个数\n```\n### sort(cmp=None, key=None, reverse=False)\n\n对原列表进行排序，不返回值。\n\n- cmp 可选参数, 如果指定了该参数会使用该参数的方法进行排序。\n- key 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。\n- reverse 排序规则，reverse = True 降序， reverse = False 升序（默认）。\n\nsort还可以搭配类中重载小于号的方式来使用，此处按下不表。\n\n# 元组\n\n可以理解为元组为不可变的数组，目的是为了代码的安全性。\n\n## 访问\n\n使用下标索引来访问元组中的值。\n\n## 改动\n\n元组中的元素值是不允许修改的，但我们可以对元组进行连接组合。\n\n## 删除\n\n元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组。\n\n## 操作符\n\n元组的操作与字符串运算符的种类和效果基本相同，此处不表，请参照之前的文章。\n\n## 其他函数\n\n元组同列表一样拥有len()、min()、max()等函数。\n\n# 字典\n\n字典同其他主流编程语言的map一样，是一种key-\\>value的容器，查询速度很快。\n要注意的是，key要是唯一的且不可变，但value不一定。如果重复对一个key进行改动，则会把旧的抛弃，更新为新的。\n\n## 访问\n\n使用下标索引(key)来访问字典中的值。没有会报错。\n\n## 改动\n\n使用下标索引(key)来更新元组中的值。\n\n## 删除\n\n有三种方法可以不同程度上的删除字典。\n\n### del dict[]\n\n删除字典里的一对key-\\>value的元素。\n\n### clear()\n\n删除字典里面的所有元素。\n\n### del dict\n\n删除整个字典。dsadsadsadsa\n\n## 其他函数\n\n### len(dict)\n\n计算字典元素个数，即键的总数。\n\n### str(dict)\n\n输出字典，以可打印的字符串表示。\n\n### fromkeys()\n\n创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值。\n\n### get(key, default=None)\n\n返回指定键的值，如果值不在字典中返回default值。\n\n### items()\n\n以列表返回可遍历的(键, 值) 元组数组。\n\n### setdefault(key, default=None)\n\n和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default。\n\n### pop(key[,default])\n删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。\n\n### keys()/values()\n\n以列表返回一个字典所有的键/值。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python3/python3-list.html\n2. http://www.runoob.com/python3/python3-tuple.html\n3. http://www.runoob.com/python3/python3-dictionary.html\n4. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000\n5. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000","source":"_posts/python/grammar-5.md","raw":"---\ntitle: Python3 学习之路(5) 列表、元组与字典\ndate: 2018-6-11 00:02:38\ncategories: Python\ntags: \n    - Python\ntoc: true\nthumbnail: /images/python/Python-thumbnail.png\nbanner: /images/python/Python-banner.png\n---\n\n# 列表\n\n可以理解为列表为可变的数组，不过Python中的列表较之灵活许多。\n\n## 访问改动\n\n使用下标索引来访问并改动列表中的值，同样你也可以使用方括号的形式截取字符，访问并改动，超出范围则会报错。\n\n### index(obj)\n\n返回目标列表中obj出现的位置，如果没有则抛出异常。\n\n## 增减\n\n### append(obj)\n\n向目标列表的最后添加一个元素。\n\n### extend(seq)\n\n向目标列表的最后添加如干个元素，seq要是一个可迭代的参数。\n\n### insert(index,obj)\n\n向目标列表指定位置插入一个元素。\n\n### del\n可以使用 del 语句来删除列表的的元素，可以删除整个列表，也可以通过下标索引来删除列表中的某个或某些元素。\n\n```python\nlist = ['A','B','C','D','E','F']\n\ndel list[0] # 删除一个元素 \nprint(list) # 输出['B', 'C', 'D', 'E', 'F'] \ndel list[1:3] # 删除一些元素 \nprint(list) # 输出['B', 'E', 'F'] \ndel list # 删除整个列表\n```\n### remove(obj)\n\n移除目标列表的指定元素，找不到则抛出异常。\n\n### pop([index=-1])\n\n移除列表中的一个元素（默认最后一个元素），并且返回该元素的值，没有值可以返回则抛出异常。\n\n## 操作符\n\n列表的操作与字符串运算符的种类和效果基本相同，此处不表，请参照之前的文章。\n\n## 其他函数\n\n### len(list)\n\n返回列表元素个数。\n\n### clear()\n\n清除目标列表的所有元素。\n\n### max(list) min(list)\n\n返回列表元素的最大/小值，如果列表中的元素不是一种类型或者没有重载小于号，会报错。\n当列表中元素均是一种类型，可以通过此类型的默认排序获得结果。\n\n```python\nlist = [[1,2],[4,4],[4,2,2]]\nprint(max(list)) # 输出[4,4] 即先比较第一个数，再比较第二个数\n```\n### sort(cmp=None, key=None, reverse=False)\n\n对原列表进行排序，不返回值。\n\n- cmp 可选参数, 如果指定了该参数会使用该参数的方法进行排序。\n- key 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。\n- reverse 排序规则，reverse = True 降序， reverse = False 升序（默认）。\n\nsort还可以搭配类中重载小于号的方式来使用，此处按下不表。\n\n# 元组\n\n可以理解为元组为不可变的数组，目的是为了代码的安全性。\n\n## 访问\n\n使用下标索引来访问元组中的值。\n\n## 改动\n\n元组中的元素值是不允许修改的，但我们可以对元组进行连接组合。\n\n## 删除\n\n元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组。\n\n## 操作符\n\n元组的操作与字符串运算符的种类和效果基本相同，此处不表，请参照之前的文章。\n\n## 其他函数\n\n元组同列表一样拥有len()、min()、max()等函数。\n\n# 字典\n\n字典同其他主流编程语言的map一样，是一种key-\\>value的容器，查询速度很快。\n要注意的是，key要是唯一的且不可变，但value不一定。如果重复对一个key进行改动，则会把旧的抛弃，更新为新的。\n\n## 访问\n\n使用下标索引(key)来访问字典中的值。没有会报错。\n\n## 改动\n\n使用下标索引(key)来更新元组中的值。\n\n## 删除\n\n有三种方法可以不同程度上的删除字典。\n\n### del dict[]\n\n删除字典里的一对key-\\>value的元素。\n\n### clear()\n\n删除字典里面的所有元素。\n\n### del dict\n\n删除整个字典。dsadsadsadsa\n\n## 其他函数\n\n### len(dict)\n\n计算字典元素个数，即键的总数。\n\n### str(dict)\n\n输出字典，以可打印的字符串表示。\n\n### fromkeys()\n\n创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值。\n\n### get(key, default=None)\n\n返回指定键的值，如果值不在字典中返回default值。\n\n### items()\n\n以列表返回可遍历的(键, 值) 元组数组。\n\n### setdefault(key, default=None)\n\n和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default。\n\n### pop(key[,default])\n删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。\n\n### keys()/values()\n\n以列表返回一个字典所有的键/值。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python3/python3-list.html\n2. http://www.runoob.com/python3/python3-tuple.html\n3. http://www.runoob.com/python3/python3-dictionary.html\n4. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000\n5. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000","slug":"python/grammar-5","published":1,"updated":"2018-07-10T17:31:12.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3ze6000cektzc6sl6h13","content":"<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><p>可以理解为列表为可变的数组，不过Python中的列表较之灵活许多。</p>\n<h2 id=\"访问改动\"><a href=\"#访问改动\" class=\"headerlink\" title=\"访问改动\"></a>访问改动</h2><p>使用下标索引来访问并改动列表中的值，同样你也可以使用方括号的形式截取字符，访问并改动，超出范围则会报错。</p>\n<h3 id=\"index-obj\"><a href=\"#index-obj\" class=\"headerlink\" title=\"index(obj)\"></a>index(obj)</h3><p>返回目标列表中obj出现的位置，如果没有则抛出异常。</p>\n<h2 id=\"增减\"><a href=\"#增减\" class=\"headerlink\" title=\"增减\"></a>增减</h2><h3 id=\"append-obj\"><a href=\"#append-obj\" class=\"headerlink\" title=\"append(obj)\"></a>append(obj)</h3><p>向目标列表的最后添加一个元素。</p>\n<h3 id=\"extend-seq\"><a href=\"#extend-seq\" class=\"headerlink\" title=\"extend(seq)\"></a>extend(seq)</h3><p>向目标列表的最后添加如干个元素，seq要是一个可迭代的参数。</p>\n<h3 id=\"insert-index-obj\"><a href=\"#insert-index-obj\" class=\"headerlink\" title=\"insert(index,obj)\"></a>insert(index,obj)</h3><p>向目标列表指定位置插入一个元素。</p>\n<h3 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"del\"></a>del</h3><p>可以使用 del 语句来删除列表的的元素，可以删除整个列表，也可以通过下标索引来删除列表中的某个或某些元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> list[<span class=\"number\">0</span>] <span class=\"comment\"># 删除一个元素 </span></span><br><span class=\"line\">print(list) <span class=\"comment\"># 输出['B', 'C', 'D', 'E', 'F'] </span></span><br><span class=\"line\"><span class=\"keyword\">del</span> list[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\"># 删除一些元素 </span></span><br><span class=\"line\">print(list) <span class=\"comment\"># 输出['B', 'E', 'F'] </span></span><br><span class=\"line\"><span class=\"keyword\">del</span> list <span class=\"comment\"># 删除整个列表</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"remove-obj\"><a href=\"#remove-obj\" class=\"headerlink\" title=\"remove(obj)\"></a>remove(obj)</h3><p>移除目标列表的指定元素，找不到则抛出异常。</p>\n<h3 id=\"pop-index-1\"><a href=\"#pop-index-1\" class=\"headerlink\" title=\"pop([index=-1])\"></a>pop([index=-1])</h3><p>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值，没有值可以返回则抛出异常。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>列表的操作与字符串运算符的种类和效果基本相同，此处不表，请参照之前的文章。</p>\n<h2 id=\"其他函数\"><a href=\"#其他函数\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><h3 id=\"len-list\"><a href=\"#len-list\" class=\"headerlink\" title=\"len(list)\"></a>len(list)</h3><p>返回列表元素个数。</p>\n<h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear()\"></a>clear()</h3><p>清除目标列表的所有元素。</p>\n<h3 id=\"max-list-min-list\"><a href=\"#max-list-min-list\" class=\"headerlink\" title=\"max(list) min(list)\"></a>max(list) min(list)</h3><p>返回列表元素的最大/小值，如果列表中的元素不是一种类型或者没有重载小于号，会报错。<br>当列表中元素均是一种类型，可以通过此类型的默认排序获得结果。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">4</span>,<span class=\"number\">4</span>],[<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">print(max(list)) <span class=\"comment\"># 输出[4,4] 即先比较第一个数，再比较第二个数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sort-cmp-None-key-None-reverse-False\"><a href=\"#sort-cmp-None-key-None-reverse-False\" class=\"headerlink\" title=\"sort(cmp=None, key=None, reverse=False)\"></a>sort(cmp=None, key=None, reverse=False)</h3><p>对原列表进行排序，不返回值。</p>\n<ul>\n<li>cmp 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</li>\n<li>key 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>\n<li>reverse 排序规则，reverse = True 降序， reverse = False 升序（默认）。</li>\n</ul>\n<p>sort还可以搭配类中重载小于号的方式来使用，此处按下不表。</p>\n<h1 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h1><p>可以理解为元组为不可变的数组，目的是为了代码的安全性。</p>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>使用下标索引来访问元组中的值。</p>\n<h2 id=\"改动\"><a href=\"#改动\" class=\"headerlink\" title=\"改动\"></a>改动</h2><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合。</p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组。</p>\n<h2 id=\"操作符-1\"><a href=\"#操作符-1\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>元组的操作与字符串运算符的种类和效果基本相同，此处不表，请参照之前的文章。</p>\n<h2 id=\"其他函数-1\"><a href=\"#其他函数-1\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><p>元组同列表一样拥有len()、min()、max()等函数。</p>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><p>字典同其他主流编程语言的map一样，是一种key->value的容器，查询速度很快。<br>要注意的是，key要是唯一的且不可变，但value不一定。如果重复对一个key进行改动，则会把旧的抛弃，更新为新的。</p>\n<h2 id=\"访问-1\"><a href=\"#访问-1\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>使用下标索引(key)来访问字典中的值。没有会报错。</p>\n<h2 id=\"改动-1\"><a href=\"#改动-1\" class=\"headerlink\" title=\"改动\"></a>改动</h2><p>使用下标索引(key)来更新元组中的值。</p>\n<h2 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>有三种方法可以不同程度上的删除字典。</p>\n<h3 id=\"del-dict\"><a href=\"#del-dict\" class=\"headerlink\" title=\"del dict[]\"></a>del dict[]</h3><p>删除字典里的一对key->value的元素。</p>\n<h3 id=\"clear-1\"><a href=\"#clear-1\" class=\"headerlink\" title=\"clear()\"></a>clear()</h3><p>删除字典里面的所有元素。</p>\n<h3 id=\"del-dict-1\"><a href=\"#del-dict-1\" class=\"headerlink\" title=\"del dict\"></a>del dict</h3><p>删除整个字典。dsadsadsadsa</p>\n<h2 id=\"其他函数-2\"><a href=\"#其他函数-2\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><h3 id=\"len-dict\"><a href=\"#len-dict\" class=\"headerlink\" title=\"len(dict)\"></a>len(dict)</h3><p>计算字典元素个数，即键的总数。</p>\n<h3 id=\"str-dict\"><a href=\"#str-dict\" class=\"headerlink\" title=\"str(dict)\"></a>str(dict)</h3><p>输出字典，以可打印的字符串表示。</p>\n<h3 id=\"fromkeys\"><a href=\"#fromkeys\" class=\"headerlink\" title=\"fromkeys()\"></a>fromkeys()</h3><p>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值。</p>\n<h3 id=\"get-key-default-None\"><a href=\"#get-key-default-None\" class=\"headerlink\" title=\"get(key, default=None)\"></a>get(key, default=None)</h3><p>返回指定键的值，如果值不在字典中返回default值。</p>\n<h3 id=\"items\"><a href=\"#items\" class=\"headerlink\" title=\"items()\"></a>items()</h3><p>以列表返回可遍历的(键, 值) 元组数组。</p>\n<h3 id=\"setdefault-key-default-None\"><a href=\"#setdefault-key-default-None\" class=\"headerlink\" title=\"setdefault(key, default=None)\"></a>setdefault(key, default=None)</h3><p>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default。</p>\n<h3 id=\"pop-key-default\"><a href=\"#pop-key-default\" class=\"headerlink\" title=\"pop(key[,default])\"></a>pop(key[,default])</h3><p>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</p>\n<h3 id=\"keys-values\"><a href=\"#keys-values\" class=\"headerlink\" title=\"keys()/values()\"></a>keys()/values()</h3><p>以列表返回一个字典所有的键/值。</p>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python3/python3-list.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-list.html</a></li>\n<li><a href=\"http://www.runoob.com/python3/python3-tuple.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-tuple.html</a></li>\n<li><a href=\"http://www.runoob.com/python3/python3-dictionary.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-dictionary.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><p>可以理解为列表为可变的数组，不过Python中的列表较之灵活许多。</p>\n<h2 id=\"访问改动\"><a href=\"#访问改动\" class=\"headerlink\" title=\"访问改动\"></a>访问改动</h2><p>使用下标索引来访问并改动列表中的值，同样你也可以使用方括号的形式截取字符，访问并改动，超出范围则会报错。</p>\n<h3 id=\"index-obj\"><a href=\"#index-obj\" class=\"headerlink\" title=\"index(obj)\"></a>index(obj)</h3><p>返回目标列表中obj出现的位置，如果没有则抛出异常。</p>\n<h2 id=\"增减\"><a href=\"#增减\" class=\"headerlink\" title=\"增减\"></a>增减</h2><h3 id=\"append-obj\"><a href=\"#append-obj\" class=\"headerlink\" title=\"append(obj)\"></a>append(obj)</h3><p>向目标列表的最后添加一个元素。</p>\n<h3 id=\"extend-seq\"><a href=\"#extend-seq\" class=\"headerlink\" title=\"extend(seq)\"></a>extend(seq)</h3><p>向目标列表的最后添加如干个元素，seq要是一个可迭代的参数。</p>\n<h3 id=\"insert-index-obj\"><a href=\"#insert-index-obj\" class=\"headerlink\" title=\"insert(index,obj)\"></a>insert(index,obj)</h3><p>向目标列表指定位置插入一个元素。</p>\n<h3 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"del\"></a>del</h3><p>可以使用 del 语句来删除列表的的元素，可以删除整个列表，也可以通过下标索引来删除列表中的某个或某些元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> list[<span class=\"number\">0</span>] <span class=\"comment\"># 删除一个元素 </span></span><br><span class=\"line\">print(list) <span class=\"comment\"># 输出['B', 'C', 'D', 'E', 'F'] </span></span><br><span class=\"line\"><span class=\"keyword\">del</span> list[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\"># 删除一些元素 </span></span><br><span class=\"line\">print(list) <span class=\"comment\"># 输出['B', 'E', 'F'] </span></span><br><span class=\"line\"><span class=\"keyword\">del</span> list <span class=\"comment\"># 删除整个列表</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"remove-obj\"><a href=\"#remove-obj\" class=\"headerlink\" title=\"remove(obj)\"></a>remove(obj)</h3><p>移除目标列表的指定元素，找不到则抛出异常。</p>\n<h3 id=\"pop-index-1\"><a href=\"#pop-index-1\" class=\"headerlink\" title=\"pop([index=-1])\"></a>pop([index=-1])</h3><p>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值，没有值可以返回则抛出异常。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>列表的操作与字符串运算符的种类和效果基本相同，此处不表，请参照之前的文章。</p>\n<h2 id=\"其他函数\"><a href=\"#其他函数\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><h3 id=\"len-list\"><a href=\"#len-list\" class=\"headerlink\" title=\"len(list)\"></a>len(list)</h3><p>返回列表元素个数。</p>\n<h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear()\"></a>clear()</h3><p>清除目标列表的所有元素。</p>\n<h3 id=\"max-list-min-list\"><a href=\"#max-list-min-list\" class=\"headerlink\" title=\"max(list) min(list)\"></a>max(list) min(list)</h3><p>返回列表元素的最大/小值，如果列表中的元素不是一种类型或者没有重载小于号，会报错。<br>当列表中元素均是一种类型，可以通过此类型的默认排序获得结果。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">4</span>,<span class=\"number\">4</span>],[<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]]</span><br><span class=\"line\">print(max(list)) <span class=\"comment\"># 输出[4,4] 即先比较第一个数，再比较第二个数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sort-cmp-None-key-None-reverse-False\"><a href=\"#sort-cmp-None-key-None-reverse-False\" class=\"headerlink\" title=\"sort(cmp=None, key=None, reverse=False)\"></a>sort(cmp=None, key=None, reverse=False)</h3><p>对原列表进行排序，不返回值。</p>\n<ul>\n<li>cmp 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</li>\n<li>key 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>\n<li>reverse 排序规则，reverse = True 降序， reverse = False 升序（默认）。</li>\n</ul>\n<p>sort还可以搭配类中重载小于号的方式来使用，此处按下不表。</p>\n<h1 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h1><p>可以理解为元组为不可变的数组，目的是为了代码的安全性。</p>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>使用下标索引来访问元组中的值。</p>\n<h2 id=\"改动\"><a href=\"#改动\" class=\"headerlink\" title=\"改动\"></a>改动</h2><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合。</p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组。</p>\n<h2 id=\"操作符-1\"><a href=\"#操作符-1\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>元组的操作与字符串运算符的种类和效果基本相同，此处不表，请参照之前的文章。</p>\n<h2 id=\"其他函数-1\"><a href=\"#其他函数-1\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><p>元组同列表一样拥有len()、min()、max()等函数。</p>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><p>字典同其他主流编程语言的map一样，是一种key->value的容器，查询速度很快。<br>要注意的是，key要是唯一的且不可变，但value不一定。如果重复对一个key进行改动，则会把旧的抛弃，更新为新的。</p>\n<h2 id=\"访问-1\"><a href=\"#访问-1\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>使用下标索引(key)来访问字典中的值。没有会报错。</p>\n<h2 id=\"改动-1\"><a href=\"#改动-1\" class=\"headerlink\" title=\"改动\"></a>改动</h2><p>使用下标索引(key)来更新元组中的值。</p>\n<h2 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>有三种方法可以不同程度上的删除字典。</p>\n<h3 id=\"del-dict\"><a href=\"#del-dict\" class=\"headerlink\" title=\"del dict[]\"></a>del dict[]</h3><p>删除字典里的一对key->value的元素。</p>\n<h3 id=\"clear-1\"><a href=\"#clear-1\" class=\"headerlink\" title=\"clear()\"></a>clear()</h3><p>删除字典里面的所有元素。</p>\n<h3 id=\"del-dict-1\"><a href=\"#del-dict-1\" class=\"headerlink\" title=\"del dict\"></a>del dict</h3><p>删除整个字典。dsadsadsadsa</p>\n<h2 id=\"其他函数-2\"><a href=\"#其他函数-2\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><h3 id=\"len-dict\"><a href=\"#len-dict\" class=\"headerlink\" title=\"len(dict)\"></a>len(dict)</h3><p>计算字典元素个数，即键的总数。</p>\n<h3 id=\"str-dict\"><a href=\"#str-dict\" class=\"headerlink\" title=\"str(dict)\"></a>str(dict)</h3><p>输出字典，以可打印的字符串表示。</p>\n<h3 id=\"fromkeys\"><a href=\"#fromkeys\" class=\"headerlink\" title=\"fromkeys()\"></a>fromkeys()</h3><p>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值。</p>\n<h3 id=\"get-key-default-None\"><a href=\"#get-key-default-None\" class=\"headerlink\" title=\"get(key, default=None)\"></a>get(key, default=None)</h3><p>返回指定键的值，如果值不在字典中返回default值。</p>\n<h3 id=\"items\"><a href=\"#items\" class=\"headerlink\" title=\"items()\"></a>items()</h3><p>以列表返回可遍历的(键, 值) 元组数组。</p>\n<h3 id=\"setdefault-key-default-None\"><a href=\"#setdefault-key-default-None\" class=\"headerlink\" title=\"setdefault(key, default=None)\"></a>setdefault(key, default=None)</h3><p>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default。</p>\n<h3 id=\"pop-key-default\"><a href=\"#pop-key-default\" class=\"headerlink\" title=\"pop(key[,default])\"></a>pop(key[,default])</h3><p>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</p>\n<h3 id=\"keys-values\"><a href=\"#keys-values\" class=\"headerlink\" title=\"keys()/values()\"></a>keys()/values()</h3><p>以列表返回一个字典所有的键/值。</p>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python3/python3-list.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-list.html</a></li>\n<li><a href=\"http://www.runoob.com/python3/python3-tuple.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-tuple.html</a></li>\n<li><a href=\"http://www.runoob.com/python3/python3-dictionary.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-dictionary.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000</a></li>\n</ol>\n"},{"title":"Python3 学习之路(3) 变量","date":"2018-06-07T18:17:36.000Z","toc":true,"thumbnail":"/images/python/Python-thumbnail.png","banner":"/images/python/Python-banner.png","_content":"\n# 变量简述\n\nPython 中的变量赋值不需要类型声明。\n每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。\n每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\n等号（=）用来给变量赋值。\n等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。\n\n```python\nanswer = 42 #之前看到过的简单的变量赋值\n```\n# 标准数据类型\n\n## 数字(Number)\n\n### 长整型(int)\n\n在Python3中，只有一种int代表长整型，可以参照上述进行赋值和计算。在超过类似 C/C++ 中的 int 变量时，自动的转换成一个精度无限的long类型。同时，python提供16进制0x写法，和8进制的0o写法。\n\n### 浮点数(float)\n\n浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以使用平时的小数写法，也支持科学计数写法。\n\n### 布尔值(bool)\n\n布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，注意其大小写。\n布尔值可以参与数字的运算，此时True代表1，False代表0。\n\n布尔值可以用and、or和not运算，分别对于与，或，非。\n\n### 复数(complex)\n\n复数的赋值可以使用两种方法。\n\n```python\ns = 3 + 1j\nd = complex(3,2)\n```\n### 数值计算\n\npython 支持 加法、减法、乘法、除法、地板除法、取余、乘方的数值计算。在混合计算时，Python会隐式的把整型转换成为浮点数。\n\n```python\n5/2 #除法 返回一个浮点数 2.5\n5//2 #地板除法 返回一个整数 2，向0取整\n5%2 #取余 返回一个整数/浮点数，取决于两个操作数是否有浮点数\n2**5 #乘方\n```\n## 字符串(String)\n\n字符串是以单引号\\'或双引号\\\"括起来的任意文本，比如\\'abc\\'，\\\"xyz\\\"等等。请注意，\\'\\'或\\\"\\\"本身只是一种表示方式，不是字符串的一部分，因此，字符串\\'abc\\'只有a，b，c这3个字符。\n字符串可以用截取的语法，格式为：变量[头下标:尾下标]\n\n```python\nprint(str[0:-1])  # 输出第一个到倒数第二个的所有字符  \nprint(str[0])  # 输出字符串第一个字符  \nprint(str[2:5])  # 输出从第三个开始到第五个的字符  \nprint(str[2:])  # 输出从第三个开始的后的所有字符  \nprint(str * 2)  # 输出字符串两次  \nprint(str + \"TEST\")  # 连接字符串\n```\n注意，python里面的字符串(甚至包括其他引用类型)，是以值比较相等的，而不是像java等语言比较内存地址。故两个内存地址不同，但内容相同的字符串做相等判定，答案是True。\n\n## 列表(List)\n\n列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。\n列表是写在方括号之间、用逗号分隔开的元素列表，列表中的元素是可以改变的。\n和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。\n\n## 元组(Tuple)\n\n元组与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。\ntuple的元素不可改变，但它可以包含可变的对象，比如list列表。\n构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：\n\n```python\ntup1 = ()  # 空元组\ntup2 = (20,)  # 一个元素，需要在元素后添加逗号\n```\nstring、list和tuple都属于sequence（序列）。\n\n## 集合(Set)\n\n集合是一个无序不重复元素的序列，其基本功能是进行成员关系测试和删除重复元素。\n可以使用大括号 { } 或者 set() 函数创建集合。\n但是创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n```python\na = set('abracadabra') \nb = set('alacazam') \nprint(a) \nprint(a - b)  # a和b的差集  \nprint(a | b)  # a和b的并集  \nprint(a & b)  # a和b的交集  \nprint(a ^ b)  # a和b中不同时存在的元素\n```\n## 字典(Dictionary)\n\n字典当中的元素是通过键来存取的，而不是通过偏移存取，这是字典与序列不同的地方。\n\n字典是一种映射类型，字典用\"{ }\"标识，它是一个无序的键(key) : 值(value)对集合。\n键(key)必须使用不可变类型，在同一个字典中，键(key)必须是唯一的。\n字典可以通过中括号中加key的方法来获得value，也可以调用.keys() 或 .value() 方法来获得其中的所有键与值。\n\n## 空值(None)\n\n空值是一个特殊的值，用None表示，空值不能代表0，0也不能代表空值。\n\n# 相关函数\n\n## del var\n\n删除一些对象的引用，你可以使用del删除一个或多个的对象引用，如果要多个，用逗号隔开。\n\n```python\ndel var1,var2,var3\n```\n\n## int(x[,base])\n\n```python\nage = int(10.9) # 将x转换为int型变量，向0取整\nstatus = int('10',2) # 构造2进制下的10，即十进制下的2，注意'10'是字符串\n```\n## float(x)\n\n```python\nweight = float(50) # 将x转换float型变量\n```\n\n## complex(real[,imag])\n\n```python\na = complex(1) # 构造复数 1 + 0j\nb = complex(-1,5) # 构造复数 -1 ＋５ｊ\n```\n## str(x)\n\n将x转换为字符串。\n\n## repr(x)\n\n将对象转化为供解释器读取的形式，返回一个字符串。\n\n## eval(expression[, globals[, locals]])\n\n执行一个字符串表达式，并返回表达式的值。\n\n| 参数 | 含义 |\n|---|---|\n| expression | 表达式 |\n| globals | 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。 |\n| locals | 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。 |\n\n```python\neval('2 + 2') # 返回一个值为4的int类型\nn = 4\neval('n ** 2') # 返回一个值为16的int类型\neval('\"hello,\" + str(0)') # 返回一个值为'hello,0'的string类型\n```\n## tuple(s)\n\n将s转换为元组。\n\n## list(s)\n\n将s转换为列表。\n\n## dict(d)\n\n将d转换为字典。\n\n```python\nsex = dict(boy='1',girl='0') #传入关键字\nweek = dict([('Mon', 0), ('Tues', 1), ('Wed', 2), \n             ('Thur', 3), ('Fri', 4), ('Sat', 5), ('Sun', 6)]) \n\t\t\t\t#可迭代对象方式来构造字典\n```\n## frozenset([iterable])\n\n将iterable转换为冻结的集合，冻结后集合不能再添加或删除任何元素。\niterable为可迭代的对象，比如列表、字典、元组等等。\n注意，冻结的集合中任意一个元素不能是列表，但是可以直接冻结列表(这里应该看作均为不可变的元素)。\n\n```python\ntup = (3, 5.0, \"test\", (2, 2), ([2,3],[3,3])) \n\t#元素分别为int、float、string、tuple、带有list的tuple\nlist = [321,\"test\",((2,2),(3,3))] \n\t#元素分别为int、string、带有tuple的tuple\nfrozenset(tup) \n\t# 非法操作，冻结的集合中含有带list的元素\nfrozenset(list) \n\t# 合法操作，冻结的中不含有带list的元素\n```\n## chr(x) ord(c)\n\nchr(x) 将整数x以ASCII码表转换成字符。\nord(c) 将字符c以ASCII码表转换成整数。\n\n## hex(x) oct(x)\n\nhex(x) 将整数x转换成16进制，以字符串的格式返回。\noct(x) 将整数x转换成8进制，以字符串的格式返回。\n\n## id(x)\n\n返回变量x的内存地址。\n\n## type(var)\n\n查询变量所指的对象类型。\n\n## isinstance(var, type)\n\n判定查询变量所指的对象类型是不是type，若是则返回True，否则返回False。\n\n```python\nn = 3\nif isinstance(n, int) :\n   print(\"n's type is int)\n```\ntype()与isinstance()的区别在面向对象时可以区分出来。\n若有A类，且B类继承了A类。\n则，type()认为A与B是两种不同的数据类型。\n而，isinstance()认为B类的对象也是一种A类的对象，他们同属于一种数据类型。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python3/python3-data-type.html\n2. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000","source":"_posts/python/grammar-3.md","raw":"---\ntitle: Python3 学习之路(3) 变量\ndate: 2018-6-8 02:17:36\ncategories: Python\ntags: \n    - Python\ntoc: true\nthumbnail: /images/python/Python-thumbnail.png\nbanner: /images/python/Python-banner.png\n---\n\n# 变量简述\n\nPython 中的变量赋值不需要类型声明。\n每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。\n每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\n等号（=）用来给变量赋值。\n等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。\n\n```python\nanswer = 42 #之前看到过的简单的变量赋值\n```\n# 标准数据类型\n\n## 数字(Number)\n\n### 长整型(int)\n\n在Python3中，只有一种int代表长整型，可以参照上述进行赋值和计算。在超过类似 C/C++ 中的 int 变量时，自动的转换成一个精度无限的long类型。同时，python提供16进制0x写法，和8进制的0o写法。\n\n### 浮点数(float)\n\n浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以使用平时的小数写法，也支持科学计数写法。\n\n### 布尔值(bool)\n\n布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，注意其大小写。\n布尔值可以参与数字的运算，此时True代表1，False代表0。\n\n布尔值可以用and、or和not运算，分别对于与，或，非。\n\n### 复数(complex)\n\n复数的赋值可以使用两种方法。\n\n```python\ns = 3 + 1j\nd = complex(3,2)\n```\n### 数值计算\n\npython 支持 加法、减法、乘法、除法、地板除法、取余、乘方的数值计算。在混合计算时，Python会隐式的把整型转换成为浮点数。\n\n```python\n5/2 #除法 返回一个浮点数 2.5\n5//2 #地板除法 返回一个整数 2，向0取整\n5%2 #取余 返回一个整数/浮点数，取决于两个操作数是否有浮点数\n2**5 #乘方\n```\n## 字符串(String)\n\n字符串是以单引号\\'或双引号\\\"括起来的任意文本，比如\\'abc\\'，\\\"xyz\\\"等等。请注意，\\'\\'或\\\"\\\"本身只是一种表示方式，不是字符串的一部分，因此，字符串\\'abc\\'只有a，b，c这3个字符。\n字符串可以用截取的语法，格式为：变量[头下标:尾下标]\n\n```python\nprint(str[0:-1])  # 输出第一个到倒数第二个的所有字符  \nprint(str[0])  # 输出字符串第一个字符  \nprint(str[2:5])  # 输出从第三个开始到第五个的字符  \nprint(str[2:])  # 输出从第三个开始的后的所有字符  \nprint(str * 2)  # 输出字符串两次  \nprint(str + \"TEST\")  # 连接字符串\n```\n注意，python里面的字符串(甚至包括其他引用类型)，是以值比较相等的，而不是像java等语言比较内存地址。故两个内存地址不同，但内容相同的字符串做相等判定，答案是True。\n\n## 列表(List)\n\n列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。\n列表是写在方括号之间、用逗号分隔开的元素列表，列表中的元素是可以改变的。\n和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。\n\n## 元组(Tuple)\n\n元组与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。\ntuple的元素不可改变，但它可以包含可变的对象，比如list列表。\n构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：\n\n```python\ntup1 = ()  # 空元组\ntup2 = (20,)  # 一个元素，需要在元素后添加逗号\n```\nstring、list和tuple都属于sequence（序列）。\n\n## 集合(Set)\n\n集合是一个无序不重复元素的序列，其基本功能是进行成员关系测试和删除重复元素。\n可以使用大括号 { } 或者 set() 函数创建集合。\n但是创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n\n```python\na = set('abracadabra') \nb = set('alacazam') \nprint(a) \nprint(a - b)  # a和b的差集  \nprint(a | b)  # a和b的并集  \nprint(a & b)  # a和b的交集  \nprint(a ^ b)  # a和b中不同时存在的元素\n```\n## 字典(Dictionary)\n\n字典当中的元素是通过键来存取的，而不是通过偏移存取，这是字典与序列不同的地方。\n\n字典是一种映射类型，字典用\"{ }\"标识，它是一个无序的键(key) : 值(value)对集合。\n键(key)必须使用不可变类型，在同一个字典中，键(key)必须是唯一的。\n字典可以通过中括号中加key的方法来获得value，也可以调用.keys() 或 .value() 方法来获得其中的所有键与值。\n\n## 空值(None)\n\n空值是一个特殊的值，用None表示，空值不能代表0，0也不能代表空值。\n\n# 相关函数\n\n## del var\n\n删除一些对象的引用，你可以使用del删除一个或多个的对象引用，如果要多个，用逗号隔开。\n\n```python\ndel var1,var2,var3\n```\n\n## int(x[,base])\n\n```python\nage = int(10.9) # 将x转换为int型变量，向0取整\nstatus = int('10',2) # 构造2进制下的10，即十进制下的2，注意'10'是字符串\n```\n## float(x)\n\n```python\nweight = float(50) # 将x转换float型变量\n```\n\n## complex(real[,imag])\n\n```python\na = complex(1) # 构造复数 1 + 0j\nb = complex(-1,5) # 构造复数 -1 ＋５ｊ\n```\n## str(x)\n\n将x转换为字符串。\n\n## repr(x)\n\n将对象转化为供解释器读取的形式，返回一个字符串。\n\n## eval(expression[, globals[, locals]])\n\n执行一个字符串表达式，并返回表达式的值。\n\n| 参数 | 含义 |\n|---|---|\n| expression | 表达式 |\n| globals | 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。 |\n| locals | 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。 |\n\n```python\neval('2 + 2') # 返回一个值为4的int类型\nn = 4\neval('n ** 2') # 返回一个值为16的int类型\neval('\"hello,\" + str(0)') # 返回一个值为'hello,0'的string类型\n```\n## tuple(s)\n\n将s转换为元组。\n\n## list(s)\n\n将s转换为列表。\n\n## dict(d)\n\n将d转换为字典。\n\n```python\nsex = dict(boy='1',girl='0') #传入关键字\nweek = dict([('Mon', 0), ('Tues', 1), ('Wed', 2), \n             ('Thur', 3), ('Fri', 4), ('Sat', 5), ('Sun', 6)]) \n\t\t\t\t#可迭代对象方式来构造字典\n```\n## frozenset([iterable])\n\n将iterable转换为冻结的集合，冻结后集合不能再添加或删除任何元素。\niterable为可迭代的对象，比如列表、字典、元组等等。\n注意，冻结的集合中任意一个元素不能是列表，但是可以直接冻结列表(这里应该看作均为不可变的元素)。\n\n```python\ntup = (3, 5.0, \"test\", (2, 2), ([2,3],[3,3])) \n\t#元素分别为int、float、string、tuple、带有list的tuple\nlist = [321,\"test\",((2,2),(3,3))] \n\t#元素分别为int、string、带有tuple的tuple\nfrozenset(tup) \n\t# 非法操作，冻结的集合中含有带list的元素\nfrozenset(list) \n\t# 合法操作，冻结的中不含有带list的元素\n```\n## chr(x) ord(c)\n\nchr(x) 将整数x以ASCII码表转换成字符。\nord(c) 将字符c以ASCII码表转换成整数。\n\n## hex(x) oct(x)\n\nhex(x) 将整数x转换成16进制，以字符串的格式返回。\noct(x) 将整数x转换成8进制，以字符串的格式返回。\n\n## id(x)\n\n返回变量x的内存地址。\n\n## type(var)\n\n查询变量所指的对象类型。\n\n## isinstance(var, type)\n\n判定查询变量所指的对象类型是不是type，若是则返回True，否则返回False。\n\n```python\nn = 3\nif isinstance(n, int) :\n   print(\"n's type is int)\n```\ntype()与isinstance()的区别在面向对象时可以区分出来。\n若有A类，且B类继承了A类。\n则，type()认为A与B是两种不同的数据类型。\n而，isinstance()认为B类的对象也是一种A类的对象，他们同属于一种数据类型。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python3/python3-data-type.html\n2. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000","slug":"python/grammar-3","published":1,"updated":"2018-07-10T17:31:12.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zex000nektzfqi4kkeh","content":"<h1 id=\"变量简述\"><a href=\"#变量简述\" class=\"headerlink\" title=\"变量简述\"></a>变量简述</h1><p>Python 中的变量赋值不需要类型声明。<br>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。<br>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。<br>等号（=）用来给变量赋值。<br>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer = <span class=\"number\">42</span> <span class=\"comment\">#之前看到过的简单的变量赋值</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"标准数据类型\"><a href=\"#标准数据类型\" class=\"headerlink\" title=\"标准数据类型\"></a>标准数据类型</h1><h2 id=\"数字-Number\"><a href=\"#数字-Number\" class=\"headerlink\" title=\"数字(Number)\"></a>数字(Number)</h2><h3 id=\"长整型-int\"><a href=\"#长整型-int\" class=\"headerlink\" title=\"长整型(int)\"></a>长整型(int)</h3><p>在Python3中，只有一种int代表长整型，可以参照上述进行赋值和计算。在超过类似 C/C++ 中的 int 变量时，自动的转换成一个精度无限的long类型。同时，python提供16进制0x写法，和8进制的0o写法。</p>\n<h3 id=\"浮点数-float\"><a href=\"#浮点数-float\" class=\"headerlink\" title=\"浮点数(float)\"></a>浮点数(float)</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以使用平时的小数写法，也支持科学计数写法。</p>\n<h3 id=\"布尔值-bool\"><a href=\"#布尔值-bool\" class=\"headerlink\" title=\"布尔值(bool)\"></a>布尔值(bool)</h3><p>布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，注意其大小写。<br>布尔值可以参与数字的运算，此时True代表1，False代表0。</p>\n<p>布尔值可以用and、or和not运算，分别对于与，或，非。</p>\n<h3 id=\"复数-complex\"><a href=\"#复数-complex\" class=\"headerlink\" title=\"复数(complex)\"></a>复数(complex)</h3><p>复数的赋值可以使用两种方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"number\">3</span> + <span class=\"number\">1j</span></span><br><span class=\"line\">d = complex(<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值计算\"><a href=\"#数值计算\" class=\"headerlink\" title=\"数值计算\"></a>数值计算</h3><p>python 支持 加法、减法、乘法、除法、地板除法、取余、乘方的数值计算。在混合计算时，Python会隐式的把整型转换成为浮点数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span>/<span class=\"number\">2</span> <span class=\"comment\">#除法 返回一个浮点数 2.5</span></span><br><span class=\"line\"><span class=\"number\">5</span>//<span class=\"number\">2</span> <span class=\"comment\">#地板除法 返回一个整数 2，向0取整</span></span><br><span class=\"line\"><span class=\"number\">5</span>%<span class=\"number\">2</span> <span class=\"comment\">#取余 返回一个整数/浮点数，取决于两个操作数是否有浮点数</span></span><br><span class=\"line\"><span class=\"number\">2</span>**<span class=\"number\">5</span> <span class=\"comment\">#乘方</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串-String\"><a href=\"#字符串-String\" class=\"headerlink\" title=\"字符串(String)\"></a>字符串(String)</h2><p>字符串是以单引号\\’或双引号\\”括起来的任意文本，比如\\’abc\\’，\\”xyz\\”等等。请注意，\\’\\’或\\”\\”本身只是一种表示方式，不是字符串的一部分，因此，字符串\\’abc\\’只有a，b，c这3个字符。<br>字符串可以用截取的语法，格式为：变量[头下标:尾下标]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">-1</span>])  <span class=\"comment\"># 输出第一个到倒数第二个的所有字符  </span></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>])  <span class=\"comment\"># 输出字符串第一个字符  </span></span><br><span class=\"line\">print(str[<span class=\"number\">2</span>:<span class=\"number\">5</span>])  <span class=\"comment\"># 输出从第三个开始到第五个的字符  </span></span><br><span class=\"line\">print(str[<span class=\"number\">2</span>:])  <span class=\"comment\"># 输出从第三个开始的后的所有字符  </span></span><br><span class=\"line\">print(str * <span class=\"number\">2</span>)  <span class=\"comment\"># 输出字符串两次  </span></span><br><span class=\"line\">print(str + <span class=\"string\">\"TEST\"</span>)  <span class=\"comment\"># 连接字符串</span></span><br></pre></td></tr></table></figure>\n<p>注意，python里面的字符串(甚至包括其他引用类型)，是以值比较相等的，而不是像java等语言比较内存地址。故两个内存地址不同，但内容相同的字符串做相等判定，答案是True。</p>\n<h2 id=\"列表-List\"><a href=\"#列表-List\" class=\"headerlink\" title=\"列表(List)\"></a>列表(List)</h2><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。<br>列表是写在方括号之间、用逗号分隔开的元素列表，列表中的元素是可以改变的。<br>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>\n<h2 id=\"元组-Tuple\"><a href=\"#元组-Tuple\" class=\"headerlink\" title=\"元组(Tuple)\"></a>元组(Tuple)</h2><p>元组与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。<br>tuple的元素不可改变，但它可以包含可变的对象，比如list列表。<br>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = ()  <span class=\"comment\"># 空元组</span></span><br><span class=\"line\">tup2 = (<span class=\"number\">20</span>,)  <span class=\"comment\"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure>\n<p>string、list和tuple都属于sequence（序列）。</p>\n<h2 id=\"集合-Set\"><a href=\"#集合-Set\" class=\"headerlink\" title=\"集合(Set)\"></a>集合(Set)</h2><p>集合是一个无序不重复元素的序列，其基本功能是进行成员关系测试和删除重复元素。<br>可以使用大括号 { } 或者 set() 函数创建集合。<br>但是创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = set(<span class=\"string\">'abracadabra'</span>) </span><br><span class=\"line\">b = set(<span class=\"string\">'alacazam'</span>) </span><br><span class=\"line\">print(a) </span><br><span class=\"line\">print(a - b)  <span class=\"comment\"># a和b的差集  </span></span><br><span class=\"line\">print(a | b)  <span class=\"comment\"># a和b的并集  </span></span><br><span class=\"line\">print(a &amp; b)  <span class=\"comment\"># a和b的交集  </span></span><br><span class=\"line\">print(a ^ b)  <span class=\"comment\"># a和b中不同时存在的元素</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字典-Dictionary\"><a href=\"#字典-Dictionary\" class=\"headerlink\" title=\"字典(Dictionary)\"></a>字典(Dictionary)</h2><p>字典当中的元素是通过键来存取的，而不是通过偏移存取，这是字典与序列不同的地方。</p>\n<p>字典是一种映射类型，字典用”{ }”标识，它是一个无序的键(key) : 值(value)对集合。<br>键(key)必须使用不可变类型，在同一个字典中，键(key)必须是唯一的。<br>字典可以通过中括号中加key的方法来获得value，也可以调用.keys() 或 .value() 方法来获得其中的所有键与值。</p>\n<h2 id=\"空值-None\"><a href=\"#空值-None\" class=\"headerlink\" title=\"空值(None)\"></a>空值(None)</h2><p>空值是一个特殊的值，用None表示，空值不能代表0，0也不能代表空值。</p>\n<h1 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h1><h2 id=\"del-var\"><a href=\"#del-var\" class=\"headerlink\" title=\"del var\"></a>del var</h2><p>删除一些对象的引用，你可以使用del删除一个或多个的对象引用，如果要多个，用逗号隔开。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">del</span> var1,var2,var3</span><br></pre></td></tr></table></figure>\n<h2 id=\"int-x-base\"><a href=\"#int-x-base\" class=\"headerlink\" title=\"int(x[,base])\"></a>int(x[,base])</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = int(<span class=\"number\">10.9</span>) <span class=\"comment\"># 将x转换为int型变量，向0取整</span></span><br><span class=\"line\">status = int(<span class=\"string\">'10'</span>,<span class=\"number\">2</span>) <span class=\"comment\"># 构造2进制下的10，即十进制下的2，注意'10'是字符串</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"float-x\"><a href=\"#float-x\" class=\"headerlink\" title=\"float(x)\"></a>float(x)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weight = float(<span class=\"number\">50</span>) <span class=\"comment\"># 将x转换float型变量</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"complex-real-imag\"><a href=\"#complex-real-imag\" class=\"headerlink\" title=\"complex(real[,imag])\"></a>complex(real[,imag])</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = complex(<span class=\"number\">1</span>) <span class=\"comment\"># 构造复数 1 + 0j</span></span><br><span class=\"line\">b = complex(<span class=\"number\">-1</span>,<span class=\"number\">5</span>) <span class=\"comment\"># 构造复数 -1 ＋５ｊ</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"str-x\"><a href=\"#str-x\" class=\"headerlink\" title=\"str(x)\"></a>str(x)</h2><p>将x转换为字符串。</p>\n<h2 id=\"repr-x\"><a href=\"#repr-x\" class=\"headerlink\" title=\"repr(x)\"></a>repr(x)</h2><p>将对象转化为供解释器读取的形式，返回一个字符串。</p>\n<h2 id=\"eval-expression-globals-locals\"><a href=\"#eval-expression-globals-locals\" class=\"headerlink\" title=\"eval(expression[, globals[, locals]])\"></a>eval(expression[, globals[, locals]])</h2><p>执行一个字符串表达式，并返回表达式的值。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expression</td>\n<td>表达式</td>\n</tr>\n<tr>\n<td>globals</td>\n<td>变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</td>\n</tr>\n<tr>\n<td>locals</td>\n<td>变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(<span class=\"string\">'2 + 2'</span>) <span class=\"comment\"># 返回一个值为4的int类型</span></span><br><span class=\"line\">n = <span class=\"number\">4</span></span><br><span class=\"line\">eval(<span class=\"string\">'n ** 2'</span>) <span class=\"comment\"># 返回一个值为16的int类型</span></span><br><span class=\"line\">eval(<span class=\"string\">'\"hello,\" + str(0)'</span>) <span class=\"comment\"># 返回一个值为'hello,0'的string类型</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"tuple-s\"><a href=\"#tuple-s\" class=\"headerlink\" title=\"tuple(s)\"></a>tuple(s)</h2><p>将s转换为元组。</p>\n<h2 id=\"list-s\"><a href=\"#list-s\" class=\"headerlink\" title=\"list(s)\"></a>list(s)</h2><p>将s转换为列表。</p>\n<h2 id=\"dict-d\"><a href=\"#dict-d\" class=\"headerlink\" title=\"dict(d)\"></a>dict(d)</h2><p>将d转换为字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sex = dict(boy=<span class=\"string\">'1'</span>,girl=<span class=\"string\">'0'</span>) <span class=\"comment\">#传入关键字</span></span><br><span class=\"line\">week = dict([(<span class=\"string\">'Mon'</span>, <span class=\"number\">0</span>), (<span class=\"string\">'Tues'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'Wed'</span>, <span class=\"number\">2</span>), </span><br><span class=\"line\">             (<span class=\"string\">'Thur'</span>, <span class=\"number\">3</span>), (<span class=\"string\">'Fri'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'Sat'</span>, <span class=\"number\">5</span>), (<span class=\"string\">'Sun'</span>, <span class=\"number\">6</span>)]) </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#可迭代对象方式来构造字典</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"frozenset-iterable\"><a href=\"#frozenset-iterable\" class=\"headerlink\" title=\"frozenset([iterable])\"></a>frozenset([iterable])</h2><p>将iterable转换为冻结的集合，冻结后集合不能再添加或删除任何元素。<br>iterable为可迭代的对象，比如列表、字典、元组等等。<br>注意，冻结的集合中任意一个元素不能是列表，但是可以直接冻结列表(这里应该看作均为不可变的元素)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup = (<span class=\"number\">3</span>, <span class=\"number\">5.0</span>, <span class=\"string\">\"test\"</span>, (<span class=\"number\">2</span>, <span class=\"number\">2</span>), ([<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">3</span>])) </span><br><span class=\"line\">\t<span class=\"comment\">#元素分别为int、float、string、tuple、带有list的tuple</span></span><br><span class=\"line\">list = [<span class=\"number\">321</span>,<span class=\"string\">\"test\"</span>,((<span class=\"number\">2</span>,<span class=\"number\">2</span>),(<span class=\"number\">3</span>,<span class=\"number\">3</span>))] </span><br><span class=\"line\">\t<span class=\"comment\">#元素分别为int、string、带有tuple的tuple</span></span><br><span class=\"line\">frozenset(tup) </span><br><span class=\"line\">\t<span class=\"comment\"># 非法操作，冻结的集合中含有带list的元素</span></span><br><span class=\"line\">frozenset(list) </span><br><span class=\"line\">\t<span class=\"comment\"># 合法操作，冻结的中不含有带list的元素</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"chr-x-ord-c\"><a href=\"#chr-x-ord-c\" class=\"headerlink\" title=\"chr(x) ord(c)\"></a>chr(x) ord(c)</h2><p>chr(x) 将整数x以ASCII码表转换成字符。<br>ord(c) 将字符c以ASCII码表转换成整数。</p>\n<h2 id=\"hex-x-oct-x\"><a href=\"#hex-x-oct-x\" class=\"headerlink\" title=\"hex(x) oct(x)\"></a>hex(x) oct(x)</h2><p>hex(x) 将整数x转换成16进制，以字符串的格式返回。<br>oct(x) 将整数x转换成8进制，以字符串的格式返回。</p>\n<h2 id=\"id-x\"><a href=\"#id-x\" class=\"headerlink\" title=\"id(x)\"></a>id(x)</h2><p>返回变量x的内存地址。</p>\n<h2 id=\"type-var\"><a href=\"#type-var\" class=\"headerlink\" title=\"type(var)\"></a>type(var)</h2><p>查询变量所指的对象类型。</p>\n<h2 id=\"isinstance-var-type\"><a href=\"#isinstance-var-type\" class=\"headerlink\" title=\"isinstance(var, type)\"></a>isinstance(var, type)</h2><p>判定查询变量所指的对象类型是不是type，若是则返回True，否则返回False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> isinstance(n, int) :</span><br><span class=\"line\">   print(<span class=\"string\">\"n's type is int)</span></span><br></pre></td></tr></table></figure>\n<p>type()与isinstance()的区别在面向对象时可以区分出来。<br>若有A类，且B类继承了A类。<br>则，type()认为A与B是两种不同的数据类型。<br>而，isinstance()认为B类的对象也是一种A类的对象，他们同属于一种数据类型。</p>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python3/python3-data-type.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-data-type.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"变量简述\"><a href=\"#变量简述\" class=\"headerlink\" title=\"变量简述\"></a>变量简述</h1><p>Python 中的变量赋值不需要类型声明。<br>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。<br>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。<br>等号（=）用来给变量赋值。<br>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer = <span class=\"number\">42</span> <span class=\"comment\">#之前看到过的简单的变量赋值</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"标准数据类型\"><a href=\"#标准数据类型\" class=\"headerlink\" title=\"标准数据类型\"></a>标准数据类型</h1><h2 id=\"数字-Number\"><a href=\"#数字-Number\" class=\"headerlink\" title=\"数字(Number)\"></a>数字(Number)</h2><h3 id=\"长整型-int\"><a href=\"#长整型-int\" class=\"headerlink\" title=\"长整型(int)\"></a>长整型(int)</h3><p>在Python3中，只有一种int代表长整型，可以参照上述进行赋值和计算。在超过类似 C/C++ 中的 int 变量时，自动的转换成一个精度无限的long类型。同时，python提供16进制0x写法，和8进制的0o写法。</p>\n<h3 id=\"浮点数-float\"><a href=\"#浮点数-float\" class=\"headerlink\" title=\"浮点数(float)\"></a>浮点数(float)</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以使用平时的小数写法，也支持科学计数写法。</p>\n<h3 id=\"布尔值-bool\"><a href=\"#布尔值-bool\" class=\"headerlink\" title=\"布尔值(bool)\"></a>布尔值(bool)</h3><p>布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，注意其大小写。<br>布尔值可以参与数字的运算，此时True代表1，False代表0。</p>\n<p>布尔值可以用and、or和not运算，分别对于与，或，非。</p>\n<h3 id=\"复数-complex\"><a href=\"#复数-complex\" class=\"headerlink\" title=\"复数(complex)\"></a>复数(complex)</h3><p>复数的赋值可以使用两种方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"number\">3</span> + <span class=\"number\">1j</span></span><br><span class=\"line\">d = complex(<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值计算\"><a href=\"#数值计算\" class=\"headerlink\" title=\"数值计算\"></a>数值计算</h3><p>python 支持 加法、减法、乘法、除法、地板除法、取余、乘方的数值计算。在混合计算时，Python会隐式的把整型转换成为浮点数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span>/<span class=\"number\">2</span> <span class=\"comment\">#除法 返回一个浮点数 2.5</span></span><br><span class=\"line\"><span class=\"number\">5</span>//<span class=\"number\">2</span> <span class=\"comment\">#地板除法 返回一个整数 2，向0取整</span></span><br><span class=\"line\"><span class=\"number\">5</span>%<span class=\"number\">2</span> <span class=\"comment\">#取余 返回一个整数/浮点数，取决于两个操作数是否有浮点数</span></span><br><span class=\"line\"><span class=\"number\">2</span>**<span class=\"number\">5</span> <span class=\"comment\">#乘方</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串-String\"><a href=\"#字符串-String\" class=\"headerlink\" title=\"字符串(String)\"></a>字符串(String)</h2><p>字符串是以单引号\\’或双引号\\”括起来的任意文本，比如\\’abc\\’，\\”xyz\\”等等。请注意，\\’\\’或\\”\\”本身只是一种表示方式，不是字符串的一部分，因此，字符串\\’abc\\’只有a，b，c这3个字符。<br>字符串可以用截取的语法，格式为：变量[头下标:尾下标]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(str[<span class=\"number\">0</span>:<span class=\"number\">-1</span>])  <span class=\"comment\"># 输出第一个到倒数第二个的所有字符  </span></span><br><span class=\"line\">print(str[<span class=\"number\">0</span>])  <span class=\"comment\"># 输出字符串第一个字符  </span></span><br><span class=\"line\">print(str[<span class=\"number\">2</span>:<span class=\"number\">5</span>])  <span class=\"comment\"># 输出从第三个开始到第五个的字符  </span></span><br><span class=\"line\">print(str[<span class=\"number\">2</span>:])  <span class=\"comment\"># 输出从第三个开始的后的所有字符  </span></span><br><span class=\"line\">print(str * <span class=\"number\">2</span>)  <span class=\"comment\"># 输出字符串两次  </span></span><br><span class=\"line\">print(str + <span class=\"string\">\"TEST\"</span>)  <span class=\"comment\"># 连接字符串</span></span><br></pre></td></tr></table></figure>\n<p>注意，python里面的字符串(甚至包括其他引用类型)，是以值比较相等的，而不是像java等语言比较内存地址。故两个内存地址不同，但内容相同的字符串做相等判定，答案是True。</p>\n<h2 id=\"列表-List\"><a href=\"#列表-List\" class=\"headerlink\" title=\"列表(List)\"></a>列表(List)</h2><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。<br>列表是写在方括号之间、用逗号分隔开的元素列表，列表中的元素是可以改变的。<br>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>\n<h2 id=\"元组-Tuple\"><a href=\"#元组-Tuple\" class=\"headerlink\" title=\"元组(Tuple)\"></a>元组(Tuple)</h2><p>元组与列表类似，不同之处在于元组的元素不能修改。元组写在小括号里，元素之间用逗号隔开。<br>tuple的元素不可改变，但它可以包含可变的对象，比如list列表。<br>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = ()  <span class=\"comment\"># 空元组</span></span><br><span class=\"line\">tup2 = (<span class=\"number\">20</span>,)  <span class=\"comment\"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure>\n<p>string、list和tuple都属于sequence（序列）。</p>\n<h2 id=\"集合-Set\"><a href=\"#集合-Set\" class=\"headerlink\" title=\"集合(Set)\"></a>集合(Set)</h2><p>集合是一个无序不重复元素的序列，其基本功能是进行成员关系测试和删除重复元素。<br>可以使用大括号 { } 或者 set() 函数创建集合。<br>但是创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = set(<span class=\"string\">'abracadabra'</span>) </span><br><span class=\"line\">b = set(<span class=\"string\">'alacazam'</span>) </span><br><span class=\"line\">print(a) </span><br><span class=\"line\">print(a - b)  <span class=\"comment\"># a和b的差集  </span></span><br><span class=\"line\">print(a | b)  <span class=\"comment\"># a和b的并集  </span></span><br><span class=\"line\">print(a &amp; b)  <span class=\"comment\"># a和b的交集  </span></span><br><span class=\"line\">print(a ^ b)  <span class=\"comment\"># a和b中不同时存在的元素</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字典-Dictionary\"><a href=\"#字典-Dictionary\" class=\"headerlink\" title=\"字典(Dictionary)\"></a>字典(Dictionary)</h2><p>字典当中的元素是通过键来存取的，而不是通过偏移存取，这是字典与序列不同的地方。</p>\n<p>字典是一种映射类型，字典用”{ }”标识，它是一个无序的键(key) : 值(value)对集合。<br>键(key)必须使用不可变类型，在同一个字典中，键(key)必须是唯一的。<br>字典可以通过中括号中加key的方法来获得value，也可以调用.keys() 或 .value() 方法来获得其中的所有键与值。</p>\n<h2 id=\"空值-None\"><a href=\"#空值-None\" class=\"headerlink\" title=\"空值(None)\"></a>空值(None)</h2><p>空值是一个特殊的值，用None表示，空值不能代表0，0也不能代表空值。</p>\n<h1 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h1><h2 id=\"del-var\"><a href=\"#del-var\" class=\"headerlink\" title=\"del var\"></a>del var</h2><p>删除一些对象的引用，你可以使用del删除一个或多个的对象引用，如果要多个，用逗号隔开。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">del</span> var1,var2,var3</span><br></pre></td></tr></table></figure>\n<h2 id=\"int-x-base\"><a href=\"#int-x-base\" class=\"headerlink\" title=\"int(x[,base])\"></a>int(x[,base])</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = int(<span class=\"number\">10.9</span>) <span class=\"comment\"># 将x转换为int型变量，向0取整</span></span><br><span class=\"line\">status = int(<span class=\"string\">'10'</span>,<span class=\"number\">2</span>) <span class=\"comment\"># 构造2进制下的10，即十进制下的2，注意'10'是字符串</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"float-x\"><a href=\"#float-x\" class=\"headerlink\" title=\"float(x)\"></a>float(x)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weight = float(<span class=\"number\">50</span>) <span class=\"comment\"># 将x转换float型变量</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"complex-real-imag\"><a href=\"#complex-real-imag\" class=\"headerlink\" title=\"complex(real[,imag])\"></a>complex(real[,imag])</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = complex(<span class=\"number\">1</span>) <span class=\"comment\"># 构造复数 1 + 0j</span></span><br><span class=\"line\">b = complex(<span class=\"number\">-1</span>,<span class=\"number\">5</span>) <span class=\"comment\"># 构造复数 -1 ＋５ｊ</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"str-x\"><a href=\"#str-x\" class=\"headerlink\" title=\"str(x)\"></a>str(x)</h2><p>将x转换为字符串。</p>\n<h2 id=\"repr-x\"><a href=\"#repr-x\" class=\"headerlink\" title=\"repr(x)\"></a>repr(x)</h2><p>将对象转化为供解释器读取的形式，返回一个字符串。</p>\n<h2 id=\"eval-expression-globals-locals\"><a href=\"#eval-expression-globals-locals\" class=\"headerlink\" title=\"eval(expression[, globals[, locals]])\"></a>eval(expression[, globals[, locals]])</h2><p>执行一个字符串表达式，并返回表达式的值。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expression</td>\n<td>表达式</td>\n</tr>\n<tr>\n<td>globals</td>\n<td>变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</td>\n</tr>\n<tr>\n<td>locals</td>\n<td>变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(<span class=\"string\">'2 + 2'</span>) <span class=\"comment\"># 返回一个值为4的int类型</span></span><br><span class=\"line\">n = <span class=\"number\">4</span></span><br><span class=\"line\">eval(<span class=\"string\">'n ** 2'</span>) <span class=\"comment\"># 返回一个值为16的int类型</span></span><br><span class=\"line\">eval(<span class=\"string\">'\"hello,\" + str(0)'</span>) <span class=\"comment\"># 返回一个值为'hello,0'的string类型</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"tuple-s\"><a href=\"#tuple-s\" class=\"headerlink\" title=\"tuple(s)\"></a>tuple(s)</h2><p>将s转换为元组。</p>\n<h2 id=\"list-s\"><a href=\"#list-s\" class=\"headerlink\" title=\"list(s)\"></a>list(s)</h2><p>将s转换为列表。</p>\n<h2 id=\"dict-d\"><a href=\"#dict-d\" class=\"headerlink\" title=\"dict(d)\"></a>dict(d)</h2><p>将d转换为字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sex = dict(boy=<span class=\"string\">'1'</span>,girl=<span class=\"string\">'0'</span>) <span class=\"comment\">#传入关键字</span></span><br><span class=\"line\">week = dict([(<span class=\"string\">'Mon'</span>, <span class=\"number\">0</span>), (<span class=\"string\">'Tues'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'Wed'</span>, <span class=\"number\">2</span>), </span><br><span class=\"line\">             (<span class=\"string\">'Thur'</span>, <span class=\"number\">3</span>), (<span class=\"string\">'Fri'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'Sat'</span>, <span class=\"number\">5</span>), (<span class=\"string\">'Sun'</span>, <span class=\"number\">6</span>)]) </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#可迭代对象方式来构造字典</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"frozenset-iterable\"><a href=\"#frozenset-iterable\" class=\"headerlink\" title=\"frozenset([iterable])\"></a>frozenset([iterable])</h2><p>将iterable转换为冻结的集合，冻结后集合不能再添加或删除任何元素。<br>iterable为可迭代的对象，比如列表、字典、元组等等。<br>注意，冻结的集合中任意一个元素不能是列表，但是可以直接冻结列表(这里应该看作均为不可变的元素)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup = (<span class=\"number\">3</span>, <span class=\"number\">5.0</span>, <span class=\"string\">\"test\"</span>, (<span class=\"number\">2</span>, <span class=\"number\">2</span>), ([<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">3</span>,<span class=\"number\">3</span>])) </span><br><span class=\"line\">\t<span class=\"comment\">#元素分别为int、float、string、tuple、带有list的tuple</span></span><br><span class=\"line\">list = [<span class=\"number\">321</span>,<span class=\"string\">\"test\"</span>,((<span class=\"number\">2</span>,<span class=\"number\">2</span>),(<span class=\"number\">3</span>,<span class=\"number\">3</span>))] </span><br><span class=\"line\">\t<span class=\"comment\">#元素分别为int、string、带有tuple的tuple</span></span><br><span class=\"line\">frozenset(tup) </span><br><span class=\"line\">\t<span class=\"comment\"># 非法操作，冻结的集合中含有带list的元素</span></span><br><span class=\"line\">frozenset(list) </span><br><span class=\"line\">\t<span class=\"comment\"># 合法操作，冻结的中不含有带list的元素</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"chr-x-ord-c\"><a href=\"#chr-x-ord-c\" class=\"headerlink\" title=\"chr(x) ord(c)\"></a>chr(x) ord(c)</h2><p>chr(x) 将整数x以ASCII码表转换成字符。<br>ord(c) 将字符c以ASCII码表转换成整数。</p>\n<h2 id=\"hex-x-oct-x\"><a href=\"#hex-x-oct-x\" class=\"headerlink\" title=\"hex(x) oct(x)\"></a>hex(x) oct(x)</h2><p>hex(x) 将整数x转换成16进制，以字符串的格式返回。<br>oct(x) 将整数x转换成8进制，以字符串的格式返回。</p>\n<h2 id=\"id-x\"><a href=\"#id-x\" class=\"headerlink\" title=\"id(x)\"></a>id(x)</h2><p>返回变量x的内存地址。</p>\n<h2 id=\"type-var\"><a href=\"#type-var\" class=\"headerlink\" title=\"type(var)\"></a>type(var)</h2><p>查询变量所指的对象类型。</p>\n<h2 id=\"isinstance-var-type\"><a href=\"#isinstance-var-type\" class=\"headerlink\" title=\"isinstance(var, type)\"></a>isinstance(var, type)</h2><p>判定查询变量所指的对象类型是不是type，若是则返回True，否则返回False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> isinstance(n, int) :</span><br><span class=\"line\">   print(<span class=\"string\">\"n's type is int)</span></span><br></pre></td></tr></table></figure>\n<p>type()与isinstance()的区别在面向对象时可以区分出来。<br>若有A类，且B类继承了A类。<br>则，type()认为A与B是两种不同的数据类型。<br>而，isinstance()认为B类的对象也是一种A类的对象，他们同属于一种数据类型。</p>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python3/python3-data-type.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-data-type.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000</a></li>\n</ol>\n"},{"title":"Python3 学习之路(4) 字符串","date":"2018-06-10T08:19:34.000Z","toc":true,"thumbnail":"/images/python/Python-thumbnail.png","banner":"/images/python/Python-banner.png","_content":"\n# 字符串\n\n在Python3中，字符串在内存中的存储格式均是Unicode。且其实不存在单个字符，单个字符也被视为字符串。\n\n## 编码与解码\n\n对于许多编程语言来说，字符串的各类编码是一个很让人难以处理的问题，在Python中，用了很好的封装方式，字符串的编码与解码不再是令人头疼的问题。\n\n### encode() \n\npython使用encode()方法来进行字符串的编码。这个方法将一个字符串编码成指定编码格式，返回值是bytes类型。\n\n```python\nbytes_string = '中文'.encode('utf-8')\n```\n如果你对含有超出ASCII编码外的字符（比如说，中文）的字符串编码为ASCII，则Python会报错，解决方法是告知Python如何进行处理。\n\n```python\nbytes_string = '中文CN'.encode('ascii',errors='ignore')\n```\n这里我将encode()中errors参数的值设置为'ignore'，即对错误的字节进行忽略，返回值为ASCII编码的bytes，意为CN。\n\n### decode()\n\npython使用decode()方法来进行字符串的编码。这个方法将一个bytes根据指定编码格式进行解码，返回值是一个字符串。\n\n```python\nstring = b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')\n```\n如果进行上面的encode()实验，很容易知道这里的__b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'__是UTF-8编码格式下的'中文'，这里相当于上面的逆过程。\n\n同样的，如果bytes里有含有超出指定编码外的字符，Python也会报错，解决方法也是同样告知如何进行处理。\n\n## 转义字符表\n\n| 转义字符 | 描述 |\n| :--: | :--: |\n| \\(在行尾时) | 续行符 |\n| \\\\ | 反斜杠符号 |\n| \\\\\\' | 单引号 |\n| \\\\\\\" | 双引号 |\n| \\\\a | 响铃 |\n| \\\\b | 退格(Backspace) |\n| \\\\e | 转义 |\n| \\\\000 | 空 |\n| \\\\n | 换行 |\n| \\\\v | 纵向制表符 |\n| \\\\t | 横向制表符 |\n| \\\\r | 回车 |\n| \\\\f | 换页 |\n| \\\\oyy | 八进制数，yy代表的字符，例如：\\o12代表换行 |\n| \\\\xyy | 十六进制数，yy代表的字符，例如：\\x0a代表换行 |\n| \\\\other | 其它的字符以普通格式输出 |\n\n## 字符串运算符\n\n下表实例变量a值为字符串 \"Hello\"，b变量值为 \"Python\"：\n\n| 操作符 | 描述 | 实例 |\n|:--:|:--:|:--:|\n| + | 字符串连接 | a + b 输出结果： HelloPython |\n| * | 重复输出字符串 | a*2 输出结果：HelloHello |\n| [] | 通过索引获取字符串中字符 | a[1] 输出结果 **e** |\n| [ : ] | 截取字符串中的一部分 | a[1:4] 输出结果 **ell** |\n| in | 成员运算符 - 如果字符串中包含给定的字符返回 True | **'H' in a** 输出结果 True |\n| not in | 成员运算符 - 如果字符串中不包含给定的字符返回 True | **'M' not in a** 输出结果 True |\n\n\n## 格式化字符串\n\nPython支持格式化字符串的输出，语法与C语言的printf()函数基本相同。\n\npython字符串格式化符号:\n\n| 符号 | 描述 |\n|:--:|:--:|\n| %c | 格式化字符及其ASCII码 |\n| %s | 格式化字符串 |\n| %d | 格式化整数 |\n| %u | 格式化无符号整型 |\n| %o | 格式化无符号八进制数 |\n| %x | 格式化无符号十六进制数 |\n| %X | 格式化无符号十六进制数（大写） |\n| %f | 格式化浮点数字，可指定小数点后的精度 |\n| %e | 用科学计数法格式化浮点数 |\n| %E | 作用同%e，用科学计数法格式化浮点数 |\n| %g | %f和%e的简写 |\n| %G | %f 和 %E 的简写 |\n| %p | 用十六进制数格式化变量的地址 |\n\n格式化操作符辅助指令:\n\n| 符号 | 功能 |\n|:--:|:--:|\n| * | 定义宽度或者小数点精度 |\n| - | 用做左对齐 |\n| + | 在正数前面显示加号( + ) |\n| # | 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') |\n| 0 | 显示的数字前面填充'0'而不是默认的空格 |\n| % | '%%'输出一个单一的'%' |\n| m.n | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |\n\n样例如下：\n\n```python\nprint('%c' % 'a') #输出一个字符，如果不是字符会报错 \nprint('%x' % 16) #16进制下的16，没有前缀表明进制 \nprint('%04d' % 20) #输出占位4格的数字，未满4位前补0 \nprint('%+-4d' % 20) #左对齐的，在正数前面补'+'号的占位4格的数字 \nprint('%10.6f' % 12.98765) #占位10格(包括'.')，小数点后至少6位的数字\n```\n### format\n\nPython2.6开始支持使用format()函数来格式化字符串。\n\n```python\nprint('{0:4d}-{1:02d}-{2:d}'.format(1926,8,17)) #输出 1926-08-17\n```\n\n\n## 字符串内建函数\n\n### capitalize()\n\n将字符串的第一个字符转换为大写\n\n```python\nstr1 = 'hello world' \nprint(str1.capitalize()) # 返回 Hello world\nstr2 = '123hello world' \nprint(str2.capitalize()) # 返回 123hello world\n```\n\n### center(width, fillchar)\n\n返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格。\n\n### count(str, beg= 0,end=len(string))\n\n返回 str 在字符串里面出现的次数，如果beg或者end指定则返回指定范围内str出现的次数。\n\n```python\nstr = 'where which why who when' \nprint(str.count('wh')) #返回5\n```\n### startswith/endswith(suffix, beg=0, end=len(string))\n\n检查字符串是否以suffix开始/结束，如果beg或者end指定则检查指定的范围内是否以suffix开始/结束，如果是，返回True，否则返回False。\n\n### expandtabs(tabsize=8)\n\n把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。\n\n### find(str, beg=0 end=len(string))\n\n检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1。\n\n### index(str, beg=0, end=len(string))\n\n跟find()方法一样，只不过如果str不在字符串中会报一个异常。\n\n### isalnum()\n\n如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False。\n\n### isalpha()\n\n如果字符串至少有一个字符并且所有字符都是字母则返回True，否则返回False。\n\n### isdigit() isdecimal() isnumeric()\n\n如果字符串只包含数字则返回True，否则返回False。\n\n这三个在细节上有很多不同的地方，具体请参照引用3的博文，这里只给出结论。\n\n- isdigit()\nTrue: Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字（英文）\nFalse: 汉字数字、罗马数字\nError: 无\n- isdecimal()\nTrue: Unicode数字，全角数字（双字节）\nFalse: 罗马数字（英文），汉字数字，罗马数字\nError: byte数字（单字节）\n- isnumeric()\nTrue: Unicode数字，全角数字（双字节），罗马数字（英文），汉字数字、罗马数字\nFalse: 无\nError: byte数字（单字节）\n\n### isspace()\n\n如果字符串中只包含空白，则返回True，否则返回False。\n\n### join(seq)\n\n以指定字符串作为分隔符，传入的参数，迭代器seq中的所有变量的字符串表示合并为一个字符串返回。\n\n```python\nseq = '-' \nprint(seq.join( ('A','B','C') )) #返回A-B-C\n```\n### len(string)\n\n返回字符串长度。\n\n### ljust(width[, fillchar])\n\n返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格。\n\n### lower()\n\n转换字符串中所有大写字符为小写。\n\n### replace(old, new [, max])\n\n把将目标字符串中的old子串替换成new子串,如果max指定，则替换不超过max次。\n\n### split(str=\" \", num=string.count(str))\n\nnum=string.count(str)) 以str为分隔符截取字符串，如果num有指定值，则仅截取num个子字符串。\n这个的默认.split()意即按空格截取字符串。\n\n### splitlines(keepends=False)\n\n返回字符串的行数，按照换行符切割目标字符串。\n如果没设定keepends=True，则会将换行符从返回的字符串组中移除。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python3/python3-string.html\n2. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000\n3. https://www.cnblogs.com/jebeljebel/p/4006433.html\n\n","source":"_posts/python/grammar-4.md","raw":"---\ntitle: Python3 学习之路(4) 字符串\ndate: 2018-6-10 16:19:34\ncategories: Python\ntags: \n    - Python\ntoc: true\nthumbnail: /images/python/Python-thumbnail.png\nbanner: /images/python/Python-banner.png\n---\n\n# 字符串\n\n在Python3中，字符串在内存中的存储格式均是Unicode。且其实不存在单个字符，单个字符也被视为字符串。\n\n## 编码与解码\n\n对于许多编程语言来说，字符串的各类编码是一个很让人难以处理的问题，在Python中，用了很好的封装方式，字符串的编码与解码不再是令人头疼的问题。\n\n### encode() \n\npython使用encode()方法来进行字符串的编码。这个方法将一个字符串编码成指定编码格式，返回值是bytes类型。\n\n```python\nbytes_string = '中文'.encode('utf-8')\n```\n如果你对含有超出ASCII编码外的字符（比如说，中文）的字符串编码为ASCII，则Python会报错，解决方法是告知Python如何进行处理。\n\n```python\nbytes_string = '中文CN'.encode('ascii',errors='ignore')\n```\n这里我将encode()中errors参数的值设置为'ignore'，即对错误的字节进行忽略，返回值为ASCII编码的bytes，意为CN。\n\n### decode()\n\npython使用decode()方法来进行字符串的编码。这个方法将一个bytes根据指定编码格式进行解码，返回值是一个字符串。\n\n```python\nstring = b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')\n```\n如果进行上面的encode()实验，很容易知道这里的__b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'__是UTF-8编码格式下的'中文'，这里相当于上面的逆过程。\n\n同样的，如果bytes里有含有超出指定编码外的字符，Python也会报错，解决方法也是同样告知如何进行处理。\n\n## 转义字符表\n\n| 转义字符 | 描述 |\n| :--: | :--: |\n| \\(在行尾时) | 续行符 |\n| \\\\ | 反斜杠符号 |\n| \\\\\\' | 单引号 |\n| \\\\\\\" | 双引号 |\n| \\\\a | 响铃 |\n| \\\\b | 退格(Backspace) |\n| \\\\e | 转义 |\n| \\\\000 | 空 |\n| \\\\n | 换行 |\n| \\\\v | 纵向制表符 |\n| \\\\t | 横向制表符 |\n| \\\\r | 回车 |\n| \\\\f | 换页 |\n| \\\\oyy | 八进制数，yy代表的字符，例如：\\o12代表换行 |\n| \\\\xyy | 十六进制数，yy代表的字符，例如：\\x0a代表换行 |\n| \\\\other | 其它的字符以普通格式输出 |\n\n## 字符串运算符\n\n下表实例变量a值为字符串 \"Hello\"，b变量值为 \"Python\"：\n\n| 操作符 | 描述 | 实例 |\n|:--:|:--:|:--:|\n| + | 字符串连接 | a + b 输出结果： HelloPython |\n| * | 重复输出字符串 | a*2 输出结果：HelloHello |\n| [] | 通过索引获取字符串中字符 | a[1] 输出结果 **e** |\n| [ : ] | 截取字符串中的一部分 | a[1:4] 输出结果 **ell** |\n| in | 成员运算符 - 如果字符串中包含给定的字符返回 True | **'H' in a** 输出结果 True |\n| not in | 成员运算符 - 如果字符串中不包含给定的字符返回 True | **'M' not in a** 输出结果 True |\n\n\n## 格式化字符串\n\nPython支持格式化字符串的输出，语法与C语言的printf()函数基本相同。\n\npython字符串格式化符号:\n\n| 符号 | 描述 |\n|:--:|:--:|\n| %c | 格式化字符及其ASCII码 |\n| %s | 格式化字符串 |\n| %d | 格式化整数 |\n| %u | 格式化无符号整型 |\n| %o | 格式化无符号八进制数 |\n| %x | 格式化无符号十六进制数 |\n| %X | 格式化无符号十六进制数（大写） |\n| %f | 格式化浮点数字，可指定小数点后的精度 |\n| %e | 用科学计数法格式化浮点数 |\n| %E | 作用同%e，用科学计数法格式化浮点数 |\n| %g | %f和%e的简写 |\n| %G | %f 和 %E 的简写 |\n| %p | 用十六进制数格式化变量的地址 |\n\n格式化操作符辅助指令:\n\n| 符号 | 功能 |\n|:--:|:--:|\n| * | 定义宽度或者小数点精度 |\n| - | 用做左对齐 |\n| + | 在正数前面显示加号( + ) |\n| # | 在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X') |\n| 0 | 显示的数字前面填充'0'而不是默认的空格 |\n| % | '%%'输出一个单一的'%' |\n| m.n | m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) |\n\n样例如下：\n\n```python\nprint('%c' % 'a') #输出一个字符，如果不是字符会报错 \nprint('%x' % 16) #16进制下的16，没有前缀表明进制 \nprint('%04d' % 20) #输出占位4格的数字，未满4位前补0 \nprint('%+-4d' % 20) #左对齐的，在正数前面补'+'号的占位4格的数字 \nprint('%10.6f' % 12.98765) #占位10格(包括'.')，小数点后至少6位的数字\n```\n### format\n\nPython2.6开始支持使用format()函数来格式化字符串。\n\n```python\nprint('{0:4d}-{1:02d}-{2:d}'.format(1926,8,17)) #输出 1926-08-17\n```\n\n\n## 字符串内建函数\n\n### capitalize()\n\n将字符串的第一个字符转换为大写\n\n```python\nstr1 = 'hello world' \nprint(str1.capitalize()) # 返回 Hello world\nstr2 = '123hello world' \nprint(str2.capitalize()) # 返回 123hello world\n```\n\n### center(width, fillchar)\n\n返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格。\n\n### count(str, beg= 0,end=len(string))\n\n返回 str 在字符串里面出现的次数，如果beg或者end指定则返回指定范围内str出现的次数。\n\n```python\nstr = 'where which why who when' \nprint(str.count('wh')) #返回5\n```\n### startswith/endswith(suffix, beg=0, end=len(string))\n\n检查字符串是否以suffix开始/结束，如果beg或者end指定则检查指定的范围内是否以suffix开始/结束，如果是，返回True，否则返回False。\n\n### expandtabs(tabsize=8)\n\n把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。\n\n### find(str, beg=0 end=len(string))\n\n检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1。\n\n### index(str, beg=0, end=len(string))\n\n跟find()方法一样，只不过如果str不在字符串中会报一个异常。\n\n### isalnum()\n\n如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False。\n\n### isalpha()\n\n如果字符串至少有一个字符并且所有字符都是字母则返回True，否则返回False。\n\n### isdigit() isdecimal() isnumeric()\n\n如果字符串只包含数字则返回True，否则返回False。\n\n这三个在细节上有很多不同的地方，具体请参照引用3的博文，这里只给出结论。\n\n- isdigit()\nTrue: Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字（英文）\nFalse: 汉字数字、罗马数字\nError: 无\n- isdecimal()\nTrue: Unicode数字，全角数字（双字节）\nFalse: 罗马数字（英文），汉字数字，罗马数字\nError: byte数字（单字节）\n- isnumeric()\nTrue: Unicode数字，全角数字（双字节），罗马数字（英文），汉字数字、罗马数字\nFalse: 无\nError: byte数字（单字节）\n\n### isspace()\n\n如果字符串中只包含空白，则返回True，否则返回False。\n\n### join(seq)\n\n以指定字符串作为分隔符，传入的参数，迭代器seq中的所有变量的字符串表示合并为一个字符串返回。\n\n```python\nseq = '-' \nprint(seq.join( ('A','B','C') )) #返回A-B-C\n```\n### len(string)\n\n返回字符串长度。\n\n### ljust(width[, fillchar])\n\n返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格。\n\n### lower()\n\n转换字符串中所有大写字符为小写。\n\n### replace(old, new [, max])\n\n把将目标字符串中的old子串替换成new子串,如果max指定，则替换不超过max次。\n\n### split(str=\" \", num=string.count(str))\n\nnum=string.count(str)) 以str为分隔符截取字符串，如果num有指定值，则仅截取num个子字符串。\n这个的默认.split()意即按空格截取字符串。\n\n### splitlines(keepends=False)\n\n返回字符串的行数，按照换行符切割目标字符串。\n如果没设定keepends=True，则会将换行符从返回的字符串组中移除。\n\n---\n\n# 引用\n\n1. http://www.runoob.com/python3/python3-string.html\n2. https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000\n3. https://www.cnblogs.com/jebeljebel/p/4006433.html\n\n","slug":"python/grammar-4","published":1,"updated":"2018-07-10T17:31:12.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zey000oektzet8tt8ch","content":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>在Python3中，字符串在内存中的存储格式均是Unicode。且其实不存在单个字符，单个字符也被视为字符串。</p>\n<h2 id=\"编码与解码\"><a href=\"#编码与解码\" class=\"headerlink\" title=\"编码与解码\"></a>编码与解码</h2><p>对于许多编程语言来说，字符串的各类编码是一个很让人难以处理的问题，在Python中，用了很好的封装方式，字符串的编码与解码不再是令人头疼的问题。</p>\n<h3 id=\"encode\"><a href=\"#encode\" class=\"headerlink\" title=\"encode()\"></a>encode()</h3><p>python使用encode()方法来进行字符串的编码。这个方法将一个字符串编码成指定编码格式，返回值是bytes类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes_string = <span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你对含有超出ASCII编码外的字符（比如说，中文）的字符串编码为ASCII，则Python会报错，解决方法是告知Python如何进行处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes_string = <span class=\"string\">'中文CN'</span>.encode(<span class=\"string\">'ascii'</span>,errors=<span class=\"string\">'ignore'</span>)</span><br></pre></td></tr></table></figure>\n<p>这里我将encode()中errors参数的值设置为’ignore’，即对错误的字节进行忽略，返回值为ASCII编码的bytes，意为CN。</p>\n<h3 id=\"decode\"><a href=\"#decode\" class=\"headerlink\" title=\"decode()\"></a>decode()</h3><p>python使用decode()方法来进行字符串的编码。这个方法将一个bytes根据指定编码格式进行解码，返回值是一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果进行上面的encode()实验，很容易知道这里的<strong>b’\\xe4\\xb8\\xad\\xe6\\x96\\x87’</strong>是UTF-8编码格式下的’中文’，这里相当于上面的逆过程。</p>\n<p>同样的，如果bytes里有含有超出指定编码外的字符，Python也会报错，解决方法也是同样告知如何进行处理。</p>\n<h2 id=\"转义字符表\"><a href=\"#转义字符表\" class=\"headerlink\" title=\"转义字符表\"></a>转义字符表</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">转义字符</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">(在行尾时)</td>\n<td style=\"text-align:center\">续行符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\">反斜杠符号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\\\’</td>\n<td style=\"text-align:center\">单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\\\”</td>\n<td style=\"text-align:center\">双引号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\a</td>\n<td style=\"text-align:center\">响铃</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:center\">退格(Backspace)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\e</td>\n<td style=\"text-align:center\">转义</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\000</td>\n<td style=\"text-align:center\">空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\n</td>\n<td style=\"text-align:center\">换行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\v</td>\n<td style=\"text-align:center\">纵向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\t</td>\n<td style=\"text-align:center\">横向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\r</td>\n<td style=\"text-align:center\">回车</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\f</td>\n<td style=\"text-align:center\">换页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\oyy</td>\n<td style=\"text-align:center\">八进制数，yy代表的字符，例如：\\o12代表换行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\xyy</td>\n<td style=\"text-align:center\">十六进制数，yy代表的字符，例如：\\x0a代表换行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\other</td>\n<td style=\"text-align:center\">其它的字符以普通格式输出</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h2><p>下表实例变量a值为字符串 “Hello”，b变量值为 “Python”：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">字符串连接</td>\n<td style=\"text-align:center\">a + b 输出结果： HelloPython</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">重复输出字符串</td>\n<td style=\"text-align:center\">a*2 输出结果：HelloHello</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[]</td>\n<td style=\"text-align:center\">通过索引获取字符串中字符</td>\n<td style=\"text-align:center\">a[1] 输出结果 <strong>e</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[ : ]</td>\n<td style=\"text-align:center\">截取字符串中的一部分</td>\n<td style=\"text-align:center\">a[1:4] 输出结果 <strong>ell</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\">成员运算符 - 如果字符串中包含给定的字符返回 True</td>\n<td style=\"text-align:center\"><strong>‘H’ in a</strong> 输出结果 True</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not in</td>\n<td style=\"text-align:center\">成员运算符 - 如果字符串中不包含给定的字符返回 True</td>\n<td style=\"text-align:center\"><strong>‘M’ not in a</strong> 输出结果 True</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h2><p>Python支持格式化字符串的输出，语法与C语言的printf()函数基本相同。</p>\n<p>python字符串格式化符号:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:center\">格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:center\">格式化字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:center\">格式化整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%u</td>\n<td style=\"text-align:center\">格式化无符号整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%o</td>\n<td style=\"text-align:center\">格式化无符号八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:center\">格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:center\">格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:center\">格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%e</td>\n<td style=\"text-align:center\">用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%E</td>\n<td style=\"text-align:center\">作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%g</td>\n<td style=\"text-align:center\">%f和%e的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%G</td>\n<td style=\"text-align:center\">%f 和 %E 的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:center\">用十六进制数格式化变量的地址</td>\n</tr>\n</tbody>\n</table>\n<p>格式化操作符辅助指令:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">定义宽度或者小数点精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">用做左对齐</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">在正数前面显示加号( + )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#</td>\n<td style=\"text-align:center\">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">显示的数字前面填充’0’而不是默认的空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">‘%%’输出一个单一的’%’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m.n</td>\n<td style=\"text-align:center\">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td>\n</tr>\n</tbody>\n</table>\n<p>样例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'%c'</span> % <span class=\"string\">'a'</span>) <span class=\"comment\">#输出一个字符，如果不是字符会报错 </span></span><br><span class=\"line\">print(<span class=\"string\">'%x'</span> % <span class=\"number\">16</span>) <span class=\"comment\">#16进制下的16，没有前缀表明进制 </span></span><br><span class=\"line\">print(<span class=\"string\">'%04d'</span> % <span class=\"number\">20</span>) <span class=\"comment\">#输出占位4格的数字，未满4位前补0 </span></span><br><span class=\"line\">print(<span class=\"string\">'%+-4d'</span> % <span class=\"number\">20</span>) <span class=\"comment\">#左对齐的，在正数前面补'+'号的占位4格的数字 </span></span><br><span class=\"line\">print(<span class=\"string\">'%10.6f'</span> % <span class=\"number\">12.98765</span>) <span class=\"comment\">#占位10格(包括'.')，小数点后至少6位的数字</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h3><p>Python2.6开始支持使用format()函数来格式化字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'&#123;0:4d&#125;-&#123;1:02d&#125;-&#123;2:d&#125;'</span>.format(<span class=\"number\">1926</span>,<span class=\"number\">8</span>,<span class=\"number\">17</span>)) <span class=\"comment\">#输出 1926-08-17</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串内建函数\"><a href=\"#字符串内建函数\" class=\"headerlink\" title=\"字符串内建函数\"></a>字符串内建函数</h2><h3 id=\"capitalize\"><a href=\"#capitalize\" class=\"headerlink\" title=\"capitalize()\"></a>capitalize()</h3><p>将字符串的第一个字符转换为大写</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">'hello world'</span> </span><br><span class=\"line\">print(str1.capitalize()) <span class=\"comment\"># 返回 Hello world</span></span><br><span class=\"line\">str2 = <span class=\"string\">'123hello world'</span> </span><br><span class=\"line\">print(str2.capitalize()) <span class=\"comment\"># 返回 123hello world</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"center-width-fillchar\"><a href=\"#center-width-fillchar\" class=\"headerlink\" title=\"center(width, fillchar)\"></a>center(width, fillchar)</h3><p>返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格。</p>\n<h3 id=\"count-str-beg-0-end-len-string\"><a href=\"#count-str-beg-0-end-len-string\" class=\"headerlink\" title=\"count(str, beg= 0,end=len(string))\"></a>count(str, beg= 0,end=len(string))</h3><p>返回 str 在字符串里面出现的次数，如果beg或者end指定则返回指定范围内str出现的次数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">'where which why who when'</span> </span><br><span class=\"line\">print(str.count(<span class=\"string\">'wh'</span>)) <span class=\"comment\">#返回5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"startswith-endswith-suffix-beg-0-end-len-string\"><a href=\"#startswith-endswith-suffix-beg-0-end-len-string\" class=\"headerlink\" title=\"startswith/endswith(suffix, beg=0, end=len(string))\"></a>startswith/endswith(suffix, beg=0, end=len(string))</h3><p>检查字符串是否以suffix开始/结束，如果beg或者end指定则检查指定的范围内是否以suffix开始/结束，如果是，返回True，否则返回False。</p>\n<h3 id=\"expandtabs-tabsize-8\"><a href=\"#expandtabs-tabsize-8\" class=\"headerlink\" title=\"expandtabs(tabsize=8)\"></a>expandtabs(tabsize=8)</h3><p>把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</p>\n<h3 id=\"find-str-beg-0-end-len-string\"><a href=\"#find-str-beg-0-end-len-string\" class=\"headerlink\" title=\"find(str, beg=0 end=len(string))\"></a>find(str, beg=0 end=len(string))</h3><p>检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1。</p>\n<h3 id=\"index-str-beg-0-end-len-string\"><a href=\"#index-str-beg-0-end-len-string\" class=\"headerlink\" title=\"index(str, beg=0, end=len(string))\"></a>index(str, beg=0, end=len(string))</h3><p>跟find()方法一样，只不过如果str不在字符串中会报一个异常。</p>\n<h3 id=\"isalnum\"><a href=\"#isalnum\" class=\"headerlink\" title=\"isalnum()\"></a>isalnum()</h3><p>如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False。</p>\n<h3 id=\"isalpha\"><a href=\"#isalpha\" class=\"headerlink\" title=\"isalpha()\"></a>isalpha()</h3><p>如果字符串至少有一个字符并且所有字符都是字母则返回True，否则返回False。</p>\n<h3 id=\"isdigit-isdecimal-isnumeric\"><a href=\"#isdigit-isdecimal-isnumeric\" class=\"headerlink\" title=\"isdigit() isdecimal() isnumeric()\"></a>isdigit() isdecimal() isnumeric()</h3><p>如果字符串只包含数字则返回True，否则返回False。</p>\n<p>这三个在细节上有很多不同的地方，具体请参照引用3的博文，这里只给出结论。</p>\n<ul>\n<li>isdigit()<br>True: Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字（英文）<br>False: 汉字数字、罗马数字<br>Error: 无</li>\n<li>isdecimal()<br>True: Unicode数字，全角数字（双字节）<br>False: 罗马数字（英文），汉字数字，罗马数字<br>Error: byte数字（单字节）</li>\n<li>isnumeric()<br>True: Unicode数字，全角数字（双字节），罗马数字（英文），汉字数字、罗马数字<br>False: 无<br>Error: byte数字（单字节）</li>\n</ul>\n<h3 id=\"isspace\"><a href=\"#isspace\" class=\"headerlink\" title=\"isspace()\"></a>isspace()</h3><p>如果字符串中只包含空白，则返回True，否则返回False。</p>\n<h3 id=\"join-seq\"><a href=\"#join-seq\" class=\"headerlink\" title=\"join(seq)\"></a>join(seq)</h3><p>以指定字符串作为分隔符，传入的参数，迭代器seq中的所有变量的字符串表示合并为一个字符串返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seq = <span class=\"string\">'-'</span> </span><br><span class=\"line\">print(seq.join( (<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>) )) <span class=\"comment\">#返回A-B-C</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"len-string\"><a href=\"#len-string\" class=\"headerlink\" title=\"len(string)\"></a>len(string)</h3><p>返回字符串长度。</p>\n<h3 id=\"ljust-width-fillchar\"><a href=\"#ljust-width-fillchar\" class=\"headerlink\" title=\"ljust(width[, fillchar])\"></a>ljust(width[, fillchar])</h3><p>返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格。</p>\n<h3 id=\"lower\"><a href=\"#lower\" class=\"headerlink\" title=\"lower()\"></a>lower()</h3><p>转换字符串中所有大写字符为小写。</p>\n<h3 id=\"replace-old-new-max\"><a href=\"#replace-old-new-max\" class=\"headerlink\" title=\"replace(old, new [, max])\"></a>replace(old, new [, max])</h3><p>把将目标字符串中的old子串替换成new子串,如果max指定，则替换不超过max次。</p>\n<h3 id=\"split-str-”-“-num-string-count-str\"><a href=\"#split-str-”-“-num-string-count-str\" class=\"headerlink\" title=\"split(str=” “, num=string.count(str))\"></a>split(str=” “, num=string.count(str))</h3><p>num=string.count(str)) 以str为分隔符截取字符串，如果num有指定值，则仅截取num个子字符串。<br>这个的默认.split()意即按空格截取字符串。</p>\n<h3 id=\"splitlines-keepends-False\"><a href=\"#splitlines-keepends-False\" class=\"headerlink\" title=\"splitlines(keepends=False)\"></a>splitlines(keepends=False)</h3><p>返回字符串的行数，按照换行符切割目标字符串。<br>如果没设定keepends=True，则会将换行符从返回的字符串组中移除。</p>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python3/python3-string.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-string.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000</a></li>\n<li><a href=\"https://www.cnblogs.com/jebeljebel/p/4006433.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jebeljebel/p/4006433.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>在Python3中，字符串在内存中的存储格式均是Unicode。且其实不存在单个字符，单个字符也被视为字符串。</p>\n<h2 id=\"编码与解码\"><a href=\"#编码与解码\" class=\"headerlink\" title=\"编码与解码\"></a>编码与解码</h2><p>对于许多编程语言来说，字符串的各类编码是一个很让人难以处理的问题，在Python中，用了很好的封装方式，字符串的编码与解码不再是令人头疼的问题。</p>\n<h3 id=\"encode\"><a href=\"#encode\" class=\"headerlink\" title=\"encode()\"></a>encode()</h3><p>python使用encode()方法来进行字符串的编码。这个方法将一个字符串编码成指定编码格式，返回值是bytes类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes_string = <span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果你对含有超出ASCII编码外的字符（比如说，中文）的字符串编码为ASCII，则Python会报错，解决方法是告知Python如何进行处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes_string = <span class=\"string\">'中文CN'</span>.encode(<span class=\"string\">'ascii'</span>,errors=<span class=\"string\">'ignore'</span>)</span><br></pre></td></tr></table></figure>\n<p>这里我将encode()中errors参数的值设置为’ignore’，即对错误的字节进行忽略，返回值为ASCII编码的bytes，意为CN。</p>\n<h3 id=\"decode\"><a href=\"#decode\" class=\"headerlink\" title=\"decode()\"></a>decode()</h3><p>python使用decode()方法来进行字符串的编码。这个方法将一个bytes根据指定编码格式进行解码，返回值是一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果进行上面的encode()实验，很容易知道这里的<strong>b’\\xe4\\xb8\\xad\\xe6\\x96\\x87’</strong>是UTF-8编码格式下的’中文’，这里相当于上面的逆过程。</p>\n<p>同样的，如果bytes里有含有超出指定编码外的字符，Python也会报错，解决方法也是同样告知如何进行处理。</p>\n<h2 id=\"转义字符表\"><a href=\"#转义字符表\" class=\"headerlink\" title=\"转义字符表\"></a>转义字符表</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">转义字符</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">(在行尾时)</td>\n<td style=\"text-align:center\">续行符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\">反斜杠符号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\\\’</td>\n<td style=\"text-align:center\">单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\\\”</td>\n<td style=\"text-align:center\">双引号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\a</td>\n<td style=\"text-align:center\">响铃</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\b</td>\n<td style=\"text-align:center\">退格(Backspace)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\e</td>\n<td style=\"text-align:center\">转义</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\000</td>\n<td style=\"text-align:center\">空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\n</td>\n<td style=\"text-align:center\">换行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\v</td>\n<td style=\"text-align:center\">纵向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\t</td>\n<td style=\"text-align:center\">横向制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\r</td>\n<td style=\"text-align:center\">回车</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\f</td>\n<td style=\"text-align:center\">换页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\oyy</td>\n<td style=\"text-align:center\">八进制数，yy代表的字符，例如：\\o12代表换行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\xyy</td>\n<td style=\"text-align:center\">十六进制数，yy代表的字符，例如：\\x0a代表换行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\other</td>\n<td style=\"text-align:center\">其它的字符以普通格式输出</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h2><p>下表实例变量a值为字符串 “Hello”，b变量值为 “Python”：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">字符串连接</td>\n<td style=\"text-align:center\">a + b 输出结果： HelloPython</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">重复输出字符串</td>\n<td style=\"text-align:center\">a*2 输出结果：HelloHello</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[]</td>\n<td style=\"text-align:center\">通过索引获取字符串中字符</td>\n<td style=\"text-align:center\">a[1] 输出结果 <strong>e</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[ : ]</td>\n<td style=\"text-align:center\">截取字符串中的一部分</td>\n<td style=\"text-align:center\">a[1:4] 输出结果 <strong>ell</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\">成员运算符 - 如果字符串中包含给定的字符返回 True</td>\n<td style=\"text-align:center\"><strong>‘H’ in a</strong> 输出结果 True</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not in</td>\n<td style=\"text-align:center\">成员运算符 - 如果字符串中不包含给定的字符返回 True</td>\n<td style=\"text-align:center\"><strong>‘M’ not in a</strong> 输出结果 True</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h2><p>Python支持格式化字符串的输出，语法与C语言的printf()函数基本相同。</p>\n<p>python字符串格式化符号:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%c</td>\n<td style=\"text-align:center\">格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:center\">格式化字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:center\">格式化整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%u</td>\n<td style=\"text-align:center\">格式化无符号整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%o</td>\n<td style=\"text-align:center\">格式化无符号八进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:center\">格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%X</td>\n<td style=\"text-align:center\">格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:center\">格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%e</td>\n<td style=\"text-align:center\">用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%E</td>\n<td style=\"text-align:center\">作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%g</td>\n<td style=\"text-align:center\">%f和%e的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%G</td>\n<td style=\"text-align:center\">%f 和 %E 的简写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%p</td>\n<td style=\"text-align:center\">用十六进制数格式化变量的地址</td>\n</tr>\n</tbody>\n</table>\n<p>格式化操作符辅助指令:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">定义宽度或者小数点精度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">用做左对齐</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">在正数前面显示加号( + )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#</td>\n<td style=\"text-align:center\">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">显示的数字前面填充’0’而不是默认的空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">‘%%’输出一个单一的’%’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m.n</td>\n<td style=\"text-align:center\">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td>\n</tr>\n</tbody>\n</table>\n<p>样例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'%c'</span> % <span class=\"string\">'a'</span>) <span class=\"comment\">#输出一个字符，如果不是字符会报错 </span></span><br><span class=\"line\">print(<span class=\"string\">'%x'</span> % <span class=\"number\">16</span>) <span class=\"comment\">#16进制下的16，没有前缀表明进制 </span></span><br><span class=\"line\">print(<span class=\"string\">'%04d'</span> % <span class=\"number\">20</span>) <span class=\"comment\">#输出占位4格的数字，未满4位前补0 </span></span><br><span class=\"line\">print(<span class=\"string\">'%+-4d'</span> % <span class=\"number\">20</span>) <span class=\"comment\">#左对齐的，在正数前面补'+'号的占位4格的数字 </span></span><br><span class=\"line\">print(<span class=\"string\">'%10.6f'</span> % <span class=\"number\">12.98765</span>) <span class=\"comment\">#占位10格(包括'.')，小数点后至少6位的数字</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h3><p>Python2.6开始支持使用format()函数来格式化字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'&#123;0:4d&#125;-&#123;1:02d&#125;-&#123;2:d&#125;'</span>.format(<span class=\"number\">1926</span>,<span class=\"number\">8</span>,<span class=\"number\">17</span>)) <span class=\"comment\">#输出 1926-08-17</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串内建函数\"><a href=\"#字符串内建函数\" class=\"headerlink\" title=\"字符串内建函数\"></a>字符串内建函数</h2><h3 id=\"capitalize\"><a href=\"#capitalize\" class=\"headerlink\" title=\"capitalize()\"></a>capitalize()</h3><p>将字符串的第一个字符转换为大写</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">'hello world'</span> </span><br><span class=\"line\">print(str1.capitalize()) <span class=\"comment\"># 返回 Hello world</span></span><br><span class=\"line\">str2 = <span class=\"string\">'123hello world'</span> </span><br><span class=\"line\">print(str2.capitalize()) <span class=\"comment\"># 返回 123hello world</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"center-width-fillchar\"><a href=\"#center-width-fillchar\" class=\"headerlink\" title=\"center(width, fillchar)\"></a>center(width, fillchar)</h3><p>返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格。</p>\n<h3 id=\"count-str-beg-0-end-len-string\"><a href=\"#count-str-beg-0-end-len-string\" class=\"headerlink\" title=\"count(str, beg= 0,end=len(string))\"></a>count(str, beg= 0,end=len(string))</h3><p>返回 str 在字符串里面出现的次数，如果beg或者end指定则返回指定范围内str出现的次数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">'where which why who when'</span> </span><br><span class=\"line\">print(str.count(<span class=\"string\">'wh'</span>)) <span class=\"comment\">#返回5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"startswith-endswith-suffix-beg-0-end-len-string\"><a href=\"#startswith-endswith-suffix-beg-0-end-len-string\" class=\"headerlink\" title=\"startswith/endswith(suffix, beg=0, end=len(string))\"></a>startswith/endswith(suffix, beg=0, end=len(string))</h3><p>检查字符串是否以suffix开始/结束，如果beg或者end指定则检查指定的范围内是否以suffix开始/结束，如果是，返回True，否则返回False。</p>\n<h3 id=\"expandtabs-tabsize-8\"><a href=\"#expandtabs-tabsize-8\" class=\"headerlink\" title=\"expandtabs(tabsize=8)\"></a>expandtabs(tabsize=8)</h3><p>把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</p>\n<h3 id=\"find-str-beg-0-end-len-string\"><a href=\"#find-str-beg-0-end-len-string\" class=\"headerlink\" title=\"find(str, beg=0 end=len(string))\"></a>find(str, beg=0 end=len(string))</h3><p>检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1。</p>\n<h3 id=\"index-str-beg-0-end-len-string\"><a href=\"#index-str-beg-0-end-len-string\" class=\"headerlink\" title=\"index(str, beg=0, end=len(string))\"></a>index(str, beg=0, end=len(string))</h3><p>跟find()方法一样，只不过如果str不在字符串中会报一个异常。</p>\n<h3 id=\"isalnum\"><a href=\"#isalnum\" class=\"headerlink\" title=\"isalnum()\"></a>isalnum()</h3><p>如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False。</p>\n<h3 id=\"isalpha\"><a href=\"#isalpha\" class=\"headerlink\" title=\"isalpha()\"></a>isalpha()</h3><p>如果字符串至少有一个字符并且所有字符都是字母则返回True，否则返回False。</p>\n<h3 id=\"isdigit-isdecimal-isnumeric\"><a href=\"#isdigit-isdecimal-isnumeric\" class=\"headerlink\" title=\"isdigit() isdecimal() isnumeric()\"></a>isdigit() isdecimal() isnumeric()</h3><p>如果字符串只包含数字则返回True，否则返回False。</p>\n<p>这三个在细节上有很多不同的地方，具体请参照引用3的博文，这里只给出结论。</p>\n<ul>\n<li>isdigit()<br>True: Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字（英文）<br>False: 汉字数字、罗马数字<br>Error: 无</li>\n<li>isdecimal()<br>True: Unicode数字，全角数字（双字节）<br>False: 罗马数字（英文），汉字数字，罗马数字<br>Error: byte数字（单字节）</li>\n<li>isnumeric()<br>True: Unicode数字，全角数字（双字节），罗马数字（英文），汉字数字、罗马数字<br>False: 无<br>Error: byte数字（单字节）</li>\n</ul>\n<h3 id=\"isspace\"><a href=\"#isspace\" class=\"headerlink\" title=\"isspace()\"></a>isspace()</h3><p>如果字符串中只包含空白，则返回True，否则返回False。</p>\n<h3 id=\"join-seq\"><a href=\"#join-seq\" class=\"headerlink\" title=\"join(seq)\"></a>join(seq)</h3><p>以指定字符串作为分隔符，传入的参数，迭代器seq中的所有变量的字符串表示合并为一个字符串返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seq = <span class=\"string\">'-'</span> </span><br><span class=\"line\">print(seq.join( (<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>) )) <span class=\"comment\">#返回A-B-C</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"len-string\"><a href=\"#len-string\" class=\"headerlink\" title=\"len(string)\"></a>len(string)</h3><p>返回字符串长度。</p>\n<h3 id=\"ljust-width-fillchar\"><a href=\"#ljust-width-fillchar\" class=\"headerlink\" title=\"ljust(width[, fillchar])\"></a>ljust(width[, fillchar])</h3><p>返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格。</p>\n<h3 id=\"lower\"><a href=\"#lower\" class=\"headerlink\" title=\"lower()\"></a>lower()</h3><p>转换字符串中所有大写字符为小写。</p>\n<h3 id=\"replace-old-new-max\"><a href=\"#replace-old-new-max\" class=\"headerlink\" title=\"replace(old, new [, max])\"></a>replace(old, new [, max])</h3><p>把将目标字符串中的old子串替换成new子串,如果max指定，则替换不超过max次。</p>\n<h3 id=\"split-str-”-“-num-string-count-str\"><a href=\"#split-str-”-“-num-string-count-str\" class=\"headerlink\" title=\"split(str=” “, num=string.count(str))\"></a>split(str=” “, num=string.count(str))</h3><p>num=string.count(str)) 以str为分隔符截取字符串，如果num有指定值，则仅截取num个子字符串。<br>这个的默认.split()意即按空格截取字符串。</p>\n<h3 id=\"splitlines-keepends-False\"><a href=\"#splitlines-keepends-False\" class=\"headerlink\" title=\"splitlines(keepends=False)\"></a>splitlines(keepends=False)</h3><p>返回字符串的行数，按照换行符切割目标字符串。<br>如果没设定keepends=True，则会将换行符从返回的字符串组中移除。</p>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"http://www.runoob.com/python3/python3-string.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python3/python3-string.html</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000</a></li>\n<li><a href=\"https://www.cnblogs.com/jebeljebel/p/4006433.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jebeljebel/p/4006433.html</a></li>\n</ol>\n"},{"title":"欧拉计划个人题解(001-005)","date":"2018-06-10T16:56:06.000Z","toc":true,"banner":"/images/algorithm/Project-Euler/project-euler-banner.png","thumbnail":"/images/algorithm/Project-Euler/project-euler-thumbnail.png","_content":"\n# [001]Multiples of 3 and 5\n\n__题意__\n\n找寻[1,1000)以内，是3的倍数，或是5的倍数的数。\n\n__思路__\n\n暴力搜索判定\n\n__优化__\n\n容斥，先计算3的倍数在1000内有多少个，然后用等差公式计算出1000内3的倍数的和，同理有5的倍数，两者相加，重复的数用15的倍数的和减去即可。\n\n__代码__\n\nC++\\STL\n```c++\nlong long SumOf(long long up, int k)\n{\n    long long cnt = (up - 1) / k;\n    return (k + cnt * k) * cnt / 2;\n}\nint main()\n{\n    long long n;\n    cin >> n;\n    cout << SumOf(n, 5) + SumOf(n, 7) - SumOf(n, 35) << endl;\n    return 0;\n}\n\n```\n\n__答案__\n\n233168\n\n# [002]Even Fibonacci numbers\n\n__题意__\n\n斐波那契数列:\n\n```\nF[1] = 1\nF[2] = 1\nF[3] = 2\n...\n```\n求斐波那契数列中数字为偶数的所有数字之和，数字不大于400万。\n\n__思路__\n\n递推暴力\n\nC++\\STL\n\n```c++\nint main()\n{\n    int ans = 0;\n    int a = 1, b = 1, c = 2;\n\n    while(c <= 4000000)\n    {\n        ans += c;\n        a = b + c;\n        b = a + c;\n        c = a + b;\n    }\n\n    cout << ans << endl;\n}\n```\n\n__优化__\n\n列表找规律：\n\n```\nF[1] =  1     F[2] = 1\nF[3] =  2     F[4] = 3\nF[5] =  5     F[6] = 8\nF[7] =  13    F[8] = 21\nF[9] =  34    F[10] = 55\nF[11] = 89    F[12] = 144\nF[13] = 233   F[14] = 377\nF[15] = 610   F[16] = 987\nF[17] = 1597  F[18] = 2584\n\n```\n符合题意的有\n\n```\nF[3] = 2\nF[6] = 8\nF[9] = 34\nF[12] = 144\nF[11] = 610\nF[18] = 2584\n\n```\n观察可得 `F[n] = 4 * F[n-3] + F[n - 6]`\n\n正确性可以由斐波那契数列定义推出：\n\n$$\n\\begin{align}\nF_n &= F_{n-1} + F_{n-2} \\\\\\\\\n& = F_{n-2} + F_{n-3} + F_{n-2} = 2 \\times F_{n-2} + F_{n-3} \\\\\\\\\n& = 2 \\times ( F_{n-3} + F_{n-4} ) + F_{n-3} ) = 3 \\times F_{n-3} + 2 \\times F_{n-4} \\\\\\\\\n& = 3 \\times F_{n-3} + F_{n-4} + F_{n-5} + F_{n-6} \\\\\\\\\n& = 4 \\times F_{n-3} + F_{n-6} \\\\\\\\\n\\end{align}\n$$\n__代码__\n\nC++\\STL\n\n```c++\nint main()\n{\n    int a[3] = {2,8,34};\n    int ans = 0;\n    int p = 2;\n    while(a[p] < 4000000)\n    {\n        ans += a[p];\n        p = (p + 1) % 3;\n        a[p] = 4 * a[(p + 2) % 3] + a[(p + 1) % 3];\n    }\n    cout << ans << endl;\n}\n\n```\n\n__答案__\n\n4613732\n\n# [003]Largest prime factor\n\n__题意__\n\n求 600851475143 最大的质因子\n\n__思路__\n\n刚开始先暴力的，发现循环判定再循环判定复杂度就太高了。于是用埃氏筛法扫过去就行了。\n\n__代码__\n\nC++\\STL\n\n```c++\nint Eratosthenes()\n{\n    const long long TARGET = 600851475143LL;\n    const int upper = static_cast<const int>(sqrt(TARGET));\n    bool *num = new bool[static_cast<unsigned long long>(upper)];\n    memset(num, false, sizeof(bool) * static_cast<unsigned long long>(upper));\n    int ans = 2;\n    for(int i = ans; i < upper; ++i)\n    {\n        if(num[i] == false)\n        {\n            int p = 2;\n            while(i * p < upper)\n            {\n                num[ i * p ] = true;\n                ++p;\n            }\n            if(TARGET % i == 0)\n                ans = i;\n        }\n    }\n    delete[] num;\n    return ans;\n}\n\nint main(void)\n{\n    int ans = Eratosthenes();\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n6857\n\n# [004]Largest palindrome product\n\n__题意__\n\n对于一个回文数，如：9009 = 91 × 99，他是由两个两位数构成的。现在找两个三位数能构成的最大回文数。\n\n__思路__\n\n首先是构造回文数，它符合一下几个规律：\n\n1.  六位数\n2.  六位数里面最大的\n3.  前三位和后三位对应相同\n\n由上，我们将回文数按位拆分，枚举前一二三位，做对应就行了。值得一提的是第一位不可能为0，二三位都有可能为0。\n\n__优化__\n\n回文数必然可以被11整除，证明如下： 回文数的形式必然为：\n\n\n>100000a + 10000b + 1000c + 100c + 10b + a\n>=100001a + 10010b + 1100c\n>因为：\n>100001 % 11 = 0\n>10010 % 11 = 0\n>1100 % 11 = 0\n>所以：\n>回文数必然可以被11整除\n\n__代码__\n\nC++\\STL\n\n```c++\nint main()\n{\n    int num;\n    int mark = 1;\n    for(int i = 9; i >= 1 && mark; --i)\n        for(int j = 9; j >= 0 && mark; --j)\n            for(int k = 9; k >= 0 && mark; --k)\n            {\n                num = i*100 + j * 10 + k;\n                num = num * 1000 + k * 100 + j * 10 + i;\n                for(int t = 999; t >= 100 && mark; --t)\n                    if(num % t == 0 && num / t >= 100 && num / t < 1000)\n                    {\n                        cout << num << endl;\n                        mark = 0;\n                    }\n            }\n    return 0;\n}\n\n```\n\n__答案__\n\n906609\n\n# [005]Smallest multiple\n\n__题意__\n\n2520是最小的能被1-10中每个数字整除的正整数。 最小的能被1-20中每个数整除的正整数是多少？\n\n__思路__\n\n刚开始想直接找到20以内的质数2,3,5,7...相乘得出答案的，后来交了发现不对，尝试了一次，发现在4的时候就不能整除了。后来百度搜了一下，要：\n\n1. 列出20以内的质数，并求这些质数的小于20的最高次幂\n2. 再将这些质数的最高次幂的积相乘\n\n于是有了下面的代码。\n\n__代码__\n\nC++\\STL\n\n```c++\nbool check(vector<int>& s, int num)\n{\n    for(int e : s)\n        if(num % e == 0)\n            return false;\n    return true;\n}\nint main(void)\n{\n    vector<int> s;\n    for(int i = 2; i <= 20; ++i)\n        if(check(s,i))\n            s.push_back(i);\n    long long ans = 1LL;\n    for(int e : s)\n    {\n        int m = 1;\n        while(m * e <= 20)\n            m *= e;\n        ans *= m;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n232792560\n","source":"_posts/algorithm/Project-Euler/001-005.md","raw":"---\ntitle: 欧拉计划个人题解(001-005)\ndate: 2018-6-11 00:56:06\ncategories: algorithm\ntags: \n    - Project Euler\n    - algorithm\ntoc: true\nbanner: /images/algorithm/Project-Euler/project-euler-banner.png\nthumbnail: /images/algorithm/Project-Euler/project-euler-thumbnail.png\n---\n\n# [001]Multiples of 3 and 5\n\n__题意__\n\n找寻[1,1000)以内，是3的倍数，或是5的倍数的数。\n\n__思路__\n\n暴力搜索判定\n\n__优化__\n\n容斥，先计算3的倍数在1000内有多少个，然后用等差公式计算出1000内3的倍数的和，同理有5的倍数，两者相加，重复的数用15的倍数的和减去即可。\n\n__代码__\n\nC++\\STL\n```c++\nlong long SumOf(long long up, int k)\n{\n    long long cnt = (up - 1) / k;\n    return (k + cnt * k) * cnt / 2;\n}\nint main()\n{\n    long long n;\n    cin >> n;\n    cout << SumOf(n, 5) + SumOf(n, 7) - SumOf(n, 35) << endl;\n    return 0;\n}\n\n```\n\n__答案__\n\n233168\n\n# [002]Even Fibonacci numbers\n\n__题意__\n\n斐波那契数列:\n\n```\nF[1] = 1\nF[2] = 1\nF[3] = 2\n...\n```\n求斐波那契数列中数字为偶数的所有数字之和，数字不大于400万。\n\n__思路__\n\n递推暴力\n\nC++\\STL\n\n```c++\nint main()\n{\n    int ans = 0;\n    int a = 1, b = 1, c = 2;\n\n    while(c <= 4000000)\n    {\n        ans += c;\n        a = b + c;\n        b = a + c;\n        c = a + b;\n    }\n\n    cout << ans << endl;\n}\n```\n\n__优化__\n\n列表找规律：\n\n```\nF[1] =  1     F[2] = 1\nF[3] =  2     F[4] = 3\nF[5] =  5     F[6] = 8\nF[7] =  13    F[8] = 21\nF[9] =  34    F[10] = 55\nF[11] = 89    F[12] = 144\nF[13] = 233   F[14] = 377\nF[15] = 610   F[16] = 987\nF[17] = 1597  F[18] = 2584\n\n```\n符合题意的有\n\n```\nF[3] = 2\nF[6] = 8\nF[9] = 34\nF[12] = 144\nF[11] = 610\nF[18] = 2584\n\n```\n观察可得 `F[n] = 4 * F[n-3] + F[n - 6]`\n\n正确性可以由斐波那契数列定义推出：\n\n$$\n\\begin{align}\nF_n &= F_{n-1} + F_{n-2} \\\\\\\\\n& = F_{n-2} + F_{n-3} + F_{n-2} = 2 \\times F_{n-2} + F_{n-3} \\\\\\\\\n& = 2 \\times ( F_{n-3} + F_{n-4} ) + F_{n-3} ) = 3 \\times F_{n-3} + 2 \\times F_{n-4} \\\\\\\\\n& = 3 \\times F_{n-3} + F_{n-4} + F_{n-5} + F_{n-6} \\\\\\\\\n& = 4 \\times F_{n-3} + F_{n-6} \\\\\\\\\n\\end{align}\n$$\n__代码__\n\nC++\\STL\n\n```c++\nint main()\n{\n    int a[3] = {2,8,34};\n    int ans = 0;\n    int p = 2;\n    while(a[p] < 4000000)\n    {\n        ans += a[p];\n        p = (p + 1) % 3;\n        a[p] = 4 * a[(p + 2) % 3] + a[(p + 1) % 3];\n    }\n    cout << ans << endl;\n}\n\n```\n\n__答案__\n\n4613732\n\n# [003]Largest prime factor\n\n__题意__\n\n求 600851475143 最大的质因子\n\n__思路__\n\n刚开始先暴力的，发现循环判定再循环判定复杂度就太高了。于是用埃氏筛法扫过去就行了。\n\n__代码__\n\nC++\\STL\n\n```c++\nint Eratosthenes()\n{\n    const long long TARGET = 600851475143LL;\n    const int upper = static_cast<const int>(sqrt(TARGET));\n    bool *num = new bool[static_cast<unsigned long long>(upper)];\n    memset(num, false, sizeof(bool) * static_cast<unsigned long long>(upper));\n    int ans = 2;\n    for(int i = ans; i < upper; ++i)\n    {\n        if(num[i] == false)\n        {\n            int p = 2;\n            while(i * p < upper)\n            {\n                num[ i * p ] = true;\n                ++p;\n            }\n            if(TARGET % i == 0)\n                ans = i;\n        }\n    }\n    delete[] num;\n    return ans;\n}\n\nint main(void)\n{\n    int ans = Eratosthenes();\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n6857\n\n# [004]Largest palindrome product\n\n__题意__\n\n对于一个回文数，如：9009 = 91 × 99，他是由两个两位数构成的。现在找两个三位数能构成的最大回文数。\n\n__思路__\n\n首先是构造回文数，它符合一下几个规律：\n\n1.  六位数\n2.  六位数里面最大的\n3.  前三位和后三位对应相同\n\n由上，我们将回文数按位拆分，枚举前一二三位，做对应就行了。值得一提的是第一位不可能为0，二三位都有可能为0。\n\n__优化__\n\n回文数必然可以被11整除，证明如下： 回文数的形式必然为：\n\n\n>100000a + 10000b + 1000c + 100c + 10b + a\n>=100001a + 10010b + 1100c\n>因为：\n>100001 % 11 = 0\n>10010 % 11 = 0\n>1100 % 11 = 0\n>所以：\n>回文数必然可以被11整除\n\n__代码__\n\nC++\\STL\n\n```c++\nint main()\n{\n    int num;\n    int mark = 1;\n    for(int i = 9; i >= 1 && mark; --i)\n        for(int j = 9; j >= 0 && mark; --j)\n            for(int k = 9; k >= 0 && mark; --k)\n            {\n                num = i*100 + j * 10 + k;\n                num = num * 1000 + k * 100 + j * 10 + i;\n                for(int t = 999; t >= 100 && mark; --t)\n                    if(num % t == 0 && num / t >= 100 && num / t < 1000)\n                    {\n                        cout << num << endl;\n                        mark = 0;\n                    }\n            }\n    return 0;\n}\n\n```\n\n__答案__\n\n906609\n\n# [005]Smallest multiple\n\n__题意__\n\n2520是最小的能被1-10中每个数字整除的正整数。 最小的能被1-20中每个数整除的正整数是多少？\n\n__思路__\n\n刚开始想直接找到20以内的质数2,3,5,7...相乘得出答案的，后来交了发现不对，尝试了一次，发现在4的时候就不能整除了。后来百度搜了一下，要：\n\n1. 列出20以内的质数，并求这些质数的小于20的最高次幂\n2. 再将这些质数的最高次幂的积相乘\n\n于是有了下面的代码。\n\n__代码__\n\nC++\\STL\n\n```c++\nbool check(vector<int>& s, int num)\n{\n    for(int e : s)\n        if(num % e == 0)\n            return false;\n    return true;\n}\nint main(void)\n{\n    vector<int> s;\n    for(int i = 2; i <= 20; ++i)\n        if(check(s,i))\n            s.push_back(i);\n    long long ans = 1LL;\n    for(int e : s)\n    {\n        int m = 1;\n        while(m * e <= 20)\n            m *= e;\n        ans *= m;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n232792560\n","slug":"algorithm/Project-Euler/001-005","published":1,"updated":"2018-07-10T17:31:12.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zfh000tektz6hb06cbz","content":"<h1 id=\"001-Multiples-of-3-and-5\"><a href=\"#001-Multiples-of-3-and-5\" class=\"headerlink\" title=\"[001]Multiples of 3 and 5\"></a>[001]Multiples of 3 and 5</h1><p><strong>题意</strong></p>\n<p>找寻[1,1000)以内，是3的倍数，或是5的倍数的数。</p>\n<p><strong>思路</strong></p>\n<p>暴力搜索判定</p>\n<p><strong>优化</strong></p>\n<p>容斥，先计算3的倍数在1000内有多少个，然后用等差公式计算出1000内3的倍数的和，同理有5的倍数，两者相加，重复的数用15的倍数的和减去即可。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">SumOf</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> up, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> cnt = (up - <span class=\"number\">1</span>) / k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (k + cnt * k) * cnt / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; SumOf(n, <span class=\"number\">5</span>) + SumOf(n, <span class=\"number\">7</span>) - SumOf(n, <span class=\"number\">35</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>答案</strong></p>\n<p>233168</p>\n<h1 id=\"002-Even-Fibonacci-numbers\"><a href=\"#002-Even-Fibonacci-numbers\" class=\"headerlink\" title=\"[002]Even Fibonacci numbers\"></a>[002]Even Fibonacci numbers</h1><p><strong>题意</strong></p>\n<p>斐波那契数列:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F[1] = 1</span><br><span class=\"line\">F[2] = 1</span><br><span class=\"line\">F[3] = 2</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>求斐波那契数列中数字为偶数的所有数字之和，数字不大于400万。</p>\n<p><strong>思路</strong></p>\n<p>递推暴力</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>, c = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt;= <span class=\"number\">4000000</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += c;</span><br><span class=\"line\">        a = b + c;</span><br><span class=\"line\">        b = a + c;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>列表找规律：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F[1] =  1     F[2] = 1</span><br><span class=\"line\">F[3] =  2     F[4] = 3</span><br><span class=\"line\">F[5] =  5     F[6] = 8</span><br><span class=\"line\">F[7] =  13    F[8] = 21</span><br><span class=\"line\">F[9] =  34    F[10] = 55</span><br><span class=\"line\">F[11] = 89    F[12] = 144</span><br><span class=\"line\">F[13] = 233   F[14] = 377</span><br><span class=\"line\">F[15] = 610   F[16] = 987</span><br><span class=\"line\">F[17] = 1597  F[18] = 2584</span><br></pre></td></tr></table></figure>\n<p>符合题意的有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F[3] = 2</span><br><span class=\"line\">F[6] = 8</span><br><span class=\"line\">F[9] = 34</span><br><span class=\"line\">F[12] = 144</span><br><span class=\"line\">F[11] = 610</span><br><span class=\"line\">F[18] = 2584</span><br></pre></td></tr></table></figure>\n<p>观察可得 <code>F[n] = 4 * F[n-3] + F[n - 6]</code></p>\n<p>正确性可以由斐波那契数列定义推出：</p>\n<p>$$<br>\\begin{align}<br>F_n &amp;= F_{n-1} + F_{n-2} \\\\<br>&amp; = F_{n-2} + F_{n-3} + F_{n-2} = 2 \\times F_{n-2} + F_{n-3} \\\\<br>&amp; = 2 \\times ( F_{n-3} + F_{n-4} ) + F_{n-3} ) = 3 \\times F_{n-3} + 2 \\times F_{n-4} \\\\<br>&amp; = 3 \\times F_{n-3} + F_{n-4} + F_{n-5} + F_{n-6} \\\\<br>&amp; = 4 \\times F_{n-3} + F_{n-6} \\\\<br>\\end{align}<br>$$<br><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">3</span>] = &#123;<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">34</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a[p] &lt; <span class=\"number\">4000000</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += a[p];</span><br><span class=\"line\">        p = (p + <span class=\"number\">1</span>) % <span class=\"number\">3</span>;</span><br><span class=\"line\">        a[p] = <span class=\"number\">4</span> * a[(p + <span class=\"number\">2</span>) % <span class=\"number\">3</span>] + a[(p + <span class=\"number\">1</span>) % <span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>4613732</p>\n<h1 id=\"003-Largest-prime-factor\"><a href=\"#003-Largest-prime-factor\" class=\"headerlink\" title=\"[003]Largest prime factor\"></a>[003]Largest prime factor</h1><p><strong>题意</strong></p>\n<p>求 600851475143 最大的质因子</p>\n<p><strong>思路</strong></p>\n<p>刚开始先暴力的，发现循环判定再循环判定复杂度就太高了。于是用埃氏筛法扫过去就行了。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Eratosthenes</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> TARGET = <span class=\"number\">600851475143L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> upper = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&gt;(<span class=\"built_in\">sqrt</span>(TARGET));</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> *num = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;(upper)];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(num, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>) * <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;(upper));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = ans; i &lt; upper; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i * p &lt; upper)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num[ i * p ] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                ++p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TARGET % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                ans = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = Eratosthenes();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>6857</p>\n<h1 id=\"004-Largest-palindrome-product\"><a href=\"#004-Largest-palindrome-product\" class=\"headerlink\" title=\"[004]Largest palindrome product\"></a>[004]Largest palindrome product</h1><p><strong>题意</strong></p>\n<p>对于一个回文数，如：9009 = 91 × 99，他是由两个两位数构成的。现在找两个三位数能构成的最大回文数。</p>\n<p><strong>思路</strong></p>\n<p>首先是构造回文数，它符合一下几个规律：</p>\n<ol>\n<li>六位数</li>\n<li>六位数里面最大的</li>\n<li>前三位和后三位对应相同</li>\n</ol>\n<p>由上，我们将回文数按位拆分，枚举前一二三位，做对应就行了。值得一提的是第一位不可能为0，二三位都有可能为0。</p>\n<p><strong>优化</strong></p>\n<p>回文数必然可以被11整除，证明如下： 回文数的形式必然为：</p>\n<blockquote>\n<p>100000a + 10000b + 1000c + 100c + 10b + a<br>=100001a + 10010b + 1100c<br>因为：<br>100001 % 11 = 0<br>10010 % 11 = 0<br>1100 % 11 = 0<br>所以：<br>回文数必然可以被11整除</p>\n</blockquote>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mark = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">9</span>; i &gt;= <span class=\"number\">1</span> &amp;&amp; mark; --i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">9</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; mark; --j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">9</span>; k &gt;= <span class=\"number\">0</span> &amp;&amp; mark; --k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num = i*<span class=\"number\">100</span> + j * <span class=\"number\">10</span> + k;</span><br><span class=\"line\">                num = num * <span class=\"number\">1000</span> + k * <span class=\"number\">100</span> + j * <span class=\"number\">10</span> + i;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">999</span>; t &gt;= <span class=\"number\">100</span> &amp;&amp; mark; --t)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(num % t == <span class=\"number\">0</span> &amp;&amp; num / t &gt;= <span class=\"number\">100</span> &amp;&amp; num / t &lt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                        mark = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>906609</p>\n<h1 id=\"005-Smallest-multiple\"><a href=\"#005-Smallest-multiple\" class=\"headerlink\" title=\"[005]Smallest multiple\"></a>[005]Smallest multiple</h1><p><strong>题意</strong></p>\n<p>2520是最小的能被1-10中每个数字整除的正整数。 最小的能被1-20中每个数整除的正整数是多少？</p>\n<p><strong>思路</strong></p>\n<p>刚开始想直接找到20以内的质数2,3,5,7…相乘得出答案的，后来交了发现不对，尝试了一次，发现在4的时候就不能整除了。后来百度搜了一下，要：</p>\n<ol>\n<li>列出20以内的质数，并求这些质数的小于20的最高次幂</li>\n<li>再将这些质数的最高次幂的积相乘</li>\n</ol>\n<p>于是有了下面的代码。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; s, <span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num % e == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check(s,i))</span><br><span class=\"line\">            s.push_back(i);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">1L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(m * e &lt;= <span class=\"number\">20</span>)</span><br><span class=\"line\">            m *= e;</span><br><span class=\"line\">        ans *= m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>232792560</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"001-Multiples-of-3-and-5\"><a href=\"#001-Multiples-of-3-and-5\" class=\"headerlink\" title=\"[001]Multiples of 3 and 5\"></a>[001]Multiples of 3 and 5</h1><p><strong>题意</strong></p>\n<p>找寻[1,1000)以内，是3的倍数，或是5的倍数的数。</p>\n<p><strong>思路</strong></p>\n<p>暴力搜索判定</p>\n<p><strong>优化</strong></p>\n<p>容斥，先计算3的倍数在1000内有多少个，然后用等差公式计算出1000内3的倍数的和，同理有5的倍数，两者相加，重复的数用15的倍数的和减去即可。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">SumOf</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> up, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> cnt = (up - <span class=\"number\">1</span>) / k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (k + cnt * k) * cnt / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; SumOf(n, <span class=\"number\">5</span>) + SumOf(n, <span class=\"number\">7</span>) - SumOf(n, <span class=\"number\">35</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>答案</strong></p>\n<p>233168</p>\n<h1 id=\"002-Even-Fibonacci-numbers\"><a href=\"#002-Even-Fibonacci-numbers\" class=\"headerlink\" title=\"[002]Even Fibonacci numbers\"></a>[002]Even Fibonacci numbers</h1><p><strong>题意</strong></p>\n<p>斐波那契数列:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F[1] = 1</span><br><span class=\"line\">F[2] = 1</span><br><span class=\"line\">F[3] = 2</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>求斐波那契数列中数字为偶数的所有数字之和，数字不大于400万。</p>\n<p><strong>思路</strong></p>\n<p>递推暴力</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>, c = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt;= <span class=\"number\">4000000</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += c;</span><br><span class=\"line\">        a = b + c;</span><br><span class=\"line\">        b = a + c;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>列表找规律：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F[1] =  1     F[2] = 1</span><br><span class=\"line\">F[3] =  2     F[4] = 3</span><br><span class=\"line\">F[5] =  5     F[6] = 8</span><br><span class=\"line\">F[7] =  13    F[8] = 21</span><br><span class=\"line\">F[9] =  34    F[10] = 55</span><br><span class=\"line\">F[11] = 89    F[12] = 144</span><br><span class=\"line\">F[13] = 233   F[14] = 377</span><br><span class=\"line\">F[15] = 610   F[16] = 987</span><br><span class=\"line\">F[17] = 1597  F[18] = 2584</span><br></pre></td></tr></table></figure>\n<p>符合题意的有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F[3] = 2</span><br><span class=\"line\">F[6] = 8</span><br><span class=\"line\">F[9] = 34</span><br><span class=\"line\">F[12] = 144</span><br><span class=\"line\">F[11] = 610</span><br><span class=\"line\">F[18] = 2584</span><br></pre></td></tr></table></figure>\n<p>观察可得 <code>F[n] = 4 * F[n-3] + F[n - 6]</code></p>\n<p>正确性可以由斐波那契数列定义推出：</p>\n<p>$$<br>\\begin{align}<br>F_n &amp;= F_{n-1} + F_{n-2} \\\\<br>&amp; = F_{n-2} + F_{n-3} + F_{n-2} = 2 \\times F_{n-2} + F_{n-3} \\\\<br>&amp; = 2 \\times ( F_{n-3} + F_{n-4} ) + F_{n-3} ) = 3 \\times F_{n-3} + 2 \\times F_{n-4} \\\\<br>&amp; = 3 \\times F_{n-3} + F_{n-4} + F_{n-5} + F_{n-6} \\\\<br>&amp; = 4 \\times F_{n-3} + F_{n-6} \\\\<br>\\end{align}<br>$$<br><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">3</span>] = &#123;<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">34</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a[p] &lt; <span class=\"number\">4000000</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += a[p];</span><br><span class=\"line\">        p = (p + <span class=\"number\">1</span>) % <span class=\"number\">3</span>;</span><br><span class=\"line\">        a[p] = <span class=\"number\">4</span> * a[(p + <span class=\"number\">2</span>) % <span class=\"number\">3</span>] + a[(p + <span class=\"number\">1</span>) % <span class=\"number\">3</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>4613732</p>\n<h1 id=\"003-Largest-prime-factor\"><a href=\"#003-Largest-prime-factor\" class=\"headerlink\" title=\"[003]Largest prime factor\"></a>[003]Largest prime factor</h1><p><strong>题意</strong></p>\n<p>求 600851475143 最大的质因子</p>\n<p><strong>思路</strong></p>\n<p>刚开始先暴力的，发现循环判定再循环判定复杂度就太高了。于是用埃氏筛法扫过去就行了。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Eratosthenes</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> TARGET = <span class=\"number\">600851475143L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> upper = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&gt;(<span class=\"built_in\">sqrt</span>(TARGET));</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> *num = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;(upper)];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(num, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>) * <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;(upper));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = ans; i &lt; upper; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i * p &lt; upper)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num[ i * p ] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                ++p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(TARGET % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                ans = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = Eratosthenes();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>6857</p>\n<h1 id=\"004-Largest-palindrome-product\"><a href=\"#004-Largest-palindrome-product\" class=\"headerlink\" title=\"[004]Largest palindrome product\"></a>[004]Largest palindrome product</h1><p><strong>题意</strong></p>\n<p>对于一个回文数，如：9009 = 91 × 99，他是由两个两位数构成的。现在找两个三位数能构成的最大回文数。</p>\n<p><strong>思路</strong></p>\n<p>首先是构造回文数，它符合一下几个规律：</p>\n<ol>\n<li>六位数</li>\n<li>六位数里面最大的</li>\n<li>前三位和后三位对应相同</li>\n</ol>\n<p>由上，我们将回文数按位拆分，枚举前一二三位，做对应就行了。值得一提的是第一位不可能为0，二三位都有可能为0。</p>\n<p><strong>优化</strong></p>\n<p>回文数必然可以被11整除，证明如下： 回文数的形式必然为：</p>\n<blockquote>\n<p>100000a + 10000b + 1000c + 100c + 10b + a<br>=100001a + 10010b + 1100c<br>因为：<br>100001 % 11 = 0<br>10010 % 11 = 0<br>1100 % 11 = 0<br>所以：<br>回文数必然可以被11整除</p>\n</blockquote>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mark = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">9</span>; i &gt;= <span class=\"number\">1</span> &amp;&amp; mark; --i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">9</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; mark; --j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">9</span>; k &gt;= <span class=\"number\">0</span> &amp;&amp; mark; --k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num = i*<span class=\"number\">100</span> + j * <span class=\"number\">10</span> + k;</span><br><span class=\"line\">                num = num * <span class=\"number\">1000</span> + k * <span class=\"number\">100</span> + j * <span class=\"number\">10</span> + i;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">999</span>; t &gt;= <span class=\"number\">100</span> &amp;&amp; mark; --t)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(num % t == <span class=\"number\">0</span> &amp;&amp; num / t &gt;= <span class=\"number\">100</span> &amp;&amp; num / t &lt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                        mark = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>906609</p>\n<h1 id=\"005-Smallest-multiple\"><a href=\"#005-Smallest-multiple\" class=\"headerlink\" title=\"[005]Smallest multiple\"></a>[005]Smallest multiple</h1><p><strong>题意</strong></p>\n<p>2520是最小的能被1-10中每个数字整除的正整数。 最小的能被1-20中每个数整除的正整数是多少？</p>\n<p><strong>思路</strong></p>\n<p>刚开始想直接找到20以内的质数2,3,5,7…相乘得出答案的，后来交了发现不对，尝试了一次，发现在4的时候就不能整除了。后来百度搜了一下，要：</p>\n<ol>\n<li>列出20以内的质数，并求这些质数的小于20的最高次幂</li>\n<li>再将这些质数的最高次幂的积相乘</li>\n</ol>\n<p>于是有了下面的代码。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; s, <span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num % e == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check(s,i))</span><br><span class=\"line\">            s.push_back(i);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">1L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(m * e &lt;= <span class=\"number\">20</span>)</span><br><span class=\"line\">            m *= e;</span><br><span class=\"line\">        ans *= m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>232792560</p>\n"},{"title":"欧拉计划个人题解(006-010)","date":"2018-06-11T13:35:33.000Z","toc":true,"banner":"/images/algorithm/Project-Euler/project-euler-banner.png","thumbnail":"/images/algorithm/Project-Euler/project-euler-thumbnail.png","_content":"\n# [006]Sum square difference\n\n__题意__\n\n计算$(1 + 2 + ... + 100)^2 - (1^2 + 2^2 + ... + 100^2)$的结果。\n\n__思路__\n\n暴力做\n\n__优化__\n\n$$\n(1+2+...+100)^2 = \\left( \\frac{n \\times (n+1)}{2} \\right)^2 \\\\\\\\\n(1^2 + 2^2 + ... + 100^2) = \\frac{n \\times (n + 1) \\times (2n+1)}{6}\n$$\n\n__代码__\n\nC++\\STL\n\n```c++\nint main(void)\n{\n    const int n = 100;\n    int a = n * (n+1) / 2;\n    a *= a;\n    int b = n * (n+1) * (2*n+1) / 6;\n    cout << a - b << endl;\n    return 0;\n}\n```\n\n__答案__\n\n25164150\n\n# [007]10001st prime\n\n__题意__\n\n找第10001个质数。\n\n__思路__\n\n直接筛选，但是判定素数函数有很多优化可以做。\n\n__代码__\n\nC++\\STL\n\n```c++\nbool isprime(int n)\n{\n    if(n == 1)\n        return false;\n    if(n < 4)\n        return true;\n    if(n % 2 == 0)\n        return false;\n    if(n < 9)\n        return true;\n    if(n % 3 == 0)\n        return false;\n    int upper = static_cast<int>(sqrt(n));\n    for(int i = 5; i <= upper;)\n    {\n        if(n % i == 0 || n % (i+2) == 0)\n            return false;\n        i += 6;\n    }\n    return true;\n}\n\nint main(void)\n{\n    int num = 1;\n    int count = 0;\n    int limit = 10001;\n    while(count < limit)\n    {\n        ++num;\n        if(isprime(num))\n            ++count;\n    }\n    cout << num << endl;\n    return 0;\n}\n```\n__答案__\n\n104743\n\n# [008]Largest product in a series\n\n__题意__\n\n有1000个数字，找其中连续的13个数字，求其最大值。\n\n__思路__\n\n直接做，注意对0的特殊处理。\n\n__代码__\n\n```c++\nchar maps[20 * 51];\nint main(void)\n{\n    for(int i = 0; i < 20; ++i)\n        scanf(\"%s\",maps + (i * 50));\n    for(int i = 0; i < 20 * 50; ++i)\n            maps[i] -= '0';\n    long long maxs = -1LL;\n    long long tmp = 1LL;\n\n    int count = 0;\n    for(int i = 0; i < 20 * 50; ++i)\n    {\n        if(maps[i] == 0)\n        {\n            count = 0;\n            tmp = 1LL;\n            continue;\n        }\n        tmp *= maps[i];\n        ++count;\n        if(count > 13)\n        {\n            tmp /= maps[i-13];\n            --count;\n        }\n        if(count == 13)\n        {\n            maxs = max(maxs, tmp);\n        }\n    }\n\n    cout << maxs << endl;\n    return 0;\n}\n```\n__答案__\n\n23514624000\n\n# [009]Special Pythagorean triplet\n\n__题意__\n\n求符合\n\n$$\n\\begin{align}\na^2 + b^2 &= c^2 \\\\\\\\\na + b + c &= 1000 \\\\\\\\\na < b < c\n\\end{align}\n$$\n的$a \\times b \\times c$。\n\n__思路__\n\n易想到，将$c = 1000 - a - b$代换到一式中，然后二重循环扫描得出结果。\n\n于是有下面的代码，\n\nC++\\STL\n\n```c++\nint main(void)\n{\n    for(int b = 1; b < 1000; ++b)\n        for(int a = 1; a < b; ++a)\n            if(1000000 - 2000*(a+b) + 2*a*b == 0)\n            {\n                cout << 1LL * a * b * (1000-a-b) << endl;\n                break;\n            }\n    return 0;\n}\n```\n\n__优化__\n\n翻译节选自欧拉计划官网题解[^1]，许多地方有词不达意的情况。\n\n__9.2 勾股三角形参数化__\n\n一组勾股三角形(a,b,c)当$gcd(a,b,c) = 1$的情况下，被定义为原始/原生的。因为任意勾股三角形有$gcd(a,b) = gcd(b,c) = gcd(c,a)$的性质，而当且仅当$gcd(a,b) = 1$，这样的一个三角形才是原始/原始的。正如古希腊人所知道的，所有原始/原生的勾股三角形可以被表示为\n$$\n\\begin{align}\n(9.1) \\\\\\\\\na &= m^2 - n^2 \\\\\\\\\nb &= 2 \\times m \\times n \\\\\\\\\nc &= m^2 + n^2 \\\\\\\\\n\\end{align}\n$$\n此时$0 < n < m$，也许要交换$a$和$b$使得$a < b$。这些方程总是可以构造出一个勾股三角形，但是当且仅当有确切的一组$m,n$为偶数且$gcd(m,n) = 1$，才会被视作原始/原生的。\n从任意一个勾股三角形你可以取得一个原始/原生的三角形，然后除去一个最大公因数，所以每一个勾股三角形有一个独一无二的表示：\n$$\n\\begin{align}\n(9.2) \\\\\\\\\na &= (m^2 - n^2) \\times d \\\\\\\\\nb &= 2 \\times m \\times n \\times d \\\\\\\\\nc &= (m^2 + n^2) \\times d \\\\\\\\\n\\end{align}\n$$\n此时$0 < n < m$，且$gcd(m,n) = 1$，并且有确切的一组$m,n$为偶数，$d$代表$a,b,c$的最大公因数。\n\n将其参数化后，我们可以得到\n$$\n(9.3) \\\\\\\\\na + b + c = 2 \\times m \\times (m + n) \\times d\n$$\n所以为了找一个勾股三角形(a,b,c) 且 $a + b + c = s$，我们需要找到一个$\\frac{s}{2}$的因子$m (> 1)$ 和一个$\\frac{s}{2m}$奇数因子$k (=m+n)$，同时满足$m < k < 2m$和$gcd(m,k) = 1$，然后设$n = k - m$，$d = \\frac{s}{2mk}$，联立(9.2)，可得出答案。\n\n一个简单恰当的算法实现如下：\n\nC++\\STL\n\n```c++\nint gcd(int a, int b)\n{\n    return (b != 0) ? gcd(b,a%b) : a;\n}\nint main(void)\n{\n    int s2 = 1000 / 2;\n    int mlimit = static_cast<int>( ceil(sqrt(s2)) ) - 1;\n    for(int m = 2; m <= mlimit; ++m)\n        if(s2 % m == 0)\n        {\n            int sm = s2 / m;\n            while(sm % 2 == 0)\n                sm = sm / 2;\n            int k;\n            if(m % 2 == 1)\n                k = m + 2;\n            else\n                k = m + 1;\n            while( k < 2 * m && k <= sm )\n            {\n                if(sm % k == 0 && gcd(k, m) == 1)\n                {\n                    int d = s2 / (k*m);\n                    int n = k - m;\n                    int a = d * (m * m - n * n);\n                    int b = 2 * d * m * n;\n                    int c = d * (m * m + n * n);\n                    printf(\"%d %d %d %d\",a,b,c,a*b*c);\n                    return 0;\n                }\n                k += 2;\n            }\n        }\n    return 0;\n}\n```\n\n\n__答案__\n\n31875000\n\n# [010]Summation of primes\n\n__题意__\n\n计算二百万(2e6)内的所有质数和。\n\n__思路__\n\n埃式筛。\n\n__代码__\n\nC++\\STL\n\n```c++\nvoid sieve(vector<int>& v, const int upper)\n{\n    bool *num = new bool[static_cast<unsigned long long>(upper)];\n    memset(num, false, sizeof(bool) * upper);\n    for(int i = 2; i <= upper; ++i)\n    {\n        if(num[i] == false)\n        {\n            v.push_back(i);\n            int p = 2;\n            while(i * p < upper)\n            {\n                num[i*p] = true;\n                ++p;\n            }\n        }\n    }\n    delete[] num;\n}\nint main(void)\n{\n    vector<int> v;\n    const int upper = 2e6;\n    sieve(v,upper+1);\n    long long sum = 0;\n    for(auto i : v)\n        sum += i;\n    cout << sum << endl;\n    return 0;\n}\n```\n__答案__\n\n142913828922\n\n[^1]:https://projecteuler.net/overview=009","source":"_posts/algorithm/Project-Euler/006-010.md","raw":"---\ntitle: 欧拉计划个人题解(006-010)\ndate: 2018-6-11 21:35:33\ncategories: algorithm\ntags: \n    - Project Euler\n    - algorithm\ntoc: true\nbanner: /images/algorithm/Project-Euler/project-euler-banner.png\nthumbnail: /images/algorithm/Project-Euler/project-euler-thumbnail.png\n---\n\n# [006]Sum square difference\n\n__题意__\n\n计算$(1 + 2 + ... + 100)^2 - (1^2 + 2^2 + ... + 100^2)$的结果。\n\n__思路__\n\n暴力做\n\n__优化__\n\n$$\n(1+2+...+100)^2 = \\left( \\frac{n \\times (n+1)}{2} \\right)^2 \\\\\\\\\n(1^2 + 2^2 + ... + 100^2) = \\frac{n \\times (n + 1) \\times (2n+1)}{6}\n$$\n\n__代码__\n\nC++\\STL\n\n```c++\nint main(void)\n{\n    const int n = 100;\n    int a = n * (n+1) / 2;\n    a *= a;\n    int b = n * (n+1) * (2*n+1) / 6;\n    cout << a - b << endl;\n    return 0;\n}\n```\n\n__答案__\n\n25164150\n\n# [007]10001st prime\n\n__题意__\n\n找第10001个质数。\n\n__思路__\n\n直接筛选，但是判定素数函数有很多优化可以做。\n\n__代码__\n\nC++\\STL\n\n```c++\nbool isprime(int n)\n{\n    if(n == 1)\n        return false;\n    if(n < 4)\n        return true;\n    if(n % 2 == 0)\n        return false;\n    if(n < 9)\n        return true;\n    if(n % 3 == 0)\n        return false;\n    int upper = static_cast<int>(sqrt(n));\n    for(int i = 5; i <= upper;)\n    {\n        if(n % i == 0 || n % (i+2) == 0)\n            return false;\n        i += 6;\n    }\n    return true;\n}\n\nint main(void)\n{\n    int num = 1;\n    int count = 0;\n    int limit = 10001;\n    while(count < limit)\n    {\n        ++num;\n        if(isprime(num))\n            ++count;\n    }\n    cout << num << endl;\n    return 0;\n}\n```\n__答案__\n\n104743\n\n# [008]Largest product in a series\n\n__题意__\n\n有1000个数字，找其中连续的13个数字，求其最大值。\n\n__思路__\n\n直接做，注意对0的特殊处理。\n\n__代码__\n\n```c++\nchar maps[20 * 51];\nint main(void)\n{\n    for(int i = 0; i < 20; ++i)\n        scanf(\"%s\",maps + (i * 50));\n    for(int i = 0; i < 20 * 50; ++i)\n            maps[i] -= '0';\n    long long maxs = -1LL;\n    long long tmp = 1LL;\n\n    int count = 0;\n    for(int i = 0; i < 20 * 50; ++i)\n    {\n        if(maps[i] == 0)\n        {\n            count = 0;\n            tmp = 1LL;\n            continue;\n        }\n        tmp *= maps[i];\n        ++count;\n        if(count > 13)\n        {\n            tmp /= maps[i-13];\n            --count;\n        }\n        if(count == 13)\n        {\n            maxs = max(maxs, tmp);\n        }\n    }\n\n    cout << maxs << endl;\n    return 0;\n}\n```\n__答案__\n\n23514624000\n\n# [009]Special Pythagorean triplet\n\n__题意__\n\n求符合\n\n$$\n\\begin{align}\na^2 + b^2 &= c^2 \\\\\\\\\na + b + c &= 1000 \\\\\\\\\na < b < c\n\\end{align}\n$$\n的$a \\times b \\times c$。\n\n__思路__\n\n易想到，将$c = 1000 - a - b$代换到一式中，然后二重循环扫描得出结果。\n\n于是有下面的代码，\n\nC++\\STL\n\n```c++\nint main(void)\n{\n    for(int b = 1; b < 1000; ++b)\n        for(int a = 1; a < b; ++a)\n            if(1000000 - 2000*(a+b) + 2*a*b == 0)\n            {\n                cout << 1LL * a * b * (1000-a-b) << endl;\n                break;\n            }\n    return 0;\n}\n```\n\n__优化__\n\n翻译节选自欧拉计划官网题解[^1]，许多地方有词不达意的情况。\n\n__9.2 勾股三角形参数化__\n\n一组勾股三角形(a,b,c)当$gcd(a,b,c) = 1$的情况下，被定义为原始/原生的。因为任意勾股三角形有$gcd(a,b) = gcd(b,c) = gcd(c,a)$的性质，而当且仅当$gcd(a,b) = 1$，这样的一个三角形才是原始/原始的。正如古希腊人所知道的，所有原始/原生的勾股三角形可以被表示为\n$$\n\\begin{align}\n(9.1) \\\\\\\\\na &= m^2 - n^2 \\\\\\\\\nb &= 2 \\times m \\times n \\\\\\\\\nc &= m^2 + n^2 \\\\\\\\\n\\end{align}\n$$\n此时$0 < n < m$，也许要交换$a$和$b$使得$a < b$。这些方程总是可以构造出一个勾股三角形，但是当且仅当有确切的一组$m,n$为偶数且$gcd(m,n) = 1$，才会被视作原始/原生的。\n从任意一个勾股三角形你可以取得一个原始/原生的三角形，然后除去一个最大公因数，所以每一个勾股三角形有一个独一无二的表示：\n$$\n\\begin{align}\n(9.2) \\\\\\\\\na &= (m^2 - n^2) \\times d \\\\\\\\\nb &= 2 \\times m \\times n \\times d \\\\\\\\\nc &= (m^2 + n^2) \\times d \\\\\\\\\n\\end{align}\n$$\n此时$0 < n < m$，且$gcd(m,n) = 1$，并且有确切的一组$m,n$为偶数，$d$代表$a,b,c$的最大公因数。\n\n将其参数化后，我们可以得到\n$$\n(9.3) \\\\\\\\\na + b + c = 2 \\times m \\times (m + n) \\times d\n$$\n所以为了找一个勾股三角形(a,b,c) 且 $a + b + c = s$，我们需要找到一个$\\frac{s}{2}$的因子$m (> 1)$ 和一个$\\frac{s}{2m}$奇数因子$k (=m+n)$，同时满足$m < k < 2m$和$gcd(m,k) = 1$，然后设$n = k - m$，$d = \\frac{s}{2mk}$，联立(9.2)，可得出答案。\n\n一个简单恰当的算法实现如下：\n\nC++\\STL\n\n```c++\nint gcd(int a, int b)\n{\n    return (b != 0) ? gcd(b,a%b) : a;\n}\nint main(void)\n{\n    int s2 = 1000 / 2;\n    int mlimit = static_cast<int>( ceil(sqrt(s2)) ) - 1;\n    for(int m = 2; m <= mlimit; ++m)\n        if(s2 % m == 0)\n        {\n            int sm = s2 / m;\n            while(sm % 2 == 0)\n                sm = sm / 2;\n            int k;\n            if(m % 2 == 1)\n                k = m + 2;\n            else\n                k = m + 1;\n            while( k < 2 * m && k <= sm )\n            {\n                if(sm % k == 0 && gcd(k, m) == 1)\n                {\n                    int d = s2 / (k*m);\n                    int n = k - m;\n                    int a = d * (m * m - n * n);\n                    int b = 2 * d * m * n;\n                    int c = d * (m * m + n * n);\n                    printf(\"%d %d %d %d\",a,b,c,a*b*c);\n                    return 0;\n                }\n                k += 2;\n            }\n        }\n    return 0;\n}\n```\n\n\n__答案__\n\n31875000\n\n# [010]Summation of primes\n\n__题意__\n\n计算二百万(2e6)内的所有质数和。\n\n__思路__\n\n埃式筛。\n\n__代码__\n\nC++\\STL\n\n```c++\nvoid sieve(vector<int>& v, const int upper)\n{\n    bool *num = new bool[static_cast<unsigned long long>(upper)];\n    memset(num, false, sizeof(bool) * upper);\n    for(int i = 2; i <= upper; ++i)\n    {\n        if(num[i] == false)\n        {\n            v.push_back(i);\n            int p = 2;\n            while(i * p < upper)\n            {\n                num[i*p] = true;\n                ++p;\n            }\n        }\n    }\n    delete[] num;\n}\nint main(void)\n{\n    vector<int> v;\n    const int upper = 2e6;\n    sieve(v,upper+1);\n    long long sum = 0;\n    for(auto i : v)\n        sum += i;\n    cout << sum << endl;\n    return 0;\n}\n```\n__答案__\n\n142913828922\n\n[^1]:https://projecteuler.net/overview=009","slug":"algorithm/Project-Euler/006-010","published":1,"updated":"2018-07-10T17:31:12.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zfi000uektzn7kncvhj","content":"<h1 id=\"006-Sum-square-difference\"><a href=\"#006-Sum-square-difference\" class=\"headerlink\" title=\"[006]Sum square difference\"></a>[006]Sum square difference</h1><p><strong>题意</strong></p>\n<p>计算$(1 + 2 + … + 100)^2 - (1^2 + 2^2 + … + 100^2)$的结果。</p>\n<p><strong>思路</strong></p>\n<p>暴力做</p>\n<p><strong>优化</strong></p>\n<p>$$<br>(1+2+…+100)^2 = \\left( \\frac{n \\times (n+1)}{2} \\right)^2 \\\\<br>(1^2 + 2^2 + … + 100^2) = \\frac{n \\times (n + 1) \\times (2n+1)}{6}<br>$$</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = n * (n+<span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    a *= a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = n * (n+<span class=\"number\">1</span>) * (<span class=\"number\">2</span>*n+<span class=\"number\">1</span>) / <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a - b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>25164150</p>\n<h1 id=\"007-10001st-prime\"><a href=\"#007-10001st-prime\" class=\"headerlink\" title=\"[007]10001st prime\"></a>[007]10001st prime</h1><p><strong>题意</strong></p>\n<p>找第10001个质数。</p>\n<p><strong>思路</strong></p>\n<p>直接筛选，但是判定素数函数有很多优化可以做。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isprime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">9</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> upper = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"built_in\">sqrt</span>(n));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">5</span>; i &lt;= upper;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n % i == <span class=\"number\">0</span> || n % (i+<span class=\"number\">2</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        i += <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit = <span class=\"number\">10001</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count &lt; limit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++num;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime(num))</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>104743</p>\n<h1 id=\"008-Largest-product-in-a-series\"><a href=\"#008-Largest-product-in-a-series\" class=\"headerlink\" title=\"[008]Largest product in a series\"></a>[008]Largest product in a series</h1><p><strong>题意</strong></p>\n<p>有1000个数字，找其中连续的13个数字，求其最大值。</p>\n<p><strong>思路</strong></p>\n<p>直接做，注意对0的特殊处理。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> maps[<span class=\"number\">20</span> * <span class=\"number\">51</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,maps + (i * <span class=\"number\">50</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span> * <span class=\"number\">50</span>; ++i)</span><br><span class=\"line\">            maps[i] -= <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> maxs = <span class=\"number\">-1L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = <span class=\"number\">1L</span>L;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span> * <span class=\"number\">50</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maps[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            tmp = <span class=\"number\">1L</span>L;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tmp *= maps[i];</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">13</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp /= maps[i<span class=\"number\">-13</span>];</span><br><span class=\"line\">            --count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count == <span class=\"number\">13</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maxs = max(maxs, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; maxs &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>23514624000</p>\n<h1 id=\"009-Special-Pythagorean-triplet\"><a href=\"#009-Special-Pythagorean-triplet\" class=\"headerlink\" title=\"[009]Special Pythagorean triplet\"></a>[009]Special Pythagorean triplet</h1><p><strong>题意</strong></p>\n<p>求符合</p>\n<p>$$<br>\\begin{align}<br>a^2 + b^2 &amp;= c^2 \\\\<br>a + b + c &amp;= 1000 \\\\<br>a &lt; b &lt; c<br>\\end{align}<br>$$<br>的$a \\times b \\times c$。</p>\n<p><strong>思路</strong></p>\n<p>易想到，将$c = 1000 - a - b$代换到一式中，然后二重循环扫描得出结果。</p>\n<p>于是有下面的代码，</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> b = <span class=\"number\">1</span>; b &lt; <span class=\"number\">1000</span>; ++b)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>; a &lt; b; ++a)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">1000000</span> - <span class=\"number\">2000</span>*(a+b) + <span class=\"number\">2</span>*a*b == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">1L</span>L * a * b * (<span class=\"number\">1000</span>-a-b) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>翻译节选自欧拉计划官网题解<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>，许多地方有词不达意的情况。</p>\n<p><strong>9.2 勾股三角形参数化</strong></p>\n<p>一组勾股三角形(a,b,c)当$gcd(a,b,c) = 1$的情况下，被定义为原始/原生的。因为任意勾股三角形有$gcd(a,b) = gcd(b,c) = gcd(c,a)$的性质，而当且仅当$gcd(a,b) = 1$，这样的一个三角形才是原始/原始的。正如古希腊人所知道的，所有原始/原生的勾股三角形可以被表示为<br>$$<br>\\begin{align}<br>(9.1) \\\\<br>a &amp;= m^2 - n^2 \\\\<br>b &amp;= 2 \\times m \\times n \\\\<br>c &amp;= m^2 + n^2 \\\\<br>\\end{align}<br>$$<br>此时$0 &lt; n &lt; m$，也许要交换$a$和$b$使得$a &lt; b$。这些方程总是可以构造出一个勾股三角形，但是当且仅当有确切的一组$m,n$为偶数且$gcd(m,n) = 1$，才会被视作原始/原生的。<br>从任意一个勾股三角形你可以取得一个原始/原生的三角形，然后除去一个最大公因数，所以每一个勾股三角形有一个独一无二的表示：<br>$$<br>\\begin{align}<br>(9.2) \\\\<br>a &amp;= (m^2 - n^2) \\times d \\\\<br>b &amp;= 2 \\times m \\times n \\times d \\\\<br>c &amp;= (m^2 + n^2) \\times d \\\\<br>\\end{align}<br>$$<br>此时$0 &lt; n &lt; m$，且$gcd(m,n) = 1$，并且有确切的一组$m,n$为偶数，$d$代表$a,b,c$的最大公因数。</p>\n<p>将其参数化后，我们可以得到<br>$$<br>(9.3) \\\\<br>a + b + c = 2 \\times m \\times (m + n) \\times d<br>$$<br>所以为了找一个勾股三角形(a,b,c) 且 $a + b + c = s$，我们需要找到一个$\\frac{s}{2}$的因子$m (&gt; 1)$ 和一个$\\frac{s}{2m}$奇数因子$k (=m+n)$，同时满足$m &lt; k &lt; 2m$和$gcd(m,k) = 1$，然后设$n = k - m$，$d = \\frac{s}{2mk}$，联立(9.2)，可得出答案。</p>\n<p>一个简单恰当的算法实现如下：</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b != <span class=\"number\">0</span>) ? gcd(b,a%b) : a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s2 = <span class=\"number\">1000</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mlimit = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;( <span class=\"built_in\">ceil</span>(<span class=\"built_in\">sqrt</span>(s2)) ) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = <span class=\"number\">2</span>; m &lt;= mlimit; ++m)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2 % m == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sm = s2 / m;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(sm % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                sm = sm / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">                k = m + <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                k = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>( k &lt; <span class=\"number\">2</span> * m &amp;&amp; k &lt;= sm )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sm % k == <span class=\"number\">0</span> &amp;&amp; gcd(k, m) == <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> d = s2 / (k*m);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = k - m;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> a = d * (m * m - n * n);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span> * d * m * n;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> c = d * (m * m + n * n);</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d %d\"</span>,a,b,c,a*b*c);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                k += <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>31875000</p>\n<h1 id=\"010-Summation-of-primes\"><a href=\"#010-Summation-of-primes\" class=\"headerlink\" title=\"[010]Summation of primes\"></a>[010]Summation of primes</h1><p><strong>题意</strong></p>\n<p>计算二百万(2e6)内的所有质数和。</p>\n<p><strong>思路</strong></p>\n<p>埃式筛。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sieve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> upper)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> *num = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;(upper)];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(num, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>) * upper);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= upper; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v.push_back(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i * p &lt; upper)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num[i*p] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                ++p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> upper = <span class=\"number\">2e6</span>;</span><br><span class=\"line\">    sieve(v,upper+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : v)</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>142913828922</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><a href=\"https://projecteuler.net/overview=009\" target=\"_blank\" rel=\"noopener\">https://projecteuler.net/overview=009</a></span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"006-Sum-square-difference\"><a href=\"#006-Sum-square-difference\" class=\"headerlink\" title=\"[006]Sum square difference\"></a>[006]Sum square difference</h1><p><strong>题意</strong></p>\n<p>计算$(1 + 2 + … + 100)^2 - (1^2 + 2^2 + … + 100^2)$的结果。</p>\n<p><strong>思路</strong></p>\n<p>暴力做</p>\n<p><strong>优化</strong></p>\n<p>$$<br>(1+2+…+100)^2 = \\left( \\frac{n \\times (n+1)}{2} \\right)^2 \\\\<br>(1^2 + 2^2 + … + 100^2) = \\frac{n \\times (n + 1) \\times (2n+1)}{6}<br>$$</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = n * (n+<span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    a *= a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = n * (n+<span class=\"number\">1</span>) * (<span class=\"number\">2</span>*n+<span class=\"number\">1</span>) / <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a - b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>25164150</p>\n<h1 id=\"007-10001st-prime\"><a href=\"#007-10001st-prime\" class=\"headerlink\" title=\"[007]10001st prime\"></a>[007]10001st prime</h1><p><strong>题意</strong></p>\n<p>找第10001个质数。</p>\n<p><strong>思路</strong></p>\n<p>直接筛选，但是判定素数函数有很多优化可以做。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isprime</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">9</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">3</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> upper = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"built_in\">sqrt</span>(n));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">5</span>; i &lt;= upper;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n % i == <span class=\"number\">0</span> || n % (i+<span class=\"number\">2</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        i += <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit = <span class=\"number\">10001</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count &lt; limit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++num;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isprime(num))</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>104743</p>\n<h1 id=\"008-Largest-product-in-a-series\"><a href=\"#008-Largest-product-in-a-series\" class=\"headerlink\" title=\"[008]Largest product in a series\"></a>[008]Largest product in a series</h1><p><strong>题意</strong></p>\n<p>有1000个数字，找其中连续的13个数字，求其最大值。</p>\n<p><strong>思路</strong></p>\n<p>直接做，注意对0的特殊处理。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> maps[<span class=\"number\">20</span> * <span class=\"number\">51</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,maps + (i * <span class=\"number\">50</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span> * <span class=\"number\">50</span>; ++i)</span><br><span class=\"line\">            maps[i] -= <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> maxs = <span class=\"number\">-1L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = <span class=\"number\">1L</span>L;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span> * <span class=\"number\">50</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maps[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            tmp = <span class=\"number\">1L</span>L;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tmp *= maps[i];</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">13</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp /= maps[i<span class=\"number\">-13</span>];</span><br><span class=\"line\">            --count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count == <span class=\"number\">13</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maxs = max(maxs, tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; maxs &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>23514624000</p>\n<h1 id=\"009-Special-Pythagorean-triplet\"><a href=\"#009-Special-Pythagorean-triplet\" class=\"headerlink\" title=\"[009]Special Pythagorean triplet\"></a>[009]Special Pythagorean triplet</h1><p><strong>题意</strong></p>\n<p>求符合</p>\n<p>$$<br>\\begin{align}<br>a^2 + b^2 &amp;= c^2 \\\\<br>a + b + c &amp;= 1000 \\\\<br>a &lt; b &lt; c<br>\\end{align}<br>$$<br>的$a \\times b \\times c$。</p>\n<p><strong>思路</strong></p>\n<p>易想到，将$c = 1000 - a - b$代换到一式中，然后二重循环扫描得出结果。</p>\n<p>于是有下面的代码，</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> b = <span class=\"number\">1</span>; b &lt; <span class=\"number\">1000</span>; ++b)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>; a &lt; b; ++a)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">1000000</span> - <span class=\"number\">2000</span>*(a+b) + <span class=\"number\">2</span>*a*b == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">1L</span>L * a * b * (<span class=\"number\">1000</span>-a-b) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>翻译节选自欧拉计划官网题解<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>，许多地方有词不达意的情况。</p>\n<p><strong>9.2 勾股三角形参数化</strong></p>\n<p>一组勾股三角形(a,b,c)当$gcd(a,b,c) = 1$的情况下，被定义为原始/原生的。因为任意勾股三角形有$gcd(a,b) = gcd(b,c) = gcd(c,a)$的性质，而当且仅当$gcd(a,b) = 1$，这样的一个三角形才是原始/原始的。正如古希腊人所知道的，所有原始/原生的勾股三角形可以被表示为<br>$$<br>\\begin{align}<br>(9.1) \\\\<br>a &amp;= m^2 - n^2 \\\\<br>b &amp;= 2 \\times m \\times n \\\\<br>c &amp;= m^2 + n^2 \\\\<br>\\end{align}<br>$$<br>此时$0 &lt; n &lt; m$，也许要交换$a$和$b$使得$a &lt; b$。这些方程总是可以构造出一个勾股三角形，但是当且仅当有确切的一组$m,n$为偶数且$gcd(m,n) = 1$，才会被视作原始/原生的。<br>从任意一个勾股三角形你可以取得一个原始/原生的三角形，然后除去一个最大公因数，所以每一个勾股三角形有一个独一无二的表示：<br>$$<br>\\begin{align}<br>(9.2) \\\\<br>a &amp;= (m^2 - n^2) \\times d \\\\<br>b &amp;= 2 \\times m \\times n \\times d \\\\<br>c &amp;= (m^2 + n^2) \\times d \\\\<br>\\end{align}<br>$$<br>此时$0 &lt; n &lt; m$，且$gcd(m,n) = 1$，并且有确切的一组$m,n$为偶数，$d$代表$a,b,c$的最大公因数。</p>\n<p>将其参数化后，我们可以得到<br>$$<br>(9.3) \\\\<br>a + b + c = 2 \\times m \\times (m + n) \\times d<br>$$<br>所以为了找一个勾股三角形(a,b,c) 且 $a + b + c = s$，我们需要找到一个$\\frac{s}{2}$的因子$m (&gt; 1)$ 和一个$\\frac{s}{2m}$奇数因子$k (=m+n)$，同时满足$m &lt; k &lt; 2m$和$gcd(m,k) = 1$，然后设$n = k - m$，$d = \\frac{s}{2mk}$，联立(9.2)，可得出答案。</p>\n<p>一个简单恰当的算法实现如下：</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b != <span class=\"number\">0</span>) ? gcd(b,a%b) : a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s2 = <span class=\"number\">1000</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mlimit = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;( <span class=\"built_in\">ceil</span>(<span class=\"built_in\">sqrt</span>(s2)) ) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = <span class=\"number\">2</span>; m &lt;= mlimit; ++m)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2 % m == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sm = s2 / m;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(sm % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                sm = sm / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">                k = m + <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                k = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>( k &lt; <span class=\"number\">2</span> * m &amp;&amp; k &lt;= sm )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sm % k == <span class=\"number\">0</span> &amp;&amp; gcd(k, m) == <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> d = s2 / (k*m);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> n = k - m;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> a = d * (m * m - n * n);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span> * d * m * n;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> c = d * (m * m + n * n);</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d %d\"</span>,a,b,c,a*b*c);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                k += <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>31875000</p>\n<h1 id=\"010-Summation-of-primes\"><a href=\"#010-Summation-of-primes\" class=\"headerlink\" title=\"[010]Summation of primes\"></a>[010]Summation of primes</h1><p><strong>题意</strong></p>\n<p>计算二百万(2e6)内的所有质数和。</p>\n<p><strong>思路</strong></p>\n<p>埃式筛。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sieve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> upper)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> *num = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;(upper)];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(num, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>) * upper);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= upper; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v.push_back(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i * p &lt; upper)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num[i*p] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                ++p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> upper = <span class=\"number\">2e6</span>;</span><br><span class=\"line\">    sieve(v,upper+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : v)</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>142913828922</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><a href=\"https://projecteuler.net/overview=009\" target=\"_blank\" rel=\"noopener\">https://projecteuler.net/overview=009</a></span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"欧拉计划个人题解(021-025)","date":"2018-07-03T20:43:18.000Z","toc":true,"banner":"/images/algorithm/Project-Euler/project-euler-banner.png","thumbnail":"/images/algorithm/Project-Euler/project-euler-thumbnail.png","_content":"\n# [021]Amicable numbers\n\n__题意__\n\n在正整数数域内，有一个数x，他的所有因子之和（不包括自身），等于另一个数y（$y \\neq x$）；同时，y的所有因子和（不包括自身），等于数x。则x和y称为亲和数对，x和y都属于亲和数。\n\n现求1到10000内所有亲和数之和。\n\n__思路__\n\n对每个数进行整数乘法，统计到对应数的因子和，然后再进行线性扫描即可。\n\n__代码__\n\nC++\\STL\n\n```c++\nconst int MAXN = 10000;\nint num[MAXN + 1];\nint main(void)\n{\n    memset(num,0,sizeof(num));\n    for(int i = 1; i <= MAXN; ++i)\n    {\n        for(int j = i * 2; j <= MAXN; j += i)\n            num[j] += i;\n    }\n    int ans = 0;\n    for(int i = 1; i <= MAXN; ++i)\n    {\n        if(num[i] <= MAXN && num[ num[i] ] == i && num[i] != i) // \"num[i] != i\" is important\n            ans += i;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n31626\n\n# [022]Names scores\n\n__题意__\n\n给一个只包含大写英文的名(first name)文件，根据他们的位置，计算他们的价值，他们的价值定义为：每一位字母的在字母表中的序号之和与该姓名在所有名中的位置之乘积。\n现求他们的价值和。\n\n\n__思路__\n\n读取直接做，C++的格式化读入还是比较麻烦。\n\n__代码__\n\nC++\\STL\n\n```c++\nstring next(ifstream& in)\n{\n    vector<char> buffer;\n    char tmp = -1;\n    while(in >> tmp && tmp != '\"');\n    if(tmp == -1)\n        return string(1,'\\0');\n    in >> tmp;\n    do{\n        buffer.emplace_back(tmp); // There would not read '\"' into buffer.\n        in >> tmp;\n    }while(tmp != '\"');\n    string str(buffer.size(), '\\0');\n    auto viter = buffer.begin();\n    auto siter = str.begin();\n    while(viter != buffer.end() && siter != str.end())\n        *siter++ = *viter++;\n    return str;\n}\nint main()\n{\n\n    ifstream dataStreamer;\n    dataStreamer.open(\"p022_names.txt\", ios::in, _SH_DENYWR);\n    if(!dataStreamer)\n    {\n            cout<<\"文件读错误\";\n            system(\"pause\");\n            exit(1);\n    }\n\n    set<string> s;\n    while(true)\n    {\n        string str = next(dataStreamer);\n        if(str.size() == 1)\n            break;\n        s.insert(str);\n    }\n    dataStreamer.close();\n    int ans = 0;\n    {\n        int cnt = 1;\n        for(string e : s)\n        {\n            int tmp = 0;\n            for(char c : e)\n               tmp += c - 'A' + 1;\n            ans += cnt * tmp;\n            ++cnt;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n871198282\n\n# [023]Non-abundant sums\n\n__题意__\n\n28的因数为1，2，4，7，14。1+2+4+7+14=28，称28为完美数。 \n已知n，其因数和sum大于n，称n为多余数。12是最小的多余数，24是最小得可以有两个多余数相加。超过28123的任何数都可以写成两个多余数相加。 \n那么找出所有的无法由两个多余数组成的正整数之和。 \n\n__思路__\n\n先建一个数组确认有哪些是多余数，再建一个数组确认这些多余数可以组成什么数，注意一个数可以被两个同样的多余数相加得到。\n\n__代码__\n\nC++\\STL\n\n```c++\nint abundantNumberCheck[28123 + 1];\nbool abundantNumberMixed[28123 + 1];\nint main()\n{\n    memset(abundantNumberCheck, 0, sizeof(abundantNumberCheck));\n    memset(abundantNumberMixed, 0, sizeof(abundantNumberMixed));\n    vector<int> abunantNumber;\n    for(int i = 2;i <= 28123; ++i)\n    {\n        for(int j = i * 2; j <= 28123; j += i)\n            abundantNumberCheck[j] += i;\n        if(abundantNumberCheck[i] > i)\n            abunantNumber.push_back(i);\n    }\n\n    for(size_t v1 = 0; v1 < abunantNumber.size(); ++v1)\n        for(size_t v2 = v1; v2 < abunantNumber.size(); ++v2)  // it means that a number can be expressed two same numbers\n        {\n            if(abunantNumber[v1] + abunantNumber[v2] > 28123)\n                break;\n            abundantNumberMixed[ abunantNumber[v1] + abunantNumber[v2] ] = true;\n        }\n    int sum = 0;\n    for(int i = 1; i < 28123 + 1; ++i)\n    {\n        if(abundantNumberMixed[i] == false)\n            sum += i;\n    }\n    cout << sum << endl;\n    return 0;\n}\n\n```\n__答案__\n\n4179871\n\n# [024]Lexicographic permutations\n\n__题意__\n\n找0、1、2、3、4、5、6、7、8、9这些数组合成一个数进行字典序排序后第一百万个数。\n\n__思路__\n\nDFS，先确认第一个数，这样可以算出后面有多少种情况，若第一百万不在里面就要调整第一个数，依次推类直到最后一个数字。\n\n__代码__\n\nC++\\STL\n\n```c++\nconst int TARGET = 1e6;\nconst int RANGE = 10;\nint getPro(int n)\n{\n    int ans = 1;\n    for(int i = n; i > 1; --i)\n        ans *= i;\n    return ans;\n}\nlist<int> num;\nvoid dfs(int target, int p, queue<int> &s)\n{\n    if(p == 1)\n    {\n        s.push(*num.begin());\n        return ;\n    }\n    int part = getPro(p-1);\n    cout << \"part\" << part << endl;\n    auto i = num.begin();\n    for(;i != num.end(); ++i)\n        if(target <= part)\n        {\n            cout << *i << \"b\" << endl;\n            break;\n        }\n        else\n            target -= part;\n    s.push(*i);\n    num.erase(i);\n    dfs(target, p-1,s);\n}\n\nint main(void)\n{\n    queue<int> s;\n    for(int i = 0; i < RANGE; ++i)\n        num.push_back(i);\n    dfs(TARGET, RANGE, s);\n    long long ans = 0;\n    while(!s.empty())\n    {\n        cout << s.front() << \"xxx\" << endl;\n        ans = ans * 10 + s.front();\n        s.pop();\n    }\n    cout << setfill('0') << setw(10) << ans << endl;\n    return 0;\n}\n```\n\n\n__答案__\n\n2783915460\n\n# [025]Lattice paths\n\n__题意__\n\n斐波那契数列：\n\n$$\nF_1 = 1 \\\\\\\\\nF_2 = 1 \\\\\\\\\nF_3 = 2 \\\\\\\\\nF_n = F_{n-1} + F_{n-2} \\\\\\\\\n$$\n先要你求x，$F_x$的数位数第一次超过1000。\n\n__思路__\n\n高精度直接求就行，用我之前的模版，此处略模版细节。\n\n__代码__\n\nC++\\STL\n\n```c++\nint main()\n{\n    BigInt f[] = {BigInt::One(), BigInt::One(), BigInt::One()};\n    int cnt = 0;\n    while(f[cnt % 3].size() < 1000)\n    {\n        f[cnt % 3] = f[(cnt+1) % 3] + f[(cnt+2) % 3];\n        ++cnt;\n    }\n    cout << cnt << endl;\n    return 0;\n}\n```\n\n__优化__\n\n自我考虑的，尚未实现：\n\n已知 $log_{10}x$ 可以求x这个数字在十进制下的位数，我们又已知斐波那契数列的通项公式 $f(x)$ ，则 $1000 < log_{10}f(x)$ ，此时的x就是所求答案，但是斐波那契的 $(1+\\sqrt{5})^x - (1-\\sqrt{5})^x$ 我无法化成一个数字，将x这个项数用log的公式换下来。\n\n__答案__\n\n4782","source":"_posts/algorithm/Project-Euler/021-025.md","raw":"---\ntitle: 欧拉计划个人题解(021-025)\ndate: 2018-7-4 04:43:18\ncategories: algorithm\ntags: \n    - Project Euler\n    - algorithm\ntoc: true\nbanner: /images/algorithm/Project-Euler/project-euler-banner.png\nthumbnail: /images/algorithm/Project-Euler/project-euler-thumbnail.png\n---\n\n# [021]Amicable numbers\n\n__题意__\n\n在正整数数域内，有一个数x，他的所有因子之和（不包括自身），等于另一个数y（$y \\neq x$）；同时，y的所有因子和（不包括自身），等于数x。则x和y称为亲和数对，x和y都属于亲和数。\n\n现求1到10000内所有亲和数之和。\n\n__思路__\n\n对每个数进行整数乘法，统计到对应数的因子和，然后再进行线性扫描即可。\n\n__代码__\n\nC++\\STL\n\n```c++\nconst int MAXN = 10000;\nint num[MAXN + 1];\nint main(void)\n{\n    memset(num,0,sizeof(num));\n    for(int i = 1; i <= MAXN; ++i)\n    {\n        for(int j = i * 2; j <= MAXN; j += i)\n            num[j] += i;\n    }\n    int ans = 0;\n    for(int i = 1; i <= MAXN; ++i)\n    {\n        if(num[i] <= MAXN && num[ num[i] ] == i && num[i] != i) // \"num[i] != i\" is important\n            ans += i;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n31626\n\n# [022]Names scores\n\n__题意__\n\n给一个只包含大写英文的名(first name)文件，根据他们的位置，计算他们的价值，他们的价值定义为：每一位字母的在字母表中的序号之和与该姓名在所有名中的位置之乘积。\n现求他们的价值和。\n\n\n__思路__\n\n读取直接做，C++的格式化读入还是比较麻烦。\n\n__代码__\n\nC++\\STL\n\n```c++\nstring next(ifstream& in)\n{\n    vector<char> buffer;\n    char tmp = -1;\n    while(in >> tmp && tmp != '\"');\n    if(tmp == -1)\n        return string(1,'\\0');\n    in >> tmp;\n    do{\n        buffer.emplace_back(tmp); // There would not read '\"' into buffer.\n        in >> tmp;\n    }while(tmp != '\"');\n    string str(buffer.size(), '\\0');\n    auto viter = buffer.begin();\n    auto siter = str.begin();\n    while(viter != buffer.end() && siter != str.end())\n        *siter++ = *viter++;\n    return str;\n}\nint main()\n{\n\n    ifstream dataStreamer;\n    dataStreamer.open(\"p022_names.txt\", ios::in, _SH_DENYWR);\n    if(!dataStreamer)\n    {\n            cout<<\"文件读错误\";\n            system(\"pause\");\n            exit(1);\n    }\n\n    set<string> s;\n    while(true)\n    {\n        string str = next(dataStreamer);\n        if(str.size() == 1)\n            break;\n        s.insert(str);\n    }\n    dataStreamer.close();\n    int ans = 0;\n    {\n        int cnt = 1;\n        for(string e : s)\n        {\n            int tmp = 0;\n            for(char c : e)\n               tmp += c - 'A' + 1;\n            ans += cnt * tmp;\n            ++cnt;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n871198282\n\n# [023]Non-abundant sums\n\n__题意__\n\n28的因数为1，2，4，7，14。1+2+4+7+14=28，称28为完美数。 \n已知n，其因数和sum大于n，称n为多余数。12是最小的多余数，24是最小得可以有两个多余数相加。超过28123的任何数都可以写成两个多余数相加。 \n那么找出所有的无法由两个多余数组成的正整数之和。 \n\n__思路__\n\n先建一个数组确认有哪些是多余数，再建一个数组确认这些多余数可以组成什么数，注意一个数可以被两个同样的多余数相加得到。\n\n__代码__\n\nC++\\STL\n\n```c++\nint abundantNumberCheck[28123 + 1];\nbool abundantNumberMixed[28123 + 1];\nint main()\n{\n    memset(abundantNumberCheck, 0, sizeof(abundantNumberCheck));\n    memset(abundantNumberMixed, 0, sizeof(abundantNumberMixed));\n    vector<int> abunantNumber;\n    for(int i = 2;i <= 28123; ++i)\n    {\n        for(int j = i * 2; j <= 28123; j += i)\n            abundantNumberCheck[j] += i;\n        if(abundantNumberCheck[i] > i)\n            abunantNumber.push_back(i);\n    }\n\n    for(size_t v1 = 0; v1 < abunantNumber.size(); ++v1)\n        for(size_t v2 = v1; v2 < abunantNumber.size(); ++v2)  // it means that a number can be expressed two same numbers\n        {\n            if(abunantNumber[v1] + abunantNumber[v2] > 28123)\n                break;\n            abundantNumberMixed[ abunantNumber[v1] + abunantNumber[v2] ] = true;\n        }\n    int sum = 0;\n    for(int i = 1; i < 28123 + 1; ++i)\n    {\n        if(abundantNumberMixed[i] == false)\n            sum += i;\n    }\n    cout << sum << endl;\n    return 0;\n}\n\n```\n__答案__\n\n4179871\n\n# [024]Lexicographic permutations\n\n__题意__\n\n找0、1、2、3、4、5、6、7、8、9这些数组合成一个数进行字典序排序后第一百万个数。\n\n__思路__\n\nDFS，先确认第一个数，这样可以算出后面有多少种情况，若第一百万不在里面就要调整第一个数，依次推类直到最后一个数字。\n\n__代码__\n\nC++\\STL\n\n```c++\nconst int TARGET = 1e6;\nconst int RANGE = 10;\nint getPro(int n)\n{\n    int ans = 1;\n    for(int i = n; i > 1; --i)\n        ans *= i;\n    return ans;\n}\nlist<int> num;\nvoid dfs(int target, int p, queue<int> &s)\n{\n    if(p == 1)\n    {\n        s.push(*num.begin());\n        return ;\n    }\n    int part = getPro(p-1);\n    cout << \"part\" << part << endl;\n    auto i = num.begin();\n    for(;i != num.end(); ++i)\n        if(target <= part)\n        {\n            cout << *i << \"b\" << endl;\n            break;\n        }\n        else\n            target -= part;\n    s.push(*i);\n    num.erase(i);\n    dfs(target, p-1,s);\n}\n\nint main(void)\n{\n    queue<int> s;\n    for(int i = 0; i < RANGE; ++i)\n        num.push_back(i);\n    dfs(TARGET, RANGE, s);\n    long long ans = 0;\n    while(!s.empty())\n    {\n        cout << s.front() << \"xxx\" << endl;\n        ans = ans * 10 + s.front();\n        s.pop();\n    }\n    cout << setfill('0') << setw(10) << ans << endl;\n    return 0;\n}\n```\n\n\n__答案__\n\n2783915460\n\n# [025]Lattice paths\n\n__题意__\n\n斐波那契数列：\n\n$$\nF_1 = 1 \\\\\\\\\nF_2 = 1 \\\\\\\\\nF_3 = 2 \\\\\\\\\nF_n = F_{n-1} + F_{n-2} \\\\\\\\\n$$\n先要你求x，$F_x$的数位数第一次超过1000。\n\n__思路__\n\n高精度直接求就行，用我之前的模版，此处略模版细节。\n\n__代码__\n\nC++\\STL\n\n```c++\nint main()\n{\n    BigInt f[] = {BigInt::One(), BigInt::One(), BigInt::One()};\n    int cnt = 0;\n    while(f[cnt % 3].size() < 1000)\n    {\n        f[cnt % 3] = f[(cnt+1) % 3] + f[(cnt+2) % 3];\n        ++cnt;\n    }\n    cout << cnt << endl;\n    return 0;\n}\n```\n\n__优化__\n\n自我考虑的，尚未实现：\n\n已知 $log_{10}x$ 可以求x这个数字在十进制下的位数，我们又已知斐波那契数列的通项公式 $f(x)$ ，则 $1000 < log_{10}f(x)$ ，此时的x就是所求答案，但是斐波那契的 $(1+\\sqrt{5})^x - (1-\\sqrt{5})^x$ 我无法化成一个数字，将x这个项数用log的公式换下来。\n\n__答案__\n\n4782","slug":"algorithm/Project-Euler/021-025","published":1,"updated":"2018-07-10T17:31:12.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zfk000xektzn6tzqwfi","content":"<h1 id=\"021-Amicable-numbers\"><a href=\"#021-Amicable-numbers\" class=\"headerlink\" title=\"[021]Amicable numbers\"></a>[021]Amicable numbers</h1><p><strong>题意</strong></p>\n<p>在正整数数域内，有一个数x，他的所有因子之和（不包括自身），等于另一个数y（$y \\neq x$）；同时，y的所有因子和（不包括自身），等于数x。则x和y称为亲和数对，x和y都属于亲和数。</p>\n<p>现求1到10000内所有亲和数之和。</p>\n<p><strong>思路</strong></p>\n<p>对每个数进行整数乘法，统计到对应数的因子和，然后再进行线性扫描即可。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num[MAXN + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(num,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(num));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= MAXN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i * <span class=\"number\">2</span>; j &lt;= MAXN; j += i)</span><br><span class=\"line\">            num[j] += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= MAXN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] &lt;= MAXN &amp;&amp; num[ num[i] ] == i &amp;&amp; num[i] != i) <span class=\"comment\">// \"num[i] != i\" is important</span></span><br><span class=\"line\">            ans += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>31626</p>\n<h1 id=\"022-Names-scores\"><a href=\"#022-Names-scores\" class=\"headerlink\" title=\"[022]Names scores\"></a>[022]Names scores</h1><p><strong>题意</strong></p>\n<p>给一个只包含大写英文的名(first name)文件，根据他们的位置，计算他们的价值，他们的价值定义为：每一位字母的在字母表中的序号之和与该姓名在所有名中的位置之乘积。<br>现求他们的价值和。</p>\n<p><strong>思路</strong></p>\n<p>读取直接做，C++的格式化读入还是比较麻烦。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">next</span><span class=\"params\">(ifstream&amp; in)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; buffer;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> tmp = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in &gt;&gt; tmp &amp;&amp; tmp != <span class=\"string\">'\"'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(<span class=\"number\">1</span>,<span class=\"string\">'\\0'</span>);</span><br><span class=\"line\">    in &gt;&gt; tmp;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        buffer.emplace_back(tmp); <span class=\"comment\">// There would not read '\"' into buffer.</span></span><br><span class=\"line\">        in &gt;&gt; tmp;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(tmp != <span class=\"string\">'\"'</span>);</span><br><span class=\"line\">    string str(buffer.size(), '\\0');</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> viter = buffer.begin();</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> siter = str.begin();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(viter != buffer.end() &amp;&amp; siter != str.end())</span><br><span class=\"line\">        *siter++ = *viter++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ifstream dataStreamer;</span><br><span class=\"line\">    dataStreamer.open(<span class=\"string\">\"p022_names.txt\"</span>, ios::in, _SH_DENYWR);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!dataStreamer)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"文件读错误\"</span>;</span><br><span class=\"line\">            system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str = next(dataStreamer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.size() == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        s.insert(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dataStreamer.close();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">string</span> e : s)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : e)</span><br><span class=\"line\">               tmp += c - <span class=\"string\">'A'</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">            ans += cnt * tmp;</span><br><span class=\"line\">            ++cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>871198282</p>\n<h1 id=\"023-Non-abundant-sums\"><a href=\"#023-Non-abundant-sums\" class=\"headerlink\" title=\"[023]Non-abundant sums\"></a>[023]Non-abundant sums</h1><p><strong>题意</strong></p>\n<p>28的因数为1，2，4，7，14。1+2+4+7+14=28，称28为完美数。<br>已知n，其因数和sum大于n，称n为多余数。12是最小的多余数，24是最小得可以有两个多余数相加。超过28123的任何数都可以写成两个多余数相加。<br>那么找出所有的无法由两个多余数组成的正整数之和。 </p>\n<p><strong>思路</strong></p>\n<p>先建一个数组确认有哪些是多余数，再建一个数组确认这些多余数可以组成什么数，注意一个数可以被两个同样的多余数相加得到。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> abundantNumberCheck[<span class=\"number\">28123</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> abundantNumberMixed[<span class=\"number\">28123</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(abundantNumberCheck, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(abundantNumberCheck));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(abundantNumberMixed, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(abundantNumberMixed));</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; abunantNumber;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i &lt;= <span class=\"number\">28123</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i * <span class=\"number\">2</span>; j &lt;= <span class=\"number\">28123</span>; j += i)</span><br><span class=\"line\">            abundantNumberCheck[j] += i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(abundantNumberCheck[i] &gt; i)</span><br><span class=\"line\">            abunantNumber.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> v1 = <span class=\"number\">0</span>; v1 &lt; abunantNumber.size(); ++v1)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> v2 = v1; v2 &lt; abunantNumber.size(); ++v2)  <span class=\"comment\">// it means that a number can be expressed two same numbers</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(abunantNumber[v1] + abunantNumber[v2] &gt; <span class=\"number\">28123</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            abundantNumberMixed[ abunantNumber[v1] + abunantNumber[v2] ] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">28123</span> + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(abundantNumberMixed[i] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>4179871</p>\n<h1 id=\"024-Lexicographic-permutations\"><a href=\"#024-Lexicographic-permutations\" class=\"headerlink\" title=\"[024]Lexicographic permutations\"></a>[024]Lexicographic permutations</h1><p><strong>题意</strong></p>\n<p>找0、1、2、3、4、5、6、7、8、9这些数组合成一个数进行字典序排序后第一百万个数。</p>\n<p><strong>思路</strong></p>\n<p>DFS，先确认第一个数，这样可以算出后面有多少种情况，若第一百万不在里面就要调整第一个数，依次推类直到最后一个数字。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> TARGET = <span class=\"number\">1e6</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> RANGE = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPro</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i &gt; <span class=\"number\">1</span>; --i)</span><br><span class=\"line\">        ans *= i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; num;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> p, <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s.push(*num.begin());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> part = getPro(p<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"part\"</span> &lt;&lt; part &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> i = num.begin();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i != num.end(); ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &lt;= part)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"b\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            target -= part;</span><br><span class=\"line\">    s.push(*i);</span><br><span class=\"line\">    num.erase(i);</span><br><span class=\"line\">    dfs(target, p<span class=\"number\">-1</span>,s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; RANGE; ++i)</span><br><span class=\"line\">        num.push_back(i);</span><br><span class=\"line\">    dfs(TARGET, RANGE, s);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!s.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; s.front() &lt;&lt; <span class=\"string\">\"xxx\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        ans = ans * <span class=\"number\">10</span> + s.front();</span><br><span class=\"line\">        s.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">10</span>) &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>2783915460</p>\n<h1 id=\"025-Lattice-paths\"><a href=\"#025-Lattice-paths\" class=\"headerlink\" title=\"[025]Lattice paths\"></a>[025]Lattice paths</h1><p><strong>题意</strong></p>\n<p>斐波那契数列：</p>\n<p>$$<br>F_1 = 1 \\\\<br>F_2 = 1 \\\\<br>F_3 = 2 \\\\<br>F_n = F_{n-1} + F_{n-2} \\\\<br>$$<br>先要你求x，$F_x$的数位数第一次超过1000。</p>\n<p><strong>思路</strong></p>\n<p>高精度直接求就行，用我之前的模版，此处略模版细节。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BigInt f[] = &#123;BigInt::One(), BigInt::One(), BigInt::One()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(f[cnt % <span class=\"number\">3</span>].size() &lt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[cnt % <span class=\"number\">3</span>] = f[(cnt+<span class=\"number\">1</span>) % <span class=\"number\">3</span>] + f[(cnt+<span class=\"number\">2</span>) % <span class=\"number\">3</span>];</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; cnt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>自我考虑的，尚未实现：</p>\n<p>已知 $log_{10}x$ 可以求x这个数字在十进制下的位数，我们又已知斐波那契数列的通项公式 $f(x)$ ，则 $1000 &lt; log_{10}f(x)$ ，此时的x就是所求答案，但是斐波那契的 $(1+\\sqrt{5})^x - (1-\\sqrt{5})^x$ 我无法化成一个数字，将x这个项数用log的公式换下来。</p>\n<p><strong>答案</strong></p>\n<p>4782</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"021-Amicable-numbers\"><a href=\"#021-Amicable-numbers\" class=\"headerlink\" title=\"[021]Amicable numbers\"></a>[021]Amicable numbers</h1><p><strong>题意</strong></p>\n<p>在正整数数域内，有一个数x，他的所有因子之和（不包括自身），等于另一个数y（$y \\neq x$）；同时，y的所有因子和（不包括自身），等于数x。则x和y称为亲和数对，x和y都属于亲和数。</p>\n<p>现求1到10000内所有亲和数之和。</p>\n<p><strong>思路</strong></p>\n<p>对每个数进行整数乘法，统计到对应数的因子和，然后再进行线性扫描即可。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num[MAXN + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(num,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(num));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= MAXN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i * <span class=\"number\">2</span>; j &lt;= MAXN; j += i)</span><br><span class=\"line\">            num[j] += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= MAXN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] &lt;= MAXN &amp;&amp; num[ num[i] ] == i &amp;&amp; num[i] != i) <span class=\"comment\">// \"num[i] != i\" is important</span></span><br><span class=\"line\">            ans += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>31626</p>\n<h1 id=\"022-Names-scores\"><a href=\"#022-Names-scores\" class=\"headerlink\" title=\"[022]Names scores\"></a>[022]Names scores</h1><p><strong>题意</strong></p>\n<p>给一个只包含大写英文的名(first name)文件，根据他们的位置，计算他们的价值，他们的价值定义为：每一位字母的在字母表中的序号之和与该姓名在所有名中的位置之乘积。<br>现求他们的价值和。</p>\n<p><strong>思路</strong></p>\n<p>读取直接做，C++的格式化读入还是比较麻烦。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">next</span><span class=\"params\">(ifstream&amp; in)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; buffer;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> tmp = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in &gt;&gt; tmp &amp;&amp; tmp != <span class=\"string\">'\"'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmp == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(<span class=\"number\">1</span>,<span class=\"string\">'\\0'</span>);</span><br><span class=\"line\">    in &gt;&gt; tmp;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        buffer.emplace_back(tmp); <span class=\"comment\">// There would not read '\"' into buffer.</span></span><br><span class=\"line\">        in &gt;&gt; tmp;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(tmp != <span class=\"string\">'\"'</span>);</span><br><span class=\"line\">    string str(buffer.size(), '\\0');</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> viter = buffer.begin();</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> siter = str.begin();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(viter != buffer.end() &amp;&amp; siter != str.end())</span><br><span class=\"line\">        *siter++ = *viter++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ifstream dataStreamer;</span><br><span class=\"line\">    dataStreamer.open(<span class=\"string\">\"p022_names.txt\"</span>, ios::in, _SH_DENYWR);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!dataStreamer)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"文件读错误\"</span>;</span><br><span class=\"line\">            system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str = next(dataStreamer);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.size() == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        s.insert(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dataStreamer.close();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">string</span> e : s)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : e)</span><br><span class=\"line\">               tmp += c - <span class=\"string\">'A'</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">            ans += cnt * tmp;</span><br><span class=\"line\">            ++cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>871198282</p>\n<h1 id=\"023-Non-abundant-sums\"><a href=\"#023-Non-abundant-sums\" class=\"headerlink\" title=\"[023]Non-abundant sums\"></a>[023]Non-abundant sums</h1><p><strong>题意</strong></p>\n<p>28的因数为1，2，4，7，14。1+2+4+7+14=28，称28为完美数。<br>已知n，其因数和sum大于n，称n为多余数。12是最小的多余数，24是最小得可以有两个多余数相加。超过28123的任何数都可以写成两个多余数相加。<br>那么找出所有的无法由两个多余数组成的正整数之和。 </p>\n<p><strong>思路</strong></p>\n<p>先建一个数组确认有哪些是多余数，再建一个数组确认这些多余数可以组成什么数，注意一个数可以被两个同样的多余数相加得到。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> abundantNumberCheck[<span class=\"number\">28123</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> abundantNumberMixed[<span class=\"number\">28123</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(abundantNumberCheck, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(abundantNumberCheck));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(abundantNumberMixed, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(abundantNumberMixed));</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; abunantNumber;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>;i &lt;= <span class=\"number\">28123</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i * <span class=\"number\">2</span>; j &lt;= <span class=\"number\">28123</span>; j += i)</span><br><span class=\"line\">            abundantNumberCheck[j] += i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(abundantNumberCheck[i] &gt; i)</span><br><span class=\"line\">            abunantNumber.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> v1 = <span class=\"number\">0</span>; v1 &lt; abunantNumber.size(); ++v1)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> v2 = v1; v2 &lt; abunantNumber.size(); ++v2)  <span class=\"comment\">// it means that a number can be expressed two same numbers</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(abunantNumber[v1] + abunantNumber[v2] &gt; <span class=\"number\">28123</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            abundantNumberMixed[ abunantNumber[v1] + abunantNumber[v2] ] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">28123</span> + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(abundantNumberMixed[i] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>4179871</p>\n<h1 id=\"024-Lexicographic-permutations\"><a href=\"#024-Lexicographic-permutations\" class=\"headerlink\" title=\"[024]Lexicographic permutations\"></a>[024]Lexicographic permutations</h1><p><strong>题意</strong></p>\n<p>找0、1、2、3、4、5、6、7、8、9这些数组合成一个数进行字典序排序后第一百万个数。</p>\n<p><strong>思路</strong></p>\n<p>DFS，先确认第一个数，这样可以算出后面有多少种情况，若第一百万不在里面就要调整第一个数，依次推类直到最后一个数字。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> TARGET = <span class=\"number\">1e6</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> RANGE = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPro</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i &gt; <span class=\"number\">1</span>; --i)</span><br><span class=\"line\">        ans *= i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; num;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> p, <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s.push(*num.begin());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> part = getPro(p<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"part\"</span> &lt;&lt; part &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> i = num.begin();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i != num.end(); ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &lt;= part)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; *i &lt;&lt; <span class=\"string\">\"b\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            target -= part;</span><br><span class=\"line\">    s.push(*i);</span><br><span class=\"line\">    num.erase(i);</span><br><span class=\"line\">    dfs(target, p<span class=\"number\">-1</span>,s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; RANGE; ++i)</span><br><span class=\"line\">        num.push_back(i);</span><br><span class=\"line\">    dfs(TARGET, RANGE, s);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!s.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; s.front() &lt;&lt; <span class=\"string\">\"xxx\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        ans = ans * <span class=\"number\">10</span> + s.front();</span><br><span class=\"line\">        s.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; setfill(<span class=\"string\">'0'</span>) &lt;&lt; setw(<span class=\"number\">10</span>) &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>2783915460</p>\n<h1 id=\"025-Lattice-paths\"><a href=\"#025-Lattice-paths\" class=\"headerlink\" title=\"[025]Lattice paths\"></a>[025]Lattice paths</h1><p><strong>题意</strong></p>\n<p>斐波那契数列：</p>\n<p>$$<br>F_1 = 1 \\\\<br>F_2 = 1 \\\\<br>F_3 = 2 \\\\<br>F_n = F_{n-1} + F_{n-2} \\\\<br>$$<br>先要你求x，$F_x$的数位数第一次超过1000。</p>\n<p><strong>思路</strong></p>\n<p>高精度直接求就行，用我之前的模版，此处略模版细节。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BigInt f[] = &#123;BigInt::One(), BigInt::One(), BigInt::One()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(f[cnt % <span class=\"number\">3</span>].size() &lt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[cnt % <span class=\"number\">3</span>] = f[(cnt+<span class=\"number\">1</span>) % <span class=\"number\">3</span>] + f[(cnt+<span class=\"number\">2</span>) % <span class=\"number\">3</span>];</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; cnt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>自我考虑的，尚未实现：</p>\n<p>已知 $log_{10}x$ 可以求x这个数字在十进制下的位数，我们又已知斐波那契数列的通项公式 $f(x)$ ，则 $1000 &lt; log_{10}f(x)$ ，此时的x就是所求答案，但是斐波那契的 $(1+\\sqrt{5})^x - (1-\\sqrt{5})^x$ 我无法化成一个数字，将x这个项数用log的公式换下来。</p>\n<p><strong>答案</strong></p>\n<p>4782</p>\n"},{"title":"欧拉计划个人题解(016-020)","date":"2018-07-03T06:45:18.000Z","toc":true,"banner":"/images/algorithm/Project-Euler/project-euler-banner.png","thumbnail":"/images/algorithm/Project-Euler/project-euler-thumbnail.png","_content":"\n# [016]Power digit sum\n__题意__\n\n求$2^{1000}$的每数位之和。\n\n__思路__\n\n高精度乘法，并利用快速幂优化。\n\n__代码__\n\nC++\\STL\n\n```c++\nclass BigInt\n{\npublic:\n    BigInt(int num);\n    BigInt(const BigInt&);\n    BigInt(BigInt&& o) noexcept;\n    BigInt& operator = (const BigInt&);\n    static BigInt Zero();\n    static BigInt One();\n\n    bool operator == (const BigInt&) const;\n    BigInt& operator ++(); //++i\n    BigInt& operator --(); //--i\n    BigInt operator +(const BigInt&);\n    BigInt operator +=(const BigInt&);\n    BigInt operator *(const BigInt&);\n    BigInt operator *=(const BigInt&);\n\n    inline size_t& size();\n    inline size_t size() const;\n    string toString() const;\n    ~BigInt();\n\n    friend ostream& operator << (ostream& out, const BigInt& o)\n    {\n        auto ptr = o.m_num + o.size();\n        do{\n            --ptr;\n            out << *ptr;\n        }while(ptr != o.m_num);\n        return out;\n    }\nprivate:\n    BigInt();\n    int* m_num;\n    size_t m_size;\n    void format();\n};\nsize_t& BigInt::size()\n{\n    return m_size;\n}\nsize_t BigInt::size() const\n{\n    return m_size;\n}\nBigInt::BigInt()\n{\n}\nBigInt::~BigInt()\n{\n    if(m_num != nullptr)\n    delete[] m_num;\n    m_size = 0;\n}\nBigInt::BigInt(int num)\n{\n    size_t cnt = 0;\n    {\n        int tmp = num;\n        do{\n            ++cnt;\n            tmp /= 10;\n        }while(tmp != 0);\n    }\n    size() = cnt;\n    m_num = new int[size()];\n    auto ptr = m_num;\n    do{\n        *ptr = num % 10;\n        num /= 10;\n        ++ptr;\n    }while(num != 0);\n}\nBigInt::BigInt(const BigInt& o)\n{\n    size() = o.size();\n    m_num = new int[size()];\n    memcpy(m_num, o.m_num, size() * sizeof(int));\n}\nBigInt::BigInt(BigInt&& o) noexcept\n{\n    size() = o.size();\n    m_num = o.m_num;\n    //delete;\n    o.size() = 0;\n    o.m_num = nullptr;\n}\nBigInt& BigInt::operator = (const BigInt& o)\n{\n    size() = o.size();\n    if(m_num != nullptr)\n        delete [] m_num;\n    m_num = new int[size()];\n    memcpy(m_num, o.m_num, size() * sizeof(int));\n    return *this;\n}\nBigInt BigInt::Zero()\n{\n    BigInt a(0);\n    return a;\n}\nBigInt BigInt::One()\n{\n    BigInt a(1);\n    return a;\n}\nbool BigInt::operator==(const BigInt& o) const\n{\n    if(size() != o.size())\n        return false;\n    for(size_t i = 0; i < size(); ++i)\n        if(m_num[i] != o.m_num[i])\n            return false;\n    return true;\n}\nBigInt& BigInt::operator ++()\n{\n    ++m_num[0];\n    format();\n    return *this;\n}\nBigInt& BigInt::operator --()\n{\n    --m_num[0];\n    format();\n    return *this;\n}\nvoid BigInt::format()\n{\n    // Carry\n    for(size_t i = 0; i < size() - 1; ++i)\n        if(m_num[i] >= 10)\n        {\n            m_num[i+1] += m_num[i] / 10;\n            m_num[i] %= 10;\n        }\n        else\n            if(m_num[i] < 0)\n            {\n                int cnt = (m_num[i] / 10 + 1);\n                m_num[i] += cnt * 10;\n                m_num[i+1] -= cnt;\n            }\n    // Stretch out digital\n    if(m_num[size() - 1] >= 10)\n    {\n        int* new_num = new int[size() + 1];\n        memcpy(new_num, m_num, size() * sizeof(int));\n        new_num[size()] = new_num[size() - 1] / 10;\n        new_num[size() - 1] %= 10;\n        ++size();\n        if(m_num != nullptr)\n            delete [] m_num;\n        m_num = new_num;\n    }\n    // Draw back digital\n    if(size() == 1)\n        return;\n    auto ptr = m_num + size();\n    do{\n        --ptr;\n        if(*ptr != 0)\n            break;\n    }while(ptr != m_num);\n    size_t new_size = static_cast<size_t>(ptr - m_num + 1);\n    if(size() != new_size)\n    {\n        int* new_num = new int[new_size];\n        memcpy(new_num, m_num, new_size * sizeof(int));\n        if(m_num != nullptr)\n            delete [] m_num;\n        m_num = new_num;\n        size() = new_size;\n    }\n}\nBigInt BigInt::operator +(const BigInt& o)\n{\n    BigInt ans;\n    size_t length = max(size(), o.size());\n    ans.m_num = new int[length];\n    ans.size() = length;\n    for(size_t i = 0; i < min(size(), o.size()); ++i)\n        ans.m_num[i] = m_num[i] + o.m_num[i];\n    if(size() > o.size())\n        for(size_t i = o.size(); i < size(); ++i)\n            ans.m_num[i] = m_num[i];\n    else\n        for(size_t i = size(); i < o.size(); ++i)\n            ans.m_num[i] = o.m_num[i];\n    ans.format();\n    return ans;\n}\nBigInt BigInt::operator+=(const BigInt& o)\n{\n    if(size() < o.size())\n    {\n        int* new_num = new int[o.size()];\n        memcpy(new_num,m_num,size());\n        for(size_t i = size(); i < o.size(); ++i)\n            new_num[i] = 0;\n        delete [] m_num;\n        m_num = new_num;\n    }\n    for(size_t i = 0; i < o.size(); ++i)\n        m_num[i] += o.m_num[i];\n    format();\n    return *this;\n}\nBigInt BigInt::operator *=(const BigInt& o)\n{\n    size_t new_size = size() + o.size() - 1;\n    int* new_num = new int[new_size];\n    memset(new_num, 0, new_size * sizeof(int));\n    for(size_t i = 0; i < size(); ++i)\n        for(size_t j = 0; j < o.size(); ++j)\n            new_num[i + j] += m_num[i] * o.m_num[j];\n    size() = new_size;\n    delete [] m_num;\n    m_num = new_num;\n    format();\n    return *this;\n}\nBigInt BigInt::operator *(const BigInt& o)\n{\n    BigInt ans;\n    size() = size() + o.size() - 1;\n    ans.m_num = new int[size()];\n    memset(ans.m_num, 0, size() * sizeof(int));\n    for(size_t i = 0; i < size(); ++i)\n        for(size_t j = 0; j < o.size(); ++j)\n            ans.m_num[i + j] += m_num[i] * o.m_num[j];\n    ans.format();\n    return ans;\n}\nstring BigInt::toString() const\n{\n    char* str = new char[size() + 1];\n    for(size_t i = 0; i < size(); ++i)\n        str[size() - i - 1] = static_cast<char>(m_num[i] + '0');\n    str[size()] = '\\0';\n    return string(str);\n}\nBigInt mulpow(BigInt base, int index)\n{\n    BigInt ans = BigInt::One();\n    while(index != 0)\n    {\n        if(index & 1)\n            ans *= base;\n        index >>= 1;\n        base *= base;\n    }\n    return ans;\n}\nint main()\n{\n    BigInt ans = mulpow(BigInt(2), 1000);\n    string str = ans.toString();\n    int count = 0;\n    for(auto iter = str.begin(); iter != str.end(); ++iter)\n        count += (*iter) - '0';\n    cout <<count << endl;\n    return 0;\n}\n```\n\n__答案__\n\n1366\n\n# [017]Number letter counts\n\n__题意__\n\n统计1到1000的数字，英文写法的字符和(包括连字符)。\n\n__思路__\n\n根据规律统计。\n\n```\n个位数：\nzero   4\none    3\ntwo    3\nthree  5\nfour   4\nfive   4\nsix    3\nseven  5\neight  5\nnine   4\n两位数：\nten        3\neleven     6\ntwelve     6\nthirteen   8\nfourteen   8\nfifteen    7\nsixteen    7\nseventeen  9\neighteen   8\nnineteen   8\ntwenty     6\ntwenty-one 9\n...\nthirty     6\nforty      5\nfifty      5\nsixty      5\nseventy    7\neighty     6\nninety     6\n三位数：\none hundred         10\none hundred and one 16\n...\n四位数：\none thousand 11\n```\n\nC++\\STL\n\n```c++\nint main()\n{\n    const int HUNDRED = 7;\n    const int THOUSAND = 8;\n    const int AND = 3;\n    const int single_digit[9] = {3, 3, 5, 4, 4, 3, 5, 5, 4};\n    const int double_digit_1[10] = {3, 6, 6, 8, 8, 7, 7, 9, 8, 8};\n    const int double_digit_2[8] = {6, 6, 5, 5, 5, 7, 6, 6};\n    // calc 1 - 9\n    int single_count = 0;\n    for(auto e : single_digit)\n        single_count += e;\n    \n    // calc 10~19\n    int double_count = 0;\n    for(auto e : double_digit_1)\n        double_count += e;\n    \n    // calc 20 ~ 99\n    for(auto e : double_digit_2)\n        double_count += e * 10 + single_count;\n\n    // calc 100 ~ 999\n    int three_count = 0;\n    for(auto e : single_digit)\n    {\n        three_count += (e + HUNDRED) * 1; // 100 200 300 ...\n        three_count += (e + HUNDRED + AND) * 9 + single_count; // 101 ... 201 ...\n        three_count += (e + HUNDRED + AND) * 90 + double_count; // 110 ... 210 ...\n    }\n\n    // calc 1000\n    int four_count = single_digit[0] + THOUSAND;\n\n    cout << single_count + double_count + three_count + four_count << endl;\n    return 0;\n}\n```\n\n__答案__\n\n21124\n\n# [018] Maximum path sum I\n\n__题意__\n\n给出一个空间结构类似杨辉三角的一些数字，有十五层，最上层有一个数字，最下层有十五个数字。找出从最上层到最下层一条连续的路径，使这条路径上的数字代数和最大。\n\n__思路__\n\n简单动态规划。\n\n__代码__\n\n```c++\nconst int MAXN = 100;\nint maps[MAXN+1][MAXN+1];\nint dp[MAXN+1][MAXN+1];\nint max(int a,int b)\n{\n    return (a > b) ? a : b;\n}\nint main(void)\n{\n    for(int i = 1; i <= MAXN; ++i)\n        for(int j = 1; j <= i; ++j)\n            cin >> maps[i][j];\n    for(int i = MAXN - 1; i >= 1; --i)\n    {\n        for(int j = 1; j <= i; ++j)\n            dp[i][j] = max(dp[i+1][j] + maps[i+1][j], dp[i+1][j+1] + maps[i+1][j+1]);\n    }\n    cout << dp[1][1] + maps[1][1] << endl;\n    return 0;\n}\n```\n__答案__\n\n1074\n\n__相似题目__\n\n[Maximum path sum II](https://projecteuler.net/problem=67)\n\n# [019] Counting Sundays\n\n__题意__\n\n给出下列信息：\n\n* 1900.01.01 是星期一\n* 四月、六月、九月、十一月有30天\n* 二月平年有28天，闰年有29天\n* 剩余月份均为31天\n* 闰年定义为：任意年可以被4整除，特殊的，对于世纪年需要被400整除。否则就是平年。\n\n问：20世纪（1901年1月1日到2000年12月31日）一共有多少个星期日落在了当月的第一天。\n\n__思路__\n\n模拟，对每一年每一月都实际进行检测，统计次数，输出。\n\nC++\\STL\n\n```c++\nint isLeap(int year, int month)\n{\n    if(month != 1)\n        return 0;\n    if(year % 100 == 0)\n        return (year % 400 == 0) ? 1 : 0;\n    else\n        return (year % 4 == 0) ? 1 : 0;\n}\nint main(void)\n{\n    const int dayPerMonth[12]={31,28,31,30,31,30,31,31,30,31,30,31};\n    int nowDay = 0;\n    int ans = 0;\n    for(int year = 1901; year <= 2000; ++year)\n        for(int month = 0; month < 12; ++month)\n        {\n            if(nowDay == 0)\n                ++ans;\n            nowDay = (nowDay + dayPerMonth[month] + isLeap(year, month)) % 7;\n        }\n    cout << ans << endl;\n    return 0;\n}\n\n```\n\n__拓展__\n\n>__蔡勒公式__\n观察，公元元年1月5日是星期五，公元二年1月5日是星期六，公元三年1月5日是星期天，也就是说，平年过一年，星期中的天数只增加一，遇闰年则增加2。于是我们可以从公元元年1月1日是星期一这个事实出发，计算需推算的日子离元年1月1日相距多少天（W），再用天数W除以7的余数加上1就是星期几了。即公式如下\n\n$$\nW = \\lfloor Y-1 \\rfloor + \\lfloor \\frac{Y-1}{4} \\rfloor + \\lfloor \\frac{Y-1}{400} \\rfloor + D \\\\\\\\\nW为天数，算出来的结果可正可负，对7取模得到星期几 \\\\\\\\\nY为目标年份，D为目标年份下的天数\n$$\n这样的公式比较麻烦，每个月的天数是不一致的，2月份还有平闰年之分，蔡勒提出了新的最好用的公式：\n\n$$\nW = \\lfloor \\frac{C}{4} \\rfloor - 2 \\times C + y + \\lfloor \\frac{y}{4} \\rfloor + \\lfloor 13 \\times \\frac{M+1}{5} \\rfloor + d - 1 \\\\\\\\\nC为目标年份前两位，y为年份后两位 \\\\\\\\\nM为目标月份，d为日数，1月与2月要按上一年的13月和14月来算 \\\\\\\\\n$$\n蔡勒公式只适合于1582年10月15日之后的情形。罗马教皇格里高利十三世在1582年组织了一批天文学家，根据哥白尼日心说计算出来的数据，对儒略历作了修改。将1582年10月5日到14日之间的10天宣布撤销，继10月4日之后为10月15日。\n\n__答案__\n\n171\n\n# [020]Factorial digit sum\n\n__题意__\n\n$n!$意为$$1\\times2\\times3\\times ... \\times n$，即n的阶乘。\n现在有 $10! = 3628800$ ，然后 $3 + 6 + 2 + 8 + 8 + 0 + 0 = 27$ 。\n现在求 $100!$ 的各数位之和。\n\n__思路__\n\n使用我之前的大数乘法模版，代码略。\n\n__答案__\n\n648","source":"_posts/algorithm/Project-Euler/016-020.md","raw":"---\ntitle: 欧拉计划个人题解(016-020)\ndate: 2018-7-3 14:45:18\ncategories: algorithm\ntags: \n    - Project Euler\n    - algorithm\ntoc: true\nbanner: /images/algorithm/Project-Euler/project-euler-banner.png\nthumbnail: /images/algorithm/Project-Euler/project-euler-thumbnail.png\n---\n\n# [016]Power digit sum\n__题意__\n\n求$2^{1000}$的每数位之和。\n\n__思路__\n\n高精度乘法，并利用快速幂优化。\n\n__代码__\n\nC++\\STL\n\n```c++\nclass BigInt\n{\npublic:\n    BigInt(int num);\n    BigInt(const BigInt&);\n    BigInt(BigInt&& o) noexcept;\n    BigInt& operator = (const BigInt&);\n    static BigInt Zero();\n    static BigInt One();\n\n    bool operator == (const BigInt&) const;\n    BigInt& operator ++(); //++i\n    BigInt& operator --(); //--i\n    BigInt operator +(const BigInt&);\n    BigInt operator +=(const BigInt&);\n    BigInt operator *(const BigInt&);\n    BigInt operator *=(const BigInt&);\n\n    inline size_t& size();\n    inline size_t size() const;\n    string toString() const;\n    ~BigInt();\n\n    friend ostream& operator << (ostream& out, const BigInt& o)\n    {\n        auto ptr = o.m_num + o.size();\n        do{\n            --ptr;\n            out << *ptr;\n        }while(ptr != o.m_num);\n        return out;\n    }\nprivate:\n    BigInt();\n    int* m_num;\n    size_t m_size;\n    void format();\n};\nsize_t& BigInt::size()\n{\n    return m_size;\n}\nsize_t BigInt::size() const\n{\n    return m_size;\n}\nBigInt::BigInt()\n{\n}\nBigInt::~BigInt()\n{\n    if(m_num != nullptr)\n    delete[] m_num;\n    m_size = 0;\n}\nBigInt::BigInt(int num)\n{\n    size_t cnt = 0;\n    {\n        int tmp = num;\n        do{\n            ++cnt;\n            tmp /= 10;\n        }while(tmp != 0);\n    }\n    size() = cnt;\n    m_num = new int[size()];\n    auto ptr = m_num;\n    do{\n        *ptr = num % 10;\n        num /= 10;\n        ++ptr;\n    }while(num != 0);\n}\nBigInt::BigInt(const BigInt& o)\n{\n    size() = o.size();\n    m_num = new int[size()];\n    memcpy(m_num, o.m_num, size() * sizeof(int));\n}\nBigInt::BigInt(BigInt&& o) noexcept\n{\n    size() = o.size();\n    m_num = o.m_num;\n    //delete;\n    o.size() = 0;\n    o.m_num = nullptr;\n}\nBigInt& BigInt::operator = (const BigInt& o)\n{\n    size() = o.size();\n    if(m_num != nullptr)\n        delete [] m_num;\n    m_num = new int[size()];\n    memcpy(m_num, o.m_num, size() * sizeof(int));\n    return *this;\n}\nBigInt BigInt::Zero()\n{\n    BigInt a(0);\n    return a;\n}\nBigInt BigInt::One()\n{\n    BigInt a(1);\n    return a;\n}\nbool BigInt::operator==(const BigInt& o) const\n{\n    if(size() != o.size())\n        return false;\n    for(size_t i = 0; i < size(); ++i)\n        if(m_num[i] != o.m_num[i])\n            return false;\n    return true;\n}\nBigInt& BigInt::operator ++()\n{\n    ++m_num[0];\n    format();\n    return *this;\n}\nBigInt& BigInt::operator --()\n{\n    --m_num[0];\n    format();\n    return *this;\n}\nvoid BigInt::format()\n{\n    // Carry\n    for(size_t i = 0; i < size() - 1; ++i)\n        if(m_num[i] >= 10)\n        {\n            m_num[i+1] += m_num[i] / 10;\n            m_num[i] %= 10;\n        }\n        else\n            if(m_num[i] < 0)\n            {\n                int cnt = (m_num[i] / 10 + 1);\n                m_num[i] += cnt * 10;\n                m_num[i+1] -= cnt;\n            }\n    // Stretch out digital\n    if(m_num[size() - 1] >= 10)\n    {\n        int* new_num = new int[size() + 1];\n        memcpy(new_num, m_num, size() * sizeof(int));\n        new_num[size()] = new_num[size() - 1] / 10;\n        new_num[size() - 1] %= 10;\n        ++size();\n        if(m_num != nullptr)\n            delete [] m_num;\n        m_num = new_num;\n    }\n    // Draw back digital\n    if(size() == 1)\n        return;\n    auto ptr = m_num + size();\n    do{\n        --ptr;\n        if(*ptr != 0)\n            break;\n    }while(ptr != m_num);\n    size_t new_size = static_cast<size_t>(ptr - m_num + 1);\n    if(size() != new_size)\n    {\n        int* new_num = new int[new_size];\n        memcpy(new_num, m_num, new_size * sizeof(int));\n        if(m_num != nullptr)\n            delete [] m_num;\n        m_num = new_num;\n        size() = new_size;\n    }\n}\nBigInt BigInt::operator +(const BigInt& o)\n{\n    BigInt ans;\n    size_t length = max(size(), o.size());\n    ans.m_num = new int[length];\n    ans.size() = length;\n    for(size_t i = 0; i < min(size(), o.size()); ++i)\n        ans.m_num[i] = m_num[i] + o.m_num[i];\n    if(size() > o.size())\n        for(size_t i = o.size(); i < size(); ++i)\n            ans.m_num[i] = m_num[i];\n    else\n        for(size_t i = size(); i < o.size(); ++i)\n            ans.m_num[i] = o.m_num[i];\n    ans.format();\n    return ans;\n}\nBigInt BigInt::operator+=(const BigInt& o)\n{\n    if(size() < o.size())\n    {\n        int* new_num = new int[o.size()];\n        memcpy(new_num,m_num,size());\n        for(size_t i = size(); i < o.size(); ++i)\n            new_num[i] = 0;\n        delete [] m_num;\n        m_num = new_num;\n    }\n    for(size_t i = 0; i < o.size(); ++i)\n        m_num[i] += o.m_num[i];\n    format();\n    return *this;\n}\nBigInt BigInt::operator *=(const BigInt& o)\n{\n    size_t new_size = size() + o.size() - 1;\n    int* new_num = new int[new_size];\n    memset(new_num, 0, new_size * sizeof(int));\n    for(size_t i = 0; i < size(); ++i)\n        for(size_t j = 0; j < o.size(); ++j)\n            new_num[i + j] += m_num[i] * o.m_num[j];\n    size() = new_size;\n    delete [] m_num;\n    m_num = new_num;\n    format();\n    return *this;\n}\nBigInt BigInt::operator *(const BigInt& o)\n{\n    BigInt ans;\n    size() = size() + o.size() - 1;\n    ans.m_num = new int[size()];\n    memset(ans.m_num, 0, size() * sizeof(int));\n    for(size_t i = 0; i < size(); ++i)\n        for(size_t j = 0; j < o.size(); ++j)\n            ans.m_num[i + j] += m_num[i] * o.m_num[j];\n    ans.format();\n    return ans;\n}\nstring BigInt::toString() const\n{\n    char* str = new char[size() + 1];\n    for(size_t i = 0; i < size(); ++i)\n        str[size() - i - 1] = static_cast<char>(m_num[i] + '0');\n    str[size()] = '\\0';\n    return string(str);\n}\nBigInt mulpow(BigInt base, int index)\n{\n    BigInt ans = BigInt::One();\n    while(index != 0)\n    {\n        if(index & 1)\n            ans *= base;\n        index >>= 1;\n        base *= base;\n    }\n    return ans;\n}\nint main()\n{\n    BigInt ans = mulpow(BigInt(2), 1000);\n    string str = ans.toString();\n    int count = 0;\n    for(auto iter = str.begin(); iter != str.end(); ++iter)\n        count += (*iter) - '0';\n    cout <<count << endl;\n    return 0;\n}\n```\n\n__答案__\n\n1366\n\n# [017]Number letter counts\n\n__题意__\n\n统计1到1000的数字，英文写法的字符和(包括连字符)。\n\n__思路__\n\n根据规律统计。\n\n```\n个位数：\nzero   4\none    3\ntwo    3\nthree  5\nfour   4\nfive   4\nsix    3\nseven  5\neight  5\nnine   4\n两位数：\nten        3\neleven     6\ntwelve     6\nthirteen   8\nfourteen   8\nfifteen    7\nsixteen    7\nseventeen  9\neighteen   8\nnineteen   8\ntwenty     6\ntwenty-one 9\n...\nthirty     6\nforty      5\nfifty      5\nsixty      5\nseventy    7\neighty     6\nninety     6\n三位数：\none hundred         10\none hundred and one 16\n...\n四位数：\none thousand 11\n```\n\nC++\\STL\n\n```c++\nint main()\n{\n    const int HUNDRED = 7;\n    const int THOUSAND = 8;\n    const int AND = 3;\n    const int single_digit[9] = {3, 3, 5, 4, 4, 3, 5, 5, 4};\n    const int double_digit_1[10] = {3, 6, 6, 8, 8, 7, 7, 9, 8, 8};\n    const int double_digit_2[8] = {6, 6, 5, 5, 5, 7, 6, 6};\n    // calc 1 - 9\n    int single_count = 0;\n    for(auto e : single_digit)\n        single_count += e;\n    \n    // calc 10~19\n    int double_count = 0;\n    for(auto e : double_digit_1)\n        double_count += e;\n    \n    // calc 20 ~ 99\n    for(auto e : double_digit_2)\n        double_count += e * 10 + single_count;\n\n    // calc 100 ~ 999\n    int three_count = 0;\n    for(auto e : single_digit)\n    {\n        three_count += (e + HUNDRED) * 1; // 100 200 300 ...\n        three_count += (e + HUNDRED + AND) * 9 + single_count; // 101 ... 201 ...\n        three_count += (e + HUNDRED + AND) * 90 + double_count; // 110 ... 210 ...\n    }\n\n    // calc 1000\n    int four_count = single_digit[0] + THOUSAND;\n\n    cout << single_count + double_count + three_count + four_count << endl;\n    return 0;\n}\n```\n\n__答案__\n\n21124\n\n# [018] Maximum path sum I\n\n__题意__\n\n给出一个空间结构类似杨辉三角的一些数字，有十五层，最上层有一个数字，最下层有十五个数字。找出从最上层到最下层一条连续的路径，使这条路径上的数字代数和最大。\n\n__思路__\n\n简单动态规划。\n\n__代码__\n\n```c++\nconst int MAXN = 100;\nint maps[MAXN+1][MAXN+1];\nint dp[MAXN+1][MAXN+1];\nint max(int a,int b)\n{\n    return (a > b) ? a : b;\n}\nint main(void)\n{\n    for(int i = 1; i <= MAXN; ++i)\n        for(int j = 1; j <= i; ++j)\n            cin >> maps[i][j];\n    for(int i = MAXN - 1; i >= 1; --i)\n    {\n        for(int j = 1; j <= i; ++j)\n            dp[i][j] = max(dp[i+1][j] + maps[i+1][j], dp[i+1][j+1] + maps[i+1][j+1]);\n    }\n    cout << dp[1][1] + maps[1][1] << endl;\n    return 0;\n}\n```\n__答案__\n\n1074\n\n__相似题目__\n\n[Maximum path sum II](https://projecteuler.net/problem=67)\n\n# [019] Counting Sundays\n\n__题意__\n\n给出下列信息：\n\n* 1900.01.01 是星期一\n* 四月、六月、九月、十一月有30天\n* 二月平年有28天，闰年有29天\n* 剩余月份均为31天\n* 闰年定义为：任意年可以被4整除，特殊的，对于世纪年需要被400整除。否则就是平年。\n\n问：20世纪（1901年1月1日到2000年12月31日）一共有多少个星期日落在了当月的第一天。\n\n__思路__\n\n模拟，对每一年每一月都实际进行检测，统计次数，输出。\n\nC++\\STL\n\n```c++\nint isLeap(int year, int month)\n{\n    if(month != 1)\n        return 0;\n    if(year % 100 == 0)\n        return (year % 400 == 0) ? 1 : 0;\n    else\n        return (year % 4 == 0) ? 1 : 0;\n}\nint main(void)\n{\n    const int dayPerMonth[12]={31,28,31,30,31,30,31,31,30,31,30,31};\n    int nowDay = 0;\n    int ans = 0;\n    for(int year = 1901; year <= 2000; ++year)\n        for(int month = 0; month < 12; ++month)\n        {\n            if(nowDay == 0)\n                ++ans;\n            nowDay = (nowDay + dayPerMonth[month] + isLeap(year, month)) % 7;\n        }\n    cout << ans << endl;\n    return 0;\n}\n\n```\n\n__拓展__\n\n>__蔡勒公式__\n观察，公元元年1月5日是星期五，公元二年1月5日是星期六，公元三年1月5日是星期天，也就是说，平年过一年，星期中的天数只增加一，遇闰年则增加2。于是我们可以从公元元年1月1日是星期一这个事实出发，计算需推算的日子离元年1月1日相距多少天（W），再用天数W除以7的余数加上1就是星期几了。即公式如下\n\n$$\nW = \\lfloor Y-1 \\rfloor + \\lfloor \\frac{Y-1}{4} \\rfloor + \\lfloor \\frac{Y-1}{400} \\rfloor + D \\\\\\\\\nW为天数，算出来的结果可正可负，对7取模得到星期几 \\\\\\\\\nY为目标年份，D为目标年份下的天数\n$$\n这样的公式比较麻烦，每个月的天数是不一致的，2月份还有平闰年之分，蔡勒提出了新的最好用的公式：\n\n$$\nW = \\lfloor \\frac{C}{4} \\rfloor - 2 \\times C + y + \\lfloor \\frac{y}{4} \\rfloor + \\lfloor 13 \\times \\frac{M+1}{5} \\rfloor + d - 1 \\\\\\\\\nC为目标年份前两位，y为年份后两位 \\\\\\\\\nM为目标月份，d为日数，1月与2月要按上一年的13月和14月来算 \\\\\\\\\n$$\n蔡勒公式只适合于1582年10月15日之后的情形。罗马教皇格里高利十三世在1582年组织了一批天文学家，根据哥白尼日心说计算出来的数据，对儒略历作了修改。将1582年10月5日到14日之间的10天宣布撤销，继10月4日之后为10月15日。\n\n__答案__\n\n171\n\n# [020]Factorial digit sum\n\n__题意__\n\n$n!$意为$$1\\times2\\times3\\times ... \\times n$，即n的阶乘。\n现在有 $10! = 3628800$ ，然后 $3 + 6 + 2 + 8 + 8 + 0 + 0 = 27$ 。\n现在求 $100!$ 的各数位之和。\n\n__思路__\n\n使用我之前的大数乘法模版，代码略。\n\n__答案__\n\n648","slug":"algorithm/Project-Euler/016-020","published":1,"updated":"2018-07-10T17:31:12.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zfv001eektz8o40m0lk","content":"<h1 id=\"016-Power-digit-sum\"><a href=\"#016-Power-digit-sum\" class=\"headerlink\" title=\"[016]Power digit sum\"></a>[016]Power digit sum</h1><p><strong>题意</strong></p>\n<p>求$2^{1000}$的每数位之和。</p>\n<p><strong>思路</strong></p>\n<p>高精度乘法，并利用快速幂优化。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigInt</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    BigInt(<span class=\"keyword\">int</span> num);</span><br><span class=\"line\">    BigInt(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    BigInt(BigInt&amp;&amp; o) <span class=\"keyword\">noexcept</span>;</span><br><span class=\"line\">    BigInt&amp; <span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInt <span class=\"title\">Zero</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInt <span class=\"title\">One</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> BigInt&amp;) <span class=\"keyword\">const</span>;</span><br><span class=\"line\">    BigInt&amp; <span class=\"keyword\">operator</span> ++(); <span class=\"comment\">//++i</span></span><br><span class=\"line\">    BigInt&amp; <span class=\"keyword\">operator</span> --(); <span class=\"comment\">//--i</span></span><br><span class=\"line\">    BigInt <span class=\"keyword\">operator</span> +(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    BigInt <span class=\"keyword\">operator</span> +=(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    BigInt <span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    BigInt <span class=\"keyword\">operator</span> *=(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> size_t&amp; <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> size_t <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">    ~BigInt();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt; (ostream&amp; out, <span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ptr = o.m_num + o.size();</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            --ptr;</span><br><span class=\"line\">            out &lt;&lt; *ptr;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(ptr != o.m_num);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    BigInt();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* m_num;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> m_size;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">format</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span>&amp; BigInt::size()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span> BigInt::size() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::~BigInt()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] m_num;</span><br><span class=\"line\">    m_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(<span class=\"keyword\">int</span> num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = num;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            ++cnt;</span><br><span class=\"line\">            tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(tmp != <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size() = cnt;</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size()];</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ptr = m_num;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        *ptr = num % <span class=\"number\">10</span>;</span><br><span class=\"line\">        num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        ++ptr;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(num != <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    size() = o.size();</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size()];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(m_num, o.m_num, size() * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(BigInt&amp;&amp; o) <span class=\"keyword\">noexcept</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    size() = o.size();</span><br><span class=\"line\">    m_num = o.m_num;</span><br><span class=\"line\">    <span class=\"comment\">//delete;</span></span><br><span class=\"line\">    o.size() = <span class=\"number\">0</span>;</span><br><span class=\"line\">    o.m_num = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt&amp; BigInt::<span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    size() = o.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size()];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(m_num, o.m_num, size() * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::Zero()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">BigInt <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::One()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">BigInt <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> BigInt::<span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> BigInt&amp; o) <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() != o.size())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size(); ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num[i] != o.m_num[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt&amp; BigInt::<span class=\"keyword\">operator</span> ++()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ++m_num[<span class=\"number\">0</span>];</span><br><span class=\"line\">    format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt&amp; BigInt::<span class=\"keyword\">operator</span> --()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    --m_num[<span class=\"number\">0</span>];</span><br><span class=\"line\">    format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> BigInt::format()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Carry</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size() - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num[i] &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_num[i+<span class=\"number\">1</span>] += m_num[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">            m_num[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m_num[i] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> cnt = (m_num[i] / <span class=\"number\">10</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">                m_num[i] += cnt * <span class=\"number\">10</span>;</span><br><span class=\"line\">                m_num[i+<span class=\"number\">1</span>] -= cnt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Stretch out digital</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m_num[size() - <span class=\"number\">1</span>] &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>* new_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size() + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(new_num, m_num, size() * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        new_num[size()] = new_num[size() - <span class=\"number\">1</span>] / <span class=\"number\">10</span>;</span><br><span class=\"line\">        new_num[size() - <span class=\"number\">1</span>] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">        ++size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">        m_num = new_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Draw back digital</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ptr = m_num + size();</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        --ptr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*ptr != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(ptr != m_num);</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> new_size = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">size_t</span>&gt;(ptr - m_num + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() != new_size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>* new_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[new_size];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(new_num, m_num, new_size * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">        m_num = new_num;</span><br><span class=\"line\">        size() = new_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::<span class=\"keyword\">operator</span> +(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BigInt ans;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> length = max(size(), o.size());</span><br><span class=\"line\">    ans.m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">    ans.size() = length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; min(size(), o.size()); ++i)</span><br><span class=\"line\">        ans.m_num[i] = m_num[i] + o.m_num[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() &gt; o.size())</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = o.size(); i &lt; size(); ++i)</span><br><span class=\"line\">            ans.m_num[i] = m_num[i];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = size(); i &lt; o.size(); ++i)</span><br><span class=\"line\">            ans.m_num[i] = o.m_num[i];</span><br><span class=\"line\">    ans.format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::<span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() &lt; o.size())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>* new_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[o.size()];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(new_num,m_num,size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = size(); i &lt; o.size(); ++i)</span><br><span class=\"line\">            new_num[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">        m_num = new_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; o.size(); ++i)</span><br><span class=\"line\">        m_num[i] += o.m_num[i];</span><br><span class=\"line\">    format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::<span class=\"keyword\">operator</span> *=(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> new_size = size() + o.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* new_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[new_size];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(new_num, <span class=\"number\">0</span>, new_size * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size(); ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; o.size(); ++j)</span><br><span class=\"line\">            new_num[i + j] += m_num[i] * o.m_num[j];</span><br><span class=\"line\">    size() = new_size;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">    m_num = new_num;</span><br><span class=\"line\">    format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::<span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BigInt ans;</span><br><span class=\"line\">    size() = size() + o.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ans.m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size()];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ans.m_num, <span class=\"number\">0</span>, size() * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size(); ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; o.size(); ++j)</span><br><span class=\"line\">            ans.m_num[i + j] += m_num[i] * o.m_num[j];</span><br><span class=\"line\">    ans.format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">string</span> BigInt::toString() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* str = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size() + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size(); ++i)</span><br><span class=\"line\">        str[size() - i - <span class=\"number\">1</span>] = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">char</span>&gt;(m_num[i] + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">    str[size()] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">BigInt <span class=\"title\">mulpow</span><span class=\"params\">(BigInt base, <span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BigInt ans = BigInt::One();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            ans *= base;</span><br><span class=\"line\">        index &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        base *= base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BigInt ans = mulpow(BigInt(<span class=\"number\">2</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str = ans.toString();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> iter = str.begin(); iter != str.end(); ++iter)</span><br><span class=\"line\">        count += (*iter) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>1366</p>\n<h1 id=\"017-Number-letter-counts\"><a href=\"#017-Number-letter-counts\" class=\"headerlink\" title=\"[017]Number letter counts\"></a>[017]Number letter counts</h1><p><strong>题意</strong></p>\n<p>统计1到1000的数字，英文写法的字符和(包括连字符)。</p>\n<p><strong>思路</strong></p>\n<p>根据规律统计。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">个位数：</span><br><span class=\"line\">zero   4</span><br><span class=\"line\">one    3</span><br><span class=\"line\">two    3</span><br><span class=\"line\">three  5</span><br><span class=\"line\">four   4</span><br><span class=\"line\">five   4</span><br><span class=\"line\">six    3</span><br><span class=\"line\">seven  5</span><br><span class=\"line\">eight  5</span><br><span class=\"line\">nine   4</span><br><span class=\"line\">两位数：</span><br><span class=\"line\">ten        3</span><br><span class=\"line\">eleven     6</span><br><span class=\"line\">twelve     6</span><br><span class=\"line\">thirteen   8</span><br><span class=\"line\">fourteen   8</span><br><span class=\"line\">fifteen    7</span><br><span class=\"line\">sixteen    7</span><br><span class=\"line\">seventeen  9</span><br><span class=\"line\">eighteen   8</span><br><span class=\"line\">nineteen   8</span><br><span class=\"line\">twenty     6</span><br><span class=\"line\">twenty-one 9</span><br><span class=\"line\">...</span><br><span class=\"line\">thirty     6</span><br><span class=\"line\">forty      5</span><br><span class=\"line\">fifty      5</span><br><span class=\"line\">sixty      5</span><br><span class=\"line\">seventy    7</span><br><span class=\"line\">eighty     6</span><br><span class=\"line\">ninety     6</span><br><span class=\"line\">三位数：</span><br><span class=\"line\">one hundred         10</span><br><span class=\"line\">one hundred and one 16</span><br><span class=\"line\">...</span><br><span class=\"line\">四位数：</span><br><span class=\"line\">one thousand 11</span><br></pre></td></tr></table></figure>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> HUNDRED = <span class=\"number\">7</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> THOUSAND = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> AND = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> single_digit[<span class=\"number\">9</span>] = &#123;<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> double_digit_1[<span class=\"number\">10</span>] = &#123;<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> double_digit_2[<span class=\"number\">8</span>] = &#123;<span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// calc 1 - 9</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> single_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : single_digit)</span><br><span class=\"line\">        single_count += e;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// calc 10~19</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> double_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : double_digit_1)</span><br><span class=\"line\">        double_count += e;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// calc 20 ~ 99</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : double_digit_2)</span><br><span class=\"line\">        double_count += e * <span class=\"number\">10</span> + single_count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// calc 100 ~ 999</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> three_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : single_digit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        three_count += (e + HUNDRED) * <span class=\"number\">1</span>; <span class=\"comment\">// 100 200 300 ...</span></span><br><span class=\"line\">        three_count += (e + HUNDRED + AND) * <span class=\"number\">9</span> + single_count; <span class=\"comment\">// 101 ... 201 ...</span></span><br><span class=\"line\">        three_count += (e + HUNDRED + AND) * <span class=\"number\">90</span> + double_count; <span class=\"comment\">// 110 ... 210 ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// calc 1000</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> four_count = single_digit[<span class=\"number\">0</span>] + THOUSAND;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; single_count + double_count + three_count + four_count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>21124</p>\n<h1 id=\"018-Maximum-path-sum-I\"><a href=\"#018-Maximum-path-sum-I\" class=\"headerlink\" title=\"[018] Maximum path sum I\"></a>[018] Maximum path sum I</h1><p><strong>题意</strong></p>\n<p>给出一个空间结构类似杨辉三角的一些数字，有十五层，最上层有一个数字，最下层有十五个数字。找出从最上层到最下层一条连续的路径，使这条路径上的数字代数和最大。</p>\n<p><strong>思路</strong></p>\n<p>简单动态规划。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> maps[MAXN+<span class=\"number\">1</span>][MAXN+<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[MAXN+<span class=\"number\">1</span>][MAXN+<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a &gt; b) ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= MAXN; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; ++j)</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; maps[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = MAXN - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; --i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; ++j)</span><br><span class=\"line\">            dp[i][j] = max(dp[i+<span class=\"number\">1</span>][j] + maps[i+<span class=\"number\">1</span>][j], dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>] + maps[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>] + maps[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>1074</p>\n<p><strong>相似题目</strong></p>\n<p><a href=\"https://projecteuler.net/problem=67\" target=\"_blank\" rel=\"noopener\">Maximum path sum II</a></p>\n<h1 id=\"019-Counting-Sundays\"><a href=\"#019-Counting-Sundays\" class=\"headerlink\" title=\"[019] Counting Sundays\"></a>[019] Counting Sundays</h1><p><strong>题意</strong></p>\n<p>给出下列信息：</p>\n<ul>\n<li>1900.01.01 是星期一</li>\n<li>四月、六月、九月、十一月有30天</li>\n<li>二月平年有28天，闰年有29天</li>\n<li>剩余月份均为31天</li>\n<li>闰年定义为：任意年可以被4整除，特殊的，对于世纪年需要被400整除。否则就是平年。</li>\n</ul>\n<p>问：20世纪（1901年1月1日到2000年12月31日）一共有多少个星期日落在了当月的第一天。</p>\n<p><strong>思路</strong></p>\n<p>模拟，对每一年每一月都实际进行检测，统计次数，输出。</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isLeap</span><span class=\"params\">(<span class=\"keyword\">int</span> year, <span class=\"keyword\">int</span> month)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(month != <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(year % <span class=\"number\">100</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (year % <span class=\"number\">400</span> == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dayPerMonth[<span class=\"number\">12</span>]=&#123;<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nowDay = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> year = <span class=\"number\">1901</span>; year &lt;= <span class=\"number\">2000</span>; ++year)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> month = <span class=\"number\">0</span>; month &lt; <span class=\"number\">12</span>; ++month)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nowDay == <span class=\"number\">0</span>)</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">            nowDay = (nowDay + dayPerMonth[month] + isLeap(year, month)) % <span class=\"number\">7</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>拓展</strong></p>\n<blockquote>\n<p><strong>蔡勒公式</strong><br>观察，公元元年1月5日是星期五，公元二年1月5日是星期六，公元三年1月5日是星期天，也就是说，平年过一年，星期中的天数只增加一，遇闰年则增加2。于是我们可以从公元元年1月1日是星期一这个事实出发，计算需推算的日子离元年1月1日相距多少天（W），再用天数W除以7的余数加上1就是星期几了。即公式如下</p>\n</blockquote>\n<p>$$<br>W = \\lfloor Y-1 \\rfloor + \\lfloor \\frac{Y-1}{4} \\rfloor + \\lfloor \\frac{Y-1}{400} \\rfloor + D \\\\<br>W为天数，算出来的结果可正可负，对7取模得到星期几 \\\\<br>Y为目标年份，D为目标年份下的天数<br>$$<br>这样的公式比较麻烦，每个月的天数是不一致的，2月份还有平闰年之分，蔡勒提出了新的最好用的公式：</p>\n<p>$$<br>W = \\lfloor \\frac{C}{4} \\rfloor - 2 \\times C + y + \\lfloor \\frac{y}{4} \\rfloor + \\lfloor 13 \\times \\frac{M+1}{5} \\rfloor + d - 1 \\\\<br>C为目标年份前两位，y为年份后两位 \\\\<br>M为目标月份，d为日数，1月与2月要按上一年的13月和14月来算 \\\\<br>$$<br>蔡勒公式只适合于1582年10月15日之后的情形。罗马教皇格里高利十三世在1582年组织了一批天文学家，根据哥白尼日心说计算出来的数据，对儒略历作了修改。将1582年10月5日到14日之间的10天宣布撤销，继10月4日之后为10月15日。</p>\n<p><strong>答案</strong></p>\n<p>171</p>\n<h1 id=\"020-Factorial-digit-sum\"><a href=\"#020-Factorial-digit-sum\" class=\"headerlink\" title=\"[020]Factorial digit sum\"></a>[020]Factorial digit sum</h1><p><strong>题意</strong></p>\n<p>$n!$意为$$1\\times2\\times3\\times … \\times n$，即n的阶乘。<br>现在有 $10! = 3628800$ ，然后 $3 + 6 + 2 + 8 + 8 + 0 + 0 = 27$ 。<br>现在求 $100!$ 的各数位之和。</p>\n<p><strong>思路</strong></p>\n<p>使用我之前的大数乘法模版，代码略。</p>\n<p><strong>答案</strong></p>\n<p>648</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"016-Power-digit-sum\"><a href=\"#016-Power-digit-sum\" class=\"headerlink\" title=\"[016]Power digit sum\"></a>[016]Power digit sum</h1><p><strong>题意</strong></p>\n<p>求$2^{1000}$的每数位之和。</p>\n<p><strong>思路</strong></p>\n<p>高精度乘法，并利用快速幂优化。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigInt</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    BigInt(<span class=\"keyword\">int</span> num);</span><br><span class=\"line\">    BigInt(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    BigInt(BigInt&amp;&amp; o) <span class=\"keyword\">noexcept</span>;</span><br><span class=\"line\">    BigInt&amp; <span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInt <span class=\"title\">Zero</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> BigInt <span class=\"title\">One</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> BigInt&amp;) <span class=\"keyword\">const</span>;</span><br><span class=\"line\">    BigInt&amp; <span class=\"keyword\">operator</span> ++(); <span class=\"comment\">//++i</span></span><br><span class=\"line\">    BigInt&amp; <span class=\"keyword\">operator</span> --(); <span class=\"comment\">//--i</span></span><br><span class=\"line\">    BigInt <span class=\"keyword\">operator</span> +(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    BigInt <span class=\"keyword\">operator</span> +=(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    BigInt <span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    BigInt <span class=\"keyword\">operator</span> *=(<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> size_t&amp; <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> size_t <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">    ~BigInt();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt; (ostream&amp; out, <span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ptr = o.m_num + o.size();</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            --ptr;</span><br><span class=\"line\">            out &lt;&lt; *ptr;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(ptr != o.m_num);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    BigInt();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* m_num;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> m_size;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">format</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span>&amp; BigInt::size()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">size_t</span> BigInt::size() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::~BigInt()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] m_num;</span><br><span class=\"line\">    m_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(<span class=\"keyword\">int</span> num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = num;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            ++cnt;</span><br><span class=\"line\">            tmp /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(tmp != <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size() = cnt;</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size()];</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ptr = m_num;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        *ptr = num % <span class=\"number\">10</span>;</span><br><span class=\"line\">        num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        ++ptr;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(num != <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    size() = o.size();</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size()];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(m_num, o.m_num, size() * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(BigInt&amp;&amp; o) <span class=\"keyword\">noexcept</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    size() = o.size();</span><br><span class=\"line\">    m_num = o.m_num;</span><br><span class=\"line\">    <span class=\"comment\">//delete;</span></span><br><span class=\"line\">    o.size() = <span class=\"number\">0</span>;</span><br><span class=\"line\">    o.m_num = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt&amp; BigInt::<span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    size() = o.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size()];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(m_num, o.m_num, size() * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::Zero()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">BigInt <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::One()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">BigInt <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> BigInt::<span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> BigInt&amp; o) <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() != o.size())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size(); ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num[i] != o.m_num[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt&amp; BigInt::<span class=\"keyword\">operator</span> ++()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ++m_num[<span class=\"number\">0</span>];</span><br><span class=\"line\">    format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt&amp; BigInt::<span class=\"keyword\">operator</span> --()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    --m_num[<span class=\"number\">0</span>];</span><br><span class=\"line\">    format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> BigInt::format()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Carry</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size() - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num[i] &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_num[i+<span class=\"number\">1</span>] += m_num[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">            m_num[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m_num[i] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> cnt = (m_num[i] / <span class=\"number\">10</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">                m_num[i] += cnt * <span class=\"number\">10</span>;</span><br><span class=\"line\">                m_num[i+<span class=\"number\">1</span>] -= cnt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Stretch out digital</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m_num[size() - <span class=\"number\">1</span>] &gt;= <span class=\"number\">10</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>* new_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size() + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(new_num, m_num, size() * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        new_num[size()] = new_num[size() - <span class=\"number\">1</span>] / <span class=\"number\">10</span>;</span><br><span class=\"line\">        new_num[size() - <span class=\"number\">1</span>] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">        ++size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">        m_num = new_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Draw back digital</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ptr = m_num + size();</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        --ptr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*ptr != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(ptr != m_num);</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> new_size = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">size_t</span>&gt;(ptr - m_num + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() != new_size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>* new_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[new_size];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(new_num, m_num, new_size * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">        m_num = new_num;</span><br><span class=\"line\">        size() = new_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::<span class=\"keyword\">operator</span> +(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BigInt ans;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> length = max(size(), o.size());</span><br><span class=\"line\">    ans.m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">    ans.size() = length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; min(size(), o.size()); ++i)</span><br><span class=\"line\">        ans.m_num[i] = m_num[i] + o.m_num[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() &gt; o.size())</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = o.size(); i &lt; size(); ++i)</span><br><span class=\"line\">            ans.m_num[i] = m_num[i];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = size(); i &lt; o.size(); ++i)</span><br><span class=\"line\">            ans.m_num[i] = o.m_num[i];</span><br><span class=\"line\">    ans.format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::<span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size() &lt; o.size())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>* new_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[o.size()];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(new_num,m_num,size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = size(); i &lt; o.size(); ++i)</span><br><span class=\"line\">            new_num[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">        m_num = new_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; o.size(); ++i)</span><br><span class=\"line\">        m_num[i] += o.m_num[i];</span><br><span class=\"line\">    format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::<span class=\"keyword\">operator</span> *=(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> new_size = size() + o.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* new_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[new_size];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(new_num, <span class=\"number\">0</span>, new_size * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size(); ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; o.size(); ++j)</span><br><span class=\"line\">            new_num[i + j] += m_num[i] * o.m_num[j];</span><br><span class=\"line\">    size() = new_size;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> [] m_num;</span><br><span class=\"line\">    m_num = new_num;</span><br><span class=\"line\">    format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt BigInt::<span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> BigInt&amp; o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    BigInt ans;</span><br><span class=\"line\">    size() = size() + o.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ans.m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size()];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ans.m_num, <span class=\"number\">0</span>, size() * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size(); ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; o.size(); ++j)</span><br><span class=\"line\">            ans.m_num[i + j] += m_num[i] * o.m_num[j];</span><br><span class=\"line\">    ans.format();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">string</span> BigInt::toString() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* str = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size() + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; size(); ++i)</span><br><span class=\"line\">        str[size() - i - <span class=\"number\">1</span>] = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">char</span>&gt;(m_num[i] + <span class=\"string\">'0'</span>);</span><br><span class=\"line\">    str[size()] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">BigInt <span class=\"title\">mulpow</span><span class=\"params\">(BigInt base, <span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BigInt ans = BigInt::One();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            ans *= base;</span><br><span class=\"line\">        index &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        base *= base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BigInt ans = mulpow(BigInt(<span class=\"number\">2</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str = ans.toString();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> iter = str.begin(); iter != str.end(); ++iter)</span><br><span class=\"line\">        count += (*iter) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>1366</p>\n<h1 id=\"017-Number-letter-counts\"><a href=\"#017-Number-letter-counts\" class=\"headerlink\" title=\"[017]Number letter counts\"></a>[017]Number letter counts</h1><p><strong>题意</strong></p>\n<p>统计1到1000的数字，英文写法的字符和(包括连字符)。</p>\n<p><strong>思路</strong></p>\n<p>根据规律统计。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">个位数：</span><br><span class=\"line\">zero   4</span><br><span class=\"line\">one    3</span><br><span class=\"line\">two    3</span><br><span class=\"line\">three  5</span><br><span class=\"line\">four   4</span><br><span class=\"line\">five   4</span><br><span class=\"line\">six    3</span><br><span class=\"line\">seven  5</span><br><span class=\"line\">eight  5</span><br><span class=\"line\">nine   4</span><br><span class=\"line\">两位数：</span><br><span class=\"line\">ten        3</span><br><span class=\"line\">eleven     6</span><br><span class=\"line\">twelve     6</span><br><span class=\"line\">thirteen   8</span><br><span class=\"line\">fourteen   8</span><br><span class=\"line\">fifteen    7</span><br><span class=\"line\">sixteen    7</span><br><span class=\"line\">seventeen  9</span><br><span class=\"line\">eighteen   8</span><br><span class=\"line\">nineteen   8</span><br><span class=\"line\">twenty     6</span><br><span class=\"line\">twenty-one 9</span><br><span class=\"line\">...</span><br><span class=\"line\">thirty     6</span><br><span class=\"line\">forty      5</span><br><span class=\"line\">fifty      5</span><br><span class=\"line\">sixty      5</span><br><span class=\"line\">seventy    7</span><br><span class=\"line\">eighty     6</span><br><span class=\"line\">ninety     6</span><br><span class=\"line\">三位数：</span><br><span class=\"line\">one hundred         10</span><br><span class=\"line\">one hundred and one 16</span><br><span class=\"line\">...</span><br><span class=\"line\">四位数：</span><br><span class=\"line\">one thousand 11</span><br></pre></td></tr></table></figure>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> HUNDRED = <span class=\"number\">7</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> THOUSAND = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> AND = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> single_digit[<span class=\"number\">9</span>] = &#123;<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> double_digit_1[<span class=\"number\">10</span>] = &#123;<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> double_digit_2[<span class=\"number\">8</span>] = &#123;<span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// calc 1 - 9</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> single_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : single_digit)</span><br><span class=\"line\">        single_count += e;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// calc 10~19</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> double_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : double_digit_1)</span><br><span class=\"line\">        double_count += e;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// calc 20 ~ 99</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : double_digit_2)</span><br><span class=\"line\">        double_count += e * <span class=\"number\">10</span> + single_count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// calc 100 ~ 999</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> three_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : single_digit)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        three_count += (e + HUNDRED) * <span class=\"number\">1</span>; <span class=\"comment\">// 100 200 300 ...</span></span><br><span class=\"line\">        three_count += (e + HUNDRED + AND) * <span class=\"number\">9</span> + single_count; <span class=\"comment\">// 101 ... 201 ...</span></span><br><span class=\"line\">        three_count += (e + HUNDRED + AND) * <span class=\"number\">90</span> + double_count; <span class=\"comment\">// 110 ... 210 ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// calc 1000</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> four_count = single_digit[<span class=\"number\">0</span>] + THOUSAND;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; single_count + double_count + three_count + four_count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>21124</p>\n<h1 id=\"018-Maximum-path-sum-I\"><a href=\"#018-Maximum-path-sum-I\" class=\"headerlink\" title=\"[018] Maximum path sum I\"></a>[018] Maximum path sum I</h1><p><strong>题意</strong></p>\n<p>给出一个空间结构类似杨辉三角的一些数字，有十五层，最上层有一个数字，最下层有十五个数字。找出从最上层到最下层一条连续的路径，使这条路径上的数字代数和最大。</p>\n<p><strong>思路</strong></p>\n<p>简单动态规划。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> maps[MAXN+<span class=\"number\">1</span>][MAXN+<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[MAXN+<span class=\"number\">1</span>][MAXN+<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a &gt; b) ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= MAXN; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; ++j)</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; maps[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = MAXN - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; --i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; ++j)</span><br><span class=\"line\">            dp[i][j] = max(dp[i+<span class=\"number\">1</span>][j] + maps[i+<span class=\"number\">1</span>][j], dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>] + maps[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>] + maps[<span class=\"number\">1</span>][<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>1074</p>\n<p><strong>相似题目</strong></p>\n<p><a href=\"https://projecteuler.net/problem=67\" target=\"_blank\" rel=\"noopener\">Maximum path sum II</a></p>\n<h1 id=\"019-Counting-Sundays\"><a href=\"#019-Counting-Sundays\" class=\"headerlink\" title=\"[019] Counting Sundays\"></a>[019] Counting Sundays</h1><p><strong>题意</strong></p>\n<p>给出下列信息：</p>\n<ul>\n<li>1900.01.01 是星期一</li>\n<li>四月、六月、九月、十一月有30天</li>\n<li>二月平年有28天，闰年有29天</li>\n<li>剩余月份均为31天</li>\n<li>闰年定义为：任意年可以被4整除，特殊的，对于世纪年需要被400整除。否则就是平年。</li>\n</ul>\n<p>问：20世纪（1901年1月1日到2000年12月31日）一共有多少个星期日落在了当月的第一天。</p>\n<p><strong>思路</strong></p>\n<p>模拟，对每一年每一月都实际进行检测，统计次数，输出。</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isLeap</span><span class=\"params\">(<span class=\"keyword\">int</span> year, <span class=\"keyword\">int</span> month)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(month != <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(year % <span class=\"number\">100</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (year % <span class=\"number\">400</span> == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dayPerMonth[<span class=\"number\">12</span>]=&#123;<span class=\"number\">31</span>,<span class=\"number\">28</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>,<span class=\"number\">30</span>,<span class=\"number\">31</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nowDay = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> year = <span class=\"number\">1901</span>; year &lt;= <span class=\"number\">2000</span>; ++year)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> month = <span class=\"number\">0</span>; month &lt; <span class=\"number\">12</span>; ++month)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nowDay == <span class=\"number\">0</span>)</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">            nowDay = (nowDay + dayPerMonth[month] + isLeap(year, month)) % <span class=\"number\">7</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>拓展</strong></p>\n<blockquote>\n<p><strong>蔡勒公式</strong><br>观察，公元元年1月5日是星期五，公元二年1月5日是星期六，公元三年1月5日是星期天，也就是说，平年过一年，星期中的天数只增加一，遇闰年则增加2。于是我们可以从公元元年1月1日是星期一这个事实出发，计算需推算的日子离元年1月1日相距多少天（W），再用天数W除以7的余数加上1就是星期几了。即公式如下</p>\n</blockquote>\n<p>$$<br>W = \\lfloor Y-1 \\rfloor + \\lfloor \\frac{Y-1}{4} \\rfloor + \\lfloor \\frac{Y-1}{400} \\rfloor + D \\\\<br>W为天数，算出来的结果可正可负，对7取模得到星期几 \\\\<br>Y为目标年份，D为目标年份下的天数<br>$$<br>这样的公式比较麻烦，每个月的天数是不一致的，2月份还有平闰年之分，蔡勒提出了新的最好用的公式：</p>\n<p>$$<br>W = \\lfloor \\frac{C}{4} \\rfloor - 2 \\times C + y + \\lfloor \\frac{y}{4} \\rfloor + \\lfloor 13 \\times \\frac{M+1}{5} \\rfloor + d - 1 \\\\<br>C为目标年份前两位，y为年份后两位 \\\\<br>M为目标月份，d为日数，1月与2月要按上一年的13月和14月来算 \\\\<br>$$<br>蔡勒公式只适合于1582年10月15日之后的情形。罗马教皇格里高利十三世在1582年组织了一批天文学家，根据哥白尼日心说计算出来的数据，对儒略历作了修改。将1582年10月5日到14日之间的10天宣布撤销，继10月4日之后为10月15日。</p>\n<p><strong>答案</strong></p>\n<p>171</p>\n<h1 id=\"020-Factorial-digit-sum\"><a href=\"#020-Factorial-digit-sum\" class=\"headerlink\" title=\"[020]Factorial digit sum\"></a>[020]Factorial digit sum</h1><p><strong>题意</strong></p>\n<p>$n!$意为$$1\\times2\\times3\\times … \\times n$，即n的阶乘。<br>现在有 $10! = 3628800$ ，然后 $3 + 6 + 2 + 8 + 8 + 0 + 0 = 27$ 。<br>现在求 $100!$ 的各数位之和。</p>\n<p><strong>思路</strong></p>\n<p>使用我之前的大数乘法模版，代码略。</p>\n<p><strong>答案</strong></p>\n<p>648</p>\n"},{"title":"欧拉计划个人题解(011-015)","date":"2018-06-11T13:35:33.000Z","toc":true,"banner":"/images/algorithm/Project-Euler/project-euler-banner.png","thumbnail":"/images/algorithm/Project-Euler/project-euler-thumbnail.png","_content":"\n# [011]Largest product in a grid\n\n__题意__\n\n在20*20的矩阵中，找4个同方向(横竖斜)的数字，使它们的乘积最大。\n\n__思路__\n\n直接做，注意对0的处理。\n\n__优化__\n\n$$\n(1+2+...+100)^2 = \\left( \\frac{n \\times (n+1)}{2} \\right)^2 \\\\\\\\\n(1^2 + 2^2 + ... + 100^2) = \\frac{n \\times (n + 1) \\times (2n+1)}{6}\n$$\n\n__代码__\n\nC++\\STL\n\n```c++\nint main(void)\n{\n    for(int i = 0; i < 20; ++i)\n        for(int j = 0; j < 20; ++j)\n            cin >> maps[i][j];\n\n    int ans = 0;\n    int tmp;\n\n    // horizontal\n    for(int i = 0; i < 20; ++i)\n        for(int j = 0; j < 20 - 4; ++j)\n        {\n            tmp = 1;\n            for(int k = 0; k < 4; ++k)\n                tmp *= maps[i][j+k];\n            ans = max(ans,tmp);\n        }\n    // vertical\n    for(int i = 0; i < 20 - 4; ++i)\n        for(int j = 0; j < 20; ++j)\n        {\n            tmp = 1;\n            for(int k = 0; k < 4; ++k)\n                tmp *= maps[i+k][j];\n            ans = max(ans,tmp);\n        }\n\n    // diagonal1\n    for(int i = 0; i < 20 - 4; ++i)\n        for(int j = 0; j < 20 - 4; ++j)\n        {\n            tmp = 1;\n            for(int k = 0; k < 4; ++k)\n                tmp *= maps[i+k][j+k];\n            ans = max(ans,tmp);\n        }\n    // diagonal2\n\n    for(int i = 3; i < 20; ++i)\n        for(int j = 0; j < 20 - 4; ++j)\n        {\n            tmp = 1;\n            for(int k = 0; k < 4; ++k)\n                tmp *= maps[i-k][j+k];\n            ans = max(ans,tmp);\n        }\n\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n70600674\n\n# [012]Highly divisible triangular number\n\n__题意__\n\n三角形数序列是由对自然数的连加构造而成的。所以第七个三角形数是$1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$。那么三角形数序列中的前十个是：$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...$\n下面我们列出前七个三角形数的约数：\n\n```\n1: 1\n3: 1,3\n6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\n```\n可以看出28是第一个拥有超过5个约数的三角形数。\n那么第一个拥有超过500个约数的三角形数是多少？\n\n\n__思路__\n\n一个根据题意找，注意可以开平方缩小范围。\n\nC++\\STL\n\n```c++\nbool isaccepted(long long num)\n{\n    int factor_count = 0;\n    long long upper = static_cast<long long>(sqrt(num));\n    for(int i = 2; i < upper; ++i)\n        if(num % i == 0)\n            factor_count += 2;\n    if(upper * upper == num)\n        factor_count += 1;\n    if(factor_count >= 500)\n        return true;\n    else\n        return false;\n}\nint main(void)\n{\n    int ans = 1;\n    int i = 1;\n    while(!isaccepted(ans))\n        ans += ++i;\n    cout << ans << endl;\n    return 0;\n}\n\n```\n__优化__\n\n但是上面的代码还是很慢，我们需要引入一个新的算法。\n\n我们知道，一个数的因数，可以由一些质因数组合而成，那么一个数的因数个数与质因数会有关系，我们把一个数分解成若干个质因数，例如\n\n$$\n28 = 2^2 * 7^1\n$$\n则其组合的情况有\n\n$$\n2^0 \\times 7^0 \\\\\\\\\n2^1 \\times 7^0 \\\\\\\\\n2^2 \\times 7^0 \\\\\\\\\n2^0 \\times 7^1 \\\\\\\\\n2^1 \\times 7^1 \\\\\\\\\n2^2 \\times 7^1 \\\\\\\\\n$$\n共计6种，其实就是$6 = 3 * 2 = (2 + 1) \\times (1 + 1)$\n即为各质因子指数加一的乘积，但剩下的算法有些看不懂，留待更新。[^1]\n\n__答案__\n\n76576500\n\n# [013]Large sum\n\n__题意__\n\n给出一百个50位数字的数，计算出他们的和，结果只取前十位数。\n\n__思路__\n\n高精度加法。\n\n__代码__\n\n```c++\nclass BigInt\n{\npublic:\n    const size_t SIZE = 60;\n\n    BigInt();\n    ~BigInt();\n    BigInt(int num);\n    BigInt(BigInt&& b);\n    BigInt(const BigInt& b);\n    BigInt& operator = (const BigInt&);\n    bool operator == (const BigInt& b);\n    void operator += (const BigInt& b);\n    string toString();\n    friend istream& operator >> (istream& in, BigInt& b)\n    {\n        string str;\n        in >> str;\n        auto p = str.rbegin();\n        size_t postion = 0;\n        while(p != str.rend())\n        {\n            b.m_num[postion] = (*p) - '0';\n            ++postion;\n            ++p;\n        }\n        return in;\n    }\n    friend ostream& operator <<(ostream& out, const BigInt& b)\n    {\n        size_t postion = b.SIZE - 1;\n        while(b.m_num[postion] == 0 && postion != 0)\n            --postion;\n        while(postion != 0)\n        {\n            out << static_cast<int>(b.m_num[postion]);\n            --postion;\n        }\n        out << static_cast<int>(b.m_num[0]);\n        return out;\n    }\nprivate:\n    char* m_num;\n};\n\nBigInt::BigInt()\n{\n    m_num = new char[SIZE];\n    memset(m_num, 0, sizeof(char) * SIZE);\n}\n\nBigInt::~BigInt()\n{\n    if(m_num != nullptr)\n        delete[] m_num;\n}\nBigInt::BigInt(int num)\n{\n    assert(num >= 0);\n    m_num = new char[SIZE];\n    memset(m_num, 0, sizeof(char) * SIZE);\n    int p = 0;\n    do{\n        m_num[p] = num % 10;\n        num /= 10;\n        p++;\n    }while(num != 0);\n}\nBigInt::BigInt(BigInt&& b)\n{\n    m_num = b.m_num;\n    b.m_num = nullptr;\n}\nBigInt::BigInt(const BigInt& b)\n{\n    this->m_num = b.m_num;\n}\nbool\nBigInt::operator==(const BigInt& b)\n{\n    for(size_t i = 0;i < SIZE; ++i)\n        if(m_num[i] != b.m_num[i])\n            return false;\n    return true;\n}\nvoid\nBigInt::operator+=(const BigInt& b)\n{\n    for(size_t i = 0; i < SIZE; ++i)\n        m_num[i] += b.m_num[i];\n    for(size_t i = 0; i < SIZE - 1; ++i)\n    {\n        m_num[i + 1] += m_num[i] / 10;\n        m_num[i] = m_num[i] % 10;\n    }\n}\nstring\nBigInt::toString()\n{\n    size_t postion = SIZE - 1;\n    while(m_num[postion] == 0 && postion != 0)\n        --postion;\n    string str(postion + 1, '\\0');\n    auto p = str.begin();\n    while(postion != 0)\n    {\n        (*p) = m_num[postion] + '0';\n        --postion;\n        ++p;\n    }\n    (*p) = m_num[postion] + '0';\n    return str;\n}\nint main(void)\n{\n    BigInt sum,tmp;\n    while(cin >> tmp)\n        sum += tmp;\n    cout << sum.toString().substr(0,10) << endl;\n    return 0;\n}\n```\n__答案__\n\n5537376230\n\n# [014]Longest Collatz sequence\n\n__题意__\n\n3n+1猜想。猜想的内容如下：\n对于一个正整数n，若其为偶数，则将其除2，若其为奇数，则将其乘三再加一，重复上述操作，直至这个数变为1。\n题目问一百万(1e6)内，哪一个数需要进行的操作数最多，输出这个数。\n\n__思路__\n\n模拟，对每一个数都实际进行若干次操作，统计次数，输出。\n\n__优化__\n\n因为对于一个数来说，他操作的过程中，会演化成其他数，这些数字的次数同时也可以确认下来，那么我们就节约了计算这些数字的时间，就是一个记录的过程。\n\n__代码__\n\nC++\\STL\n\n```c++\nconst int MAXN = 1e6;\nint num[MAXN+2];\nint main(void)\n{\n    memset(num,0,sizeof(num));\n    num[1] = 1;\n    int ans = 1;\n    stack<long long> s;\n    for(int i = 1; i <= MAXN; ++i)\n    {\n        if(num[i] == 0)\n        {\n            s.push(i);\n            long long tmp = i;\n            int count;\n            while(tmp != 1)\n            {\n                tmp = (tmp % 2) ? (3 * tmp + 1) : (tmp / 2);\n                if(tmp <= MAXN && num[tmp] != 0)\n                {\n                    count = num[tmp];\n                    while(!s.empty())\n                    {\n                        ++count;\n                        if(s.top() <= MAXN)\n                            num[s.top()] = count;\n                        s.pop();\n                    }\n                    break;\n                }\n                s.push(tmp);\n            }\n        }\n        if(num[ans] < num[i])\n            ans = i;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n__答案__\n\n837799\n\n# [015]Lattice paths\n\n__题意__\n\n在一个方格内，从左上角，沿着线，可以选择向右走一段或向下走一段，直至右下角，计算不重复的路径数量。对于一个2*2的方格，答案是6种，现在问20*20的方格有多少种可能。\n\n__思路__\n\nDP，之前想成了卡特兰数，细看发现规则不一样，于是有下面的代码。\n\nC++\\STL\n\n```c++\nconst int MAXN = 21;\nunsigned long long dp[MAXN][MAXN];\nint main(void)\n{\n    dp[0][0] = 1;\n    // init\n    for(int i = 1; i < MAXN; ++i)\n    {\n        dp[i][0] = dp[i-1][0];\n        dp[0][i] = dp[0][i-1];\n    }\n    for(int i = 1; i < MAXN; ++i)\n        for(int j = 1; j < MAXN; ++j)\n            dp[i][j] = dp[i-1][j] + dp[i][j-1];\n    cout << dp[MAXN-1][MAXN-1] << endl;\n\n    return 0;\n}\n```\n__优化__\n\n其实这是一个简单的排列组合问题，路径的数量其实就是$C^{20}_{40}$\n然后会爆空间，还可以做简化。\n\n$$\n\\begin{align}\nC^{20}_{40} &= \\frac{40 \\times 39 \\times 38 ... \\times 21}{20 \\times 19 \\times 18 ... \\times 1} \\\\\\\\\n &= \\frac{39 \\times 37 \\times 35 ... \\times 21}{10 \\times 9 \\times 8 ... \\times 1} \\times 2^{10}\n\\end{align}\n$$\n__代码__\n\n```c++\nint main(void)\n{\n    long long mo = 1LL;\n    long long de = 1LL;\n    for(int i = 1; i <= 10; ++i)\n    {\n        mo *= 19 + (i * 2);\n        de *= i;\n        long long tmp = gcd(mo,de);\n        mo /= tmp;\n        de /= tmp;\n    }\n    long long ans = mo * 1024 / de;\n    cout << ans;\n    return 0;\n\n}\n```\n__答案__\n\n137846528820\n\n[^1]:https://projecteuler.net/overview=012","source":"_posts/algorithm/Project-Euler/011-015.md","raw":"---\ntitle: 欧拉计划个人题解(011-015)\ndate: 2018-6-11 21:35:33\ncategories: algorithm\ntags: \n    - Project Euler\n    - algorithm\ntoc: true\nbanner: /images/algorithm/Project-Euler/project-euler-banner.png\nthumbnail: /images/algorithm/Project-Euler/project-euler-thumbnail.png\n---\n\n# [011]Largest product in a grid\n\n__题意__\n\n在20*20的矩阵中，找4个同方向(横竖斜)的数字，使它们的乘积最大。\n\n__思路__\n\n直接做，注意对0的处理。\n\n__优化__\n\n$$\n(1+2+...+100)^2 = \\left( \\frac{n \\times (n+1)}{2} \\right)^2 \\\\\\\\\n(1^2 + 2^2 + ... + 100^2) = \\frac{n \\times (n + 1) \\times (2n+1)}{6}\n$$\n\n__代码__\n\nC++\\STL\n\n```c++\nint main(void)\n{\n    for(int i = 0; i < 20; ++i)\n        for(int j = 0; j < 20; ++j)\n            cin >> maps[i][j];\n\n    int ans = 0;\n    int tmp;\n\n    // horizontal\n    for(int i = 0; i < 20; ++i)\n        for(int j = 0; j < 20 - 4; ++j)\n        {\n            tmp = 1;\n            for(int k = 0; k < 4; ++k)\n                tmp *= maps[i][j+k];\n            ans = max(ans,tmp);\n        }\n    // vertical\n    for(int i = 0; i < 20 - 4; ++i)\n        for(int j = 0; j < 20; ++j)\n        {\n            tmp = 1;\n            for(int k = 0; k < 4; ++k)\n                tmp *= maps[i+k][j];\n            ans = max(ans,tmp);\n        }\n\n    // diagonal1\n    for(int i = 0; i < 20 - 4; ++i)\n        for(int j = 0; j < 20 - 4; ++j)\n        {\n            tmp = 1;\n            for(int k = 0; k < 4; ++k)\n                tmp *= maps[i+k][j+k];\n            ans = max(ans,tmp);\n        }\n    // diagonal2\n\n    for(int i = 3; i < 20; ++i)\n        for(int j = 0; j < 20 - 4; ++j)\n        {\n            tmp = 1;\n            for(int k = 0; k < 4; ++k)\n                tmp *= maps[i-k][j+k];\n            ans = max(ans,tmp);\n        }\n\n    cout << ans << endl;\n    return 0;\n}\n```\n\n__答案__\n\n70600674\n\n# [012]Highly divisible triangular number\n\n__题意__\n\n三角形数序列是由对自然数的连加构造而成的。所以第七个三角形数是$1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$。那么三角形数序列中的前十个是：$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...$\n下面我们列出前七个三角形数的约数：\n\n```\n1: 1\n3: 1,3\n6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\n```\n可以看出28是第一个拥有超过5个约数的三角形数。\n那么第一个拥有超过500个约数的三角形数是多少？\n\n\n__思路__\n\n一个根据题意找，注意可以开平方缩小范围。\n\nC++\\STL\n\n```c++\nbool isaccepted(long long num)\n{\n    int factor_count = 0;\n    long long upper = static_cast<long long>(sqrt(num));\n    for(int i = 2; i < upper; ++i)\n        if(num % i == 0)\n            factor_count += 2;\n    if(upper * upper == num)\n        factor_count += 1;\n    if(factor_count >= 500)\n        return true;\n    else\n        return false;\n}\nint main(void)\n{\n    int ans = 1;\n    int i = 1;\n    while(!isaccepted(ans))\n        ans += ++i;\n    cout << ans << endl;\n    return 0;\n}\n\n```\n__优化__\n\n但是上面的代码还是很慢，我们需要引入一个新的算法。\n\n我们知道，一个数的因数，可以由一些质因数组合而成，那么一个数的因数个数与质因数会有关系，我们把一个数分解成若干个质因数，例如\n\n$$\n28 = 2^2 * 7^1\n$$\n则其组合的情况有\n\n$$\n2^0 \\times 7^0 \\\\\\\\\n2^1 \\times 7^0 \\\\\\\\\n2^2 \\times 7^0 \\\\\\\\\n2^0 \\times 7^1 \\\\\\\\\n2^1 \\times 7^1 \\\\\\\\\n2^2 \\times 7^1 \\\\\\\\\n$$\n共计6种，其实就是$6 = 3 * 2 = (2 + 1) \\times (1 + 1)$\n即为各质因子指数加一的乘积，但剩下的算法有些看不懂，留待更新。[^1]\n\n__答案__\n\n76576500\n\n# [013]Large sum\n\n__题意__\n\n给出一百个50位数字的数，计算出他们的和，结果只取前十位数。\n\n__思路__\n\n高精度加法。\n\n__代码__\n\n```c++\nclass BigInt\n{\npublic:\n    const size_t SIZE = 60;\n\n    BigInt();\n    ~BigInt();\n    BigInt(int num);\n    BigInt(BigInt&& b);\n    BigInt(const BigInt& b);\n    BigInt& operator = (const BigInt&);\n    bool operator == (const BigInt& b);\n    void operator += (const BigInt& b);\n    string toString();\n    friend istream& operator >> (istream& in, BigInt& b)\n    {\n        string str;\n        in >> str;\n        auto p = str.rbegin();\n        size_t postion = 0;\n        while(p != str.rend())\n        {\n            b.m_num[postion] = (*p) - '0';\n            ++postion;\n            ++p;\n        }\n        return in;\n    }\n    friend ostream& operator <<(ostream& out, const BigInt& b)\n    {\n        size_t postion = b.SIZE - 1;\n        while(b.m_num[postion] == 0 && postion != 0)\n            --postion;\n        while(postion != 0)\n        {\n            out << static_cast<int>(b.m_num[postion]);\n            --postion;\n        }\n        out << static_cast<int>(b.m_num[0]);\n        return out;\n    }\nprivate:\n    char* m_num;\n};\n\nBigInt::BigInt()\n{\n    m_num = new char[SIZE];\n    memset(m_num, 0, sizeof(char) * SIZE);\n}\n\nBigInt::~BigInt()\n{\n    if(m_num != nullptr)\n        delete[] m_num;\n}\nBigInt::BigInt(int num)\n{\n    assert(num >= 0);\n    m_num = new char[SIZE];\n    memset(m_num, 0, sizeof(char) * SIZE);\n    int p = 0;\n    do{\n        m_num[p] = num % 10;\n        num /= 10;\n        p++;\n    }while(num != 0);\n}\nBigInt::BigInt(BigInt&& b)\n{\n    m_num = b.m_num;\n    b.m_num = nullptr;\n}\nBigInt::BigInt(const BigInt& b)\n{\n    this->m_num = b.m_num;\n}\nbool\nBigInt::operator==(const BigInt& b)\n{\n    for(size_t i = 0;i < SIZE; ++i)\n        if(m_num[i] != b.m_num[i])\n            return false;\n    return true;\n}\nvoid\nBigInt::operator+=(const BigInt& b)\n{\n    for(size_t i = 0; i < SIZE; ++i)\n        m_num[i] += b.m_num[i];\n    for(size_t i = 0; i < SIZE - 1; ++i)\n    {\n        m_num[i + 1] += m_num[i] / 10;\n        m_num[i] = m_num[i] % 10;\n    }\n}\nstring\nBigInt::toString()\n{\n    size_t postion = SIZE - 1;\n    while(m_num[postion] == 0 && postion != 0)\n        --postion;\n    string str(postion + 1, '\\0');\n    auto p = str.begin();\n    while(postion != 0)\n    {\n        (*p) = m_num[postion] + '0';\n        --postion;\n        ++p;\n    }\n    (*p) = m_num[postion] + '0';\n    return str;\n}\nint main(void)\n{\n    BigInt sum,tmp;\n    while(cin >> tmp)\n        sum += tmp;\n    cout << sum.toString().substr(0,10) << endl;\n    return 0;\n}\n```\n__答案__\n\n5537376230\n\n# [014]Longest Collatz sequence\n\n__题意__\n\n3n+1猜想。猜想的内容如下：\n对于一个正整数n，若其为偶数，则将其除2，若其为奇数，则将其乘三再加一，重复上述操作，直至这个数变为1。\n题目问一百万(1e6)内，哪一个数需要进行的操作数最多，输出这个数。\n\n__思路__\n\n模拟，对每一个数都实际进行若干次操作，统计次数，输出。\n\n__优化__\n\n因为对于一个数来说，他操作的过程中，会演化成其他数，这些数字的次数同时也可以确认下来，那么我们就节约了计算这些数字的时间，就是一个记录的过程。\n\n__代码__\n\nC++\\STL\n\n```c++\nconst int MAXN = 1e6;\nint num[MAXN+2];\nint main(void)\n{\n    memset(num,0,sizeof(num));\n    num[1] = 1;\n    int ans = 1;\n    stack<long long> s;\n    for(int i = 1; i <= MAXN; ++i)\n    {\n        if(num[i] == 0)\n        {\n            s.push(i);\n            long long tmp = i;\n            int count;\n            while(tmp != 1)\n            {\n                tmp = (tmp % 2) ? (3 * tmp + 1) : (tmp / 2);\n                if(tmp <= MAXN && num[tmp] != 0)\n                {\n                    count = num[tmp];\n                    while(!s.empty())\n                    {\n                        ++count;\n                        if(s.top() <= MAXN)\n                            num[s.top()] = count;\n                        s.pop();\n                    }\n                    break;\n                }\n                s.push(tmp);\n            }\n        }\n        if(num[ans] < num[i])\n            ans = i;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n__答案__\n\n837799\n\n# [015]Lattice paths\n\n__题意__\n\n在一个方格内，从左上角，沿着线，可以选择向右走一段或向下走一段，直至右下角，计算不重复的路径数量。对于一个2*2的方格，答案是6种，现在问20*20的方格有多少种可能。\n\n__思路__\n\nDP，之前想成了卡特兰数，细看发现规则不一样，于是有下面的代码。\n\nC++\\STL\n\n```c++\nconst int MAXN = 21;\nunsigned long long dp[MAXN][MAXN];\nint main(void)\n{\n    dp[0][0] = 1;\n    // init\n    for(int i = 1; i < MAXN; ++i)\n    {\n        dp[i][0] = dp[i-1][0];\n        dp[0][i] = dp[0][i-1];\n    }\n    for(int i = 1; i < MAXN; ++i)\n        for(int j = 1; j < MAXN; ++j)\n            dp[i][j] = dp[i-1][j] + dp[i][j-1];\n    cout << dp[MAXN-1][MAXN-1] << endl;\n\n    return 0;\n}\n```\n__优化__\n\n其实这是一个简单的排列组合问题，路径的数量其实就是$C^{20}_{40}$\n然后会爆空间，还可以做简化。\n\n$$\n\\begin{align}\nC^{20}_{40} &= \\frac{40 \\times 39 \\times 38 ... \\times 21}{20 \\times 19 \\times 18 ... \\times 1} \\\\\\\\\n &= \\frac{39 \\times 37 \\times 35 ... \\times 21}{10 \\times 9 \\times 8 ... \\times 1} \\times 2^{10}\n\\end{align}\n$$\n__代码__\n\n```c++\nint main(void)\n{\n    long long mo = 1LL;\n    long long de = 1LL;\n    for(int i = 1; i <= 10; ++i)\n    {\n        mo *= 19 + (i * 2);\n        de *= i;\n        long long tmp = gcd(mo,de);\n        mo /= tmp;\n        de /= tmp;\n    }\n    long long ans = mo * 1024 / de;\n    cout << ans;\n    return 0;\n\n}\n```\n__答案__\n\n137846528820\n\n[^1]:https://projecteuler.net/overview=012","slug":"algorithm/Project-Euler/011-015","published":1,"updated":"2018-07-10T17:31:12.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zfw001fektzsb865lov","content":"<h1 id=\"011-Largest-product-in-a-grid\"><a href=\"#011-Largest-product-in-a-grid\" class=\"headerlink\" title=\"[011]Largest product in a grid\"></a>[011]Largest product in a grid</h1><p><strong>题意</strong></p>\n<p>在20*20的矩阵中，找4个同方向(横竖斜)的数字，使它们的乘积最大。</p>\n<p><strong>思路</strong></p>\n<p>直接做，注意对0的处理。</p>\n<p><strong>优化</strong></p>\n<p>$$<br>(1+2+…+100)^2 = \\left( \\frac{n \\times (n+1)}{2} \\right)^2 \\\\<br>(1^2 + 2^2 + … + 100^2) = \\frac{n \\times (n + 1) \\times (2n+1)}{6}<br>$$</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span>; ++j)</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; maps[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// horizontal</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k)</span><br><span class=\"line\">                tmp *= maps[i][j+k];</span><br><span class=\"line\">            ans = max(ans,tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// vertical</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k)</span><br><span class=\"line\">                tmp *= maps[i+k][j];</span><br><span class=\"line\">            ans = max(ans,tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// diagonal1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k)</span><br><span class=\"line\">                tmp *= maps[i+k][j+k];</span><br><span class=\"line\">            ans = max(ans,tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// diagonal2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k)</span><br><span class=\"line\">                tmp *= maps[i-k][j+k];</span><br><span class=\"line\">            ans = max(ans,tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>70600674</p>\n<h1 id=\"012-Highly-divisible-triangular-number\"><a href=\"#012-Highly-divisible-triangular-number\" class=\"headerlink\" title=\"[012]Highly divisible triangular number\"></a>[012]Highly divisible triangular number</h1><p><strong>题意</strong></p>\n<p>三角形数序列是由对自然数的连加构造而成的。所以第七个三角形数是$1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$。那么三角形数序列中的前十个是：$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …$<br>下面我们列出前七个三角形数的约数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1: 1</span><br><span class=\"line\">3: 1,3</span><br><span class=\"line\">6: 1,2,3,6</span><br><span class=\"line\">10: 1,2,5,10</span><br><span class=\"line\">15: 1,3,5,15</span><br><span class=\"line\">21: 1,3,7,21</span><br><span class=\"line\">28: 1,2,4,7,14,28</span><br></pre></td></tr></table></figure>\n<p>可以看出28是第一个拥有超过5个约数的三角形数。<br>那么第一个拥有超过500个约数的三角形数是多少？</p>\n<p><strong>思路</strong></p>\n<p>一个根据题意找，注意可以开平方缩小范围。</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isaccepted</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> factor_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> upper = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;(<span class=\"built_in\">sqrt</span>(num));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; upper; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            factor_count += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(upper * upper == num)</span><br><span class=\"line\">        factor_count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(factor_count &gt;= <span class=\"number\">500</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!isaccepted(ans))</span><br><span class=\"line\">        ans += ++i;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>但是上面的代码还是很慢，我们需要引入一个新的算法。</p>\n<p>我们知道，一个数的因数，可以由一些质因数组合而成，那么一个数的因数个数与质因数会有关系，我们把一个数分解成若干个质因数，例如</p>\n<p>$$<br>28 = 2^2 * 7^1<br>$$<br>则其组合的情况有</p>\n<p>$$<br>2^0 \\times 7^0 \\\\<br>2^1 \\times 7^0 \\\\<br>2^2 \\times 7^0 \\\\<br>2^0 \\times 7^1 \\\\<br>2^1 \\times 7^1 \\\\<br>2^2 \\times 7^1 \\\\<br>$$<br>共计6种，其实就是$6 = 3 * 2 = (2 + 1) \\times (1 + 1)$<br>即为各质因子指数加一的乘积，但剩下的算法有些看不懂，留待更新。<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup></p>\n<p><strong>答案</strong></p>\n<p>76576500</p>\n<h1 id=\"013-Large-sum\"><a href=\"#013-Large-sum\" class=\"headerlink\" title=\"[013]Large sum\"></a>[013]Large sum</h1><p><strong>题意</strong></p>\n<p>给出一百个50位数字的数，计算出他们的和，结果只取前十位数。</p>\n<p><strong>思路</strong></p>\n<p>高精度加法。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigInt</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> SIZE = <span class=\"number\">60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    BigInt();</span><br><span class=\"line\">    ~BigInt();</span><br><span class=\"line\">    BigInt(<span class=\"keyword\">int</span> num);</span><br><span class=\"line\">    BigInt(BigInt&amp;&amp; b);</span><br><span class=\"line\">    BigInt(<span class=\"keyword\">const</span> BigInt&amp; b);</span><br><span class=\"line\">    BigInt&amp; <span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> BigInt&amp; b);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> += (<span class=\"keyword\">const</span> BigInt&amp; b);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">toString</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> istream&amp; <span class=\"keyword\">operator</span> &gt;&gt; (istream&amp; in, BigInt&amp; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">        in &gt;&gt; str;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p = str.rbegin();</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> postion = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != str.rend())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b.m_num[postion] = (*p) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">            ++postion;</span><br><span class=\"line\">            ++p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt;(ostream&amp; out, <span class=\"keyword\">const</span> BigInt&amp; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> postion = b.SIZE - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(b.m_num[postion] == <span class=\"number\">0</span> &amp;&amp; postion != <span class=\"number\">0</span>)</span><br><span class=\"line\">            --postion;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(postion != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            out &lt;&lt; <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(b.m_num[postion]);</span><br><span class=\"line\">            --postion;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out &lt;&lt; <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(b.m_num[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* m_num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">BigInt::BigInt()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[SIZE];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(m_num, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) * SIZE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BigInt::~BigInt()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] m_num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(<span class=\"keyword\">int</span> num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    assert(num &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[SIZE];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(m_num, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) * SIZE);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        m_num[p] = num % <span class=\"number\">10</span>;</span><br><span class=\"line\">        num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        p++;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(num != <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(BigInt&amp;&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_num = b.m_num;</span><br><span class=\"line\">    b.m_num = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(<span class=\"keyword\">const</span> BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;m_num = b.m_num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">bool</span></span><br><span class=\"line\">BigInt::<span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>;i &lt; SIZE; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num[i] != b.m_num[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">BigInt::<span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; SIZE; ++i)</span><br><span class=\"line\">        m_num[i] += b.m_num[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; SIZE - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_num[i + <span class=\"number\">1</span>] += m_num[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">        m_num[i] = m_num[i] % <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">string</span></span><br><span class=\"line\">BigInt::toString()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> postion = SIZE - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m_num[postion] == <span class=\"number\">0</span> &amp;&amp; postion != <span class=\"number\">0</span>)</span><br><span class=\"line\">        --postion;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">str</span><span class=\"params\">(postion + <span class=\"number\">1</span>, <span class=\"string\">'\\0'</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> p = str.begin();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(postion != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (*p) = m_num[postion] + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        --postion;</span><br><span class=\"line\">        ++p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    (*p) = m_num[postion] + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BigInt sum,tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; tmp)</span><br><span class=\"line\">        sum += tmp;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum.toString().substr(<span class=\"number\">0</span>,<span class=\"number\">10</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>5537376230</p>\n<h1 id=\"014-Longest-Collatz-sequence\"><a href=\"#014-Longest-Collatz-sequence\" class=\"headerlink\" title=\"[014]Longest Collatz sequence\"></a>[014]Longest Collatz sequence</h1><p><strong>题意</strong></p>\n<p>3n+1猜想。猜想的内容如下：<br>对于一个正整数n，若其为偶数，则将其除2，若其为奇数，则将其乘三再加一，重复上述操作，直至这个数变为1。<br>题目问一百万(1e6)内，哪一个数需要进行的操作数最多，输出这个数。</p>\n<p><strong>思路</strong></p>\n<p>模拟，对每一个数都实际进行若干次操作，统计次数，输出。</p>\n<p><strong>优化</strong></p>\n<p>因为对于一个数来说，他操作的过程中，会演化成其他数，这些数字的次数同时也可以确认下来，那么我们就节约了计算这些数字的时间，就是一个记录的过程。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e6</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num[MAXN+<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(num,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(num));</span><br><span class=\"line\">    num[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= MAXN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s.push(i);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = i;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(tmp != <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tmp = (tmp % <span class=\"number\">2</span>) ? (<span class=\"number\">3</span> * tmp + <span class=\"number\">1</span>) : (tmp / <span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp &lt;= MAXN &amp;&amp; num[tmp] != <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    count = num[tmp];</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(!s.empty())</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ++count;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(s.top() &lt;= MAXN)</span><br><span class=\"line\">                            num[s.top()] = count;</span><br><span class=\"line\">                        s.pop();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                s.push(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[ans] &lt; num[i])</span><br><span class=\"line\">            ans = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>837799</p>\n<h1 id=\"015-Lattice-paths\"><a href=\"#015-Lattice-paths\" class=\"headerlink\" title=\"[015]Lattice paths\"></a>[015]Lattice paths</h1><p><strong>题意</strong></p>\n<p>在一个方格内，从左上角，沿着线，可以选择向右走一段或向下走一段，直至右下角，计算不重复的路径数量。对于一个2<em>2的方格，答案是6种，现在问20</em>20的方格有多少种可能。</p>\n<p><strong>思路</strong></p>\n<p>DP，之前想成了卡特兰数，细看发现规则不一样，于是有下面的代码。</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[MAXN][MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// init</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; MAXN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = dp[<span class=\"number\">0</span>][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; MAXN; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; MAXN; ++j)</span><br><span class=\"line\">            dp[i][j] = dp[i<span class=\"number\">-1</span>][j] + dp[i][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[MAXN<span class=\"number\">-1</span>][MAXN<span class=\"number\">-1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>其实这是一个简单的排列组合问题，路径的数量其实就是$C^{20}_{40}$<br>然后会爆空间，还可以做简化。</p>\n<p>$$<br>\\begin{align}<br>C^{20}_{40} &amp;= \\frac{40 \\times 39 \\times 38 … \\times 21}{20 \\times 19 \\times 18 … \\times 1} \\\\<br> &amp;= \\frac{39 \\times 37 \\times 35 … \\times 21}{10 \\times 9 \\times 8 … \\times 1} \\times 2^{10}<br>\\end{align}<br>$$<br><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mo = <span class=\"number\">1L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> de = <span class=\"number\">1L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mo *= <span class=\"number\">19</span> + (i * <span class=\"number\">2</span>);</span><br><span class=\"line\">        de *= i;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = gcd(mo,de);</span><br><span class=\"line\">        mo /= tmp;</span><br><span class=\"line\">        de /= tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = mo * <span class=\"number\">1024</span> / de;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>137846528820</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><a href=\"https://projecteuler.net/overview=012\" target=\"_blank\" rel=\"noopener\">https://projecteuler.net/overview=012</a></span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"011-Largest-product-in-a-grid\"><a href=\"#011-Largest-product-in-a-grid\" class=\"headerlink\" title=\"[011]Largest product in a grid\"></a>[011]Largest product in a grid</h1><p><strong>题意</strong></p>\n<p>在20*20的矩阵中，找4个同方向(横竖斜)的数字，使它们的乘积最大。</p>\n<p><strong>思路</strong></p>\n<p>直接做，注意对0的处理。</p>\n<p><strong>优化</strong></p>\n<p>$$<br>(1+2+…+100)^2 = \\left( \\frac{n \\times (n+1)}{2} \\right)^2 \\\\<br>(1^2 + 2^2 + … + 100^2) = \\frac{n \\times (n + 1) \\times (2n+1)}{6}<br>$$</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span>; ++j)</span><br><span class=\"line\">            <span class=\"built_in\">cin</span> &gt;&gt; maps[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// horizontal</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k)</span><br><span class=\"line\">                tmp *= maps[i][j+k];</span><br><span class=\"line\">            ans = max(ans,tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// vertical</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k)</span><br><span class=\"line\">                tmp *= maps[i+k][j];</span><br><span class=\"line\">            ans = max(ans,tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// diagonal1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k)</span><br><span class=\"line\">                tmp *= maps[i+k][j+k];</span><br><span class=\"line\">            ans = max(ans,tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// diagonal2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span> - <span class=\"number\">4</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k)</span><br><span class=\"line\">                tmp *= maps[i-k][j+k];</span><br><span class=\"line\">            ans = max(ans,tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>70600674</p>\n<h1 id=\"012-Highly-divisible-triangular-number\"><a href=\"#012-Highly-divisible-triangular-number\" class=\"headerlink\" title=\"[012]Highly divisible triangular number\"></a>[012]Highly divisible triangular number</h1><p><strong>题意</strong></p>\n<p>三角形数序列是由对自然数的连加构造而成的。所以第七个三角形数是$1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$。那么三角形数序列中的前十个是：$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …$<br>下面我们列出前七个三角形数的约数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1: 1</span><br><span class=\"line\">3: 1,3</span><br><span class=\"line\">6: 1,2,3,6</span><br><span class=\"line\">10: 1,2,5,10</span><br><span class=\"line\">15: 1,3,5,15</span><br><span class=\"line\">21: 1,3,7,21</span><br><span class=\"line\">28: 1,2,4,7,14,28</span><br></pre></td></tr></table></figure>\n<p>可以看出28是第一个拥有超过5个约数的三角形数。<br>那么第一个拥有超过500个约数的三角形数是多少？</p>\n<p><strong>思路</strong></p>\n<p>一个根据题意找，注意可以开平方缩小范围。</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isaccepted</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> factor_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> upper = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;(<span class=\"built_in\">sqrt</span>(num));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; upper; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            factor_count += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(upper * upper == num)</span><br><span class=\"line\">        factor_count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(factor_count &gt;= <span class=\"number\">500</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!isaccepted(ans))</span><br><span class=\"line\">        ans += ++i;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>但是上面的代码还是很慢，我们需要引入一个新的算法。</p>\n<p>我们知道，一个数的因数，可以由一些质因数组合而成，那么一个数的因数个数与质因数会有关系，我们把一个数分解成若干个质因数，例如</p>\n<p>$$<br>28 = 2^2 * 7^1<br>$$<br>则其组合的情况有</p>\n<p>$$<br>2^0 \\times 7^0 \\\\<br>2^1 \\times 7^0 \\\\<br>2^2 \\times 7^0 \\\\<br>2^0 \\times 7^1 \\\\<br>2^1 \\times 7^1 \\\\<br>2^2 \\times 7^1 \\\\<br>$$<br>共计6种，其实就是$6 = 3 * 2 = (2 + 1) \\times (1 + 1)$<br>即为各质因子指数加一的乘积，但剩下的算法有些看不懂，留待更新。<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup></p>\n<p><strong>答案</strong></p>\n<p>76576500</p>\n<h1 id=\"013-Large-sum\"><a href=\"#013-Large-sum\" class=\"headerlink\" title=\"[013]Large sum\"></a>[013]Large sum</h1><p><strong>题意</strong></p>\n<p>给出一百个50位数字的数，计算出他们的和，结果只取前十位数。</p>\n<p><strong>思路</strong></p>\n<p>高精度加法。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigInt</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> SIZE = <span class=\"number\">60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    BigInt();</span><br><span class=\"line\">    ~BigInt();</span><br><span class=\"line\">    BigInt(<span class=\"keyword\">int</span> num);</span><br><span class=\"line\">    BigInt(BigInt&amp;&amp; b);</span><br><span class=\"line\">    BigInt(<span class=\"keyword\">const</span> BigInt&amp; b);</span><br><span class=\"line\">    BigInt&amp; <span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> BigInt&amp;);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (<span class=\"keyword\">const</span> BigInt&amp; b);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> += (<span class=\"keyword\">const</span> BigInt&amp; b);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">toString</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> istream&amp; <span class=\"keyword\">operator</span> &gt;&gt; (istream&amp; in, BigInt&amp; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> str;</span><br><span class=\"line\">        in &gt;&gt; str;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p = str.rbegin();</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> postion = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != str.rend())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b.m_num[postion] = (*p) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">            ++postion;</span><br><span class=\"line\">            ++p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt;(ostream&amp; out, <span class=\"keyword\">const</span> BigInt&amp; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> postion = b.SIZE - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(b.m_num[postion] == <span class=\"number\">0</span> &amp;&amp; postion != <span class=\"number\">0</span>)</span><br><span class=\"line\">            --postion;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(postion != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            out &lt;&lt; <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(b.m_num[postion]);</span><br><span class=\"line\">            --postion;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out &lt;&lt; <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(b.m_num[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* m_num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">BigInt::BigInt()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[SIZE];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(m_num, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) * SIZE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BigInt::~BigInt()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m_num != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] m_num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(<span class=\"keyword\">int</span> num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    assert(num &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">    m_num = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[SIZE];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(m_num, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) * SIZE);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        m_num[p] = num % <span class=\"number\">10</span>;</span><br><span class=\"line\">        num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        p++;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(num != <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(BigInt&amp;&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_num = b.m_num;</span><br><span class=\"line\">    b.m_num = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BigInt::BigInt(<span class=\"keyword\">const</span> BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;m_num = b.m_num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">bool</span></span><br><span class=\"line\">BigInt::<span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>;i &lt; SIZE; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m_num[i] != b.m_num[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">BigInt::<span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> BigInt&amp; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; SIZE; ++i)</span><br><span class=\"line\">        m_num[i] += b.m_num[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; SIZE - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_num[i + <span class=\"number\">1</span>] += m_num[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">        m_num[i] = m_num[i] % <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">string</span></span><br><span class=\"line\">BigInt::toString()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> postion = SIZE - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m_num[postion] == <span class=\"number\">0</span> &amp;&amp; postion != <span class=\"number\">0</span>)</span><br><span class=\"line\">        --postion;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">str</span><span class=\"params\">(postion + <span class=\"number\">1</span>, <span class=\"string\">'\\0'</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> p = str.begin();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(postion != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (*p) = m_num[postion] + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        --postion;</span><br><span class=\"line\">        ++p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    (*p) = m_num[postion] + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BigInt sum,tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; tmp)</span><br><span class=\"line\">        sum += tmp;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum.toString().substr(<span class=\"number\">0</span>,<span class=\"number\">10</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>5537376230</p>\n<h1 id=\"014-Longest-Collatz-sequence\"><a href=\"#014-Longest-Collatz-sequence\" class=\"headerlink\" title=\"[014]Longest Collatz sequence\"></a>[014]Longest Collatz sequence</h1><p><strong>题意</strong></p>\n<p>3n+1猜想。猜想的内容如下：<br>对于一个正整数n，若其为偶数，则将其除2，若其为奇数，则将其乘三再加一，重复上述操作，直至这个数变为1。<br>题目问一百万(1e6)内，哪一个数需要进行的操作数最多，输出这个数。</p>\n<p><strong>思路</strong></p>\n<p>模拟，对每一个数都实际进行若干次操作，统计次数，输出。</p>\n<p><strong>优化</strong></p>\n<p>因为对于一个数来说，他操作的过程中，会演化成其他数，这些数字的次数同时也可以确认下来，那么我们就节约了计算这些数字的时间，就是一个记录的过程。</p>\n<p><strong>代码</strong></p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e6</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num[MAXN+<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(num,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(num));</span><br><span class=\"line\">    num[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= MAXN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s.push(i);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = i;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(tmp != <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tmp = (tmp % <span class=\"number\">2</span>) ? (<span class=\"number\">3</span> * tmp + <span class=\"number\">1</span>) : (tmp / <span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp &lt;= MAXN &amp;&amp; num[tmp] != <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    count = num[tmp];</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(!s.empty())</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ++count;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(s.top() &lt;= MAXN)</span><br><span class=\"line\">                            num[s.top()] = count;</span><br><span class=\"line\">                        s.pop();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                s.push(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[ans] &lt; num[i])</span><br><span class=\"line\">            ans = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>837799</p>\n<h1 id=\"015-Lattice-paths\"><a href=\"#015-Lattice-paths\" class=\"headerlink\" title=\"[015]Lattice paths\"></a>[015]Lattice paths</h1><p><strong>题意</strong></p>\n<p>在一个方格内，从左上角，沿着线，可以选择向右走一段或向下走一段，直至右下角，计算不重复的路径数量。对于一个2<em>2的方格，答案是6种，现在问20</em>20的方格有多少种可能。</p>\n<p><strong>思路</strong></p>\n<p>DP，之前想成了卡特兰数，细看发现规则不一样，于是有下面的代码。</p>\n<p>C++\\STL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[MAXN][MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// init</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; MAXN; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = dp[<span class=\"number\">0</span>][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; MAXN; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; MAXN; ++j)</span><br><span class=\"line\">            dp[i][j] = dp[i<span class=\"number\">-1</span>][j] + dp[i][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[MAXN<span class=\"number\">-1</span>][MAXN<span class=\"number\">-1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优化</strong></p>\n<p>其实这是一个简单的排列组合问题，路径的数量其实就是$C^{20}_{40}$<br>然后会爆空间，还可以做简化。</p>\n<p>$$<br>\\begin{align}<br>C^{20}_{40} &amp;= \\frac{40 \\times 39 \\times 38 … \\times 21}{20 \\times 19 \\times 18 … \\times 1} \\\\<br> &amp;= \\frac{39 \\times 37 \\times 35 … \\times 21}{10 \\times 9 \\times 8 … \\times 1} \\times 2^{10}<br>\\end{align}<br>$$<br><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mo = <span class=\"number\">1L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> de = <span class=\"number\">1L</span>L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mo *= <span class=\"number\">19</span> + (i * <span class=\"number\">2</span>);</span><br><span class=\"line\">        de *= i;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = gcd(mo,de);</span><br><span class=\"line\">        mo /= tmp;</span><br><span class=\"line\">        de /= tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = mo * <span class=\"number\">1024</span> / de;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong></p>\n<p>137846528820</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><a href=\"https://projecteuler.net/overview=012\" target=\"_blank\" rel=\"noopener\">https://projecteuler.net/overview=012</a></span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"美文系列：滕王阁序(1)","date":"2018-07-10T17:31:12.335Z","toc":false,"thumbnail":"/images/reproduce/literature/TengWangGeXu-thumbnail.png","banner":"/images/reproduce/literature/TengWangGeXu-banner.png","_content":"本文系转载，已征得原文作者同意，特此声明。\n原文作者：海上钢琴师\n原文链接：[http://www.acfun.cn/a/ac4159097](http://www.acfun.cn/a/ac4159097)\n\n---\n\n**豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。**\n\n如果要评选古代最美的文章，那《滕王阁序》即使不能夺魁，也一定是在三甲之内。这篇文章，可以说是古代骈文中的最高峰、集大成之作。此前、此后，都没有能在骈文之道上超过这一篇的。\n\n骈文是一种极端华丽的文体。这种文体发端于汉魏，盛行于南北朝，特点是每一句都像对联一样，严格对仗。同时，多使用四字、六字的句子，让整体韵律更加周密协调。为了让内容更有深意，骈文还讲究多用典故，每一句里都隐含着各种历史故事。整篇下来，就仿佛是精雕细琢、嵌满珠玉、金碧辉煌的宫殿一般，给人以目不暇接之感。\n\n但可想而知，这种文章非常难写。就像最近大热的《国家宝藏》节目里，大家一起嘲讽乾隆的各种釉彩大瓶一样——骈文因为太华丽，所以写起来往往顾此失彼：注重内涵了，结果文辞不够华美；雕琢文采了，结果空洞无味；典故用少了，读来就有村气；典故用多用僻了，大家又觉得费解。要把握好其中的平衡，写出一篇好的骈文，简直难如登天。\n\n不过，对于真正的天才来说，这些都不是事儿啊！\n\n王勃就是这样的天才。作为初唐四杰王杨卢骆之首，王勃的才气得到了当时人们的一致认可，他们四位是承上启下、开辟了唐代文学盛世的重要人物，其才能可见一斑。\n\n王勃少年成名，十岁前通读经书，十岁后就已经因诗文而名动京师了。虽然他不到三十岁就意外身故，但留下的一系列诗文足以让他列入唐代最顶尖的文学家行列。而他最出色的作品，就是这篇《滕王阁序》。\n\n好在哪里？咱们一起来读一读吧！\n\n**豫章故郡，洪都新府。星分翼轸，地接衡庐。**\n\n这是开篇四句。滕王阁在江西南昌，紧靠赣江，号称江南楼阁之首。这座楼是唐初一位亲王修的，他的封号是滕王，所以这座楼就叫滕王阁。\n\n南昌是一座极有历史的古城。汉代这里叫豫章，唐代这里叫洪州，所以前两句直接从历史角度描述了这座城市在哪里。豫章故郡，说明过去这里是古豫章所在。洪都新府，说明这里是当今的新洪州城。历史和现代，在这里交汇在一起。\n\n描述了时间的坐标，接下来就是空间的坐标。中国古代将星空也分为不同的星宿，相当于现在的星座，并且将这些星宿和古中国的地理划分一一对应起来。南昌一带，刚好对应天上翼宿和轸宿之间，所以说星分翼轸。\n\n在天为翼轸之间，在地刚好是衡山和庐山之间，所以紧跟着说地接衡庐。一在天，一在地，完美的描述了南昌的空间坐标。于是，通过短短十六个字，南昌城的时空一下子就确定了。\n\n**襟三江而带五湖，控蛮荆而引瓯越。**\n\n有了时空的位置，那这个城市的意义呢？跟下来两句立刻就解释了。南昌紧靠赣江，刚好是三条支流交汇之处；五湖，这个一般来说没有具体的指代，但我认真的在地图上看过，貌似还真是有五个：\n\n![（自己找一找，三江和五湖都在哪里呢？）](/images/reproduce/literature/TengWangGeXu-1-1.png)\n\n控蛮荆而引瓯越，这里面就指出了江西的重要性。江西西接湖南湖北，这一片是历史上的楚国、三国时的荆州。楚王自己说“我蛮夷也”，所以这里用蛮荆来指代这一片楚地。楚人善战，江西居其下游起到抑制作用，所以用控字表达江西对两湖地区的控制力。而江西往东，就是浙江一带，乃是古时候的越国。古越国都城为东瓯，金瓯一词还有国土一角的意思，所以瓯越包含了这两重含义。江西居于越国上游，所以用引字，表达两地的关系。\n\n综合起来，这两句先描绘了南昌的地形，又赞扬了地理位置之重要，一下子就把南昌城的意义捧得很高了。\n\n**物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。**\n\n这两句里，创造出了两个常常连用的成语：物华天宝、人杰地灵。物华天宝，指这里的出产极其美好，仿佛都是来自天上的宝物一般。光吹不行，后面就是个具体的例子——龙光射牛斗之墟。\n\n这是个晋代故事。西晋时有位大牛人张华，这哥们不仅官做的大，学问更是高深，乃是中国历史上第一位博物学家。据说他当时看到天上的牛宿和斗宿之间常有紫光闪烁，于是就问朋友雷焕是什么原因。雷焕说，这一定是地上有奇珍异宝，宝光冲天，所以看到天上都有紫光。看这个位置，宝物应该是埋藏在豫章一带。后来，他们果然在豫章郡治下的丰城县发掘出一个石匣，其中是两把宝剑，一名龙泉，一名太阿。后来，这两把剑落入水中，人们下去打捞的时候没有看到宝剑，却看到两条蛟龙蜿蜒盘旋，从此这两把剑就不知所踪了。\n\n所以你看，我说这地物华天宝，这是真的啊！挖出来两把剑都能化龙！\n\n人杰地灵，是说在这片充满灵气的土地上，盛产各种人才。同样，后面也是一个具体的例子。陈蕃是汉末名士，著名的“一屋不扫何以扫天下”就是他小时候说的。后来他在豫章做官的时候，和豫章名士徐孺子交好。好到什么程度呢？他平时根本不接待其他客人，但专门给徐孺子打了一张床榻，每当徐孺子来的时候，两人就躺在这张专床上通宵达旦的聊天……\n\nEmmmmmm……\n\n不过不管这个故事究竟有什么含义，江西确实是个出才子的地方，所以这一句人杰地灵，也仿佛预示了江西后来井喷式出现的各类人才，实在是精辟的很。\n\n这两句连起来，就又把江西和南昌捧到了一个新的高度。\n\n为什么要捧呢？其实原因很简单——王勃这是客场作战。王勃不是江西人，和当时滕王阁上的一大群名流也没有交集。这是以当时的洪州都督、州牧为首所发起的一场上流社会party，王勃因为当时去南方探望自己外地做官的父亲，刚好路过南昌，因为文名而被邀请参加的。\n\n据传说，当时本来是都督阎公让自己的女婿事先做好了一篇赋，准备在聚会上抛出来。结果在聚会上，阎公客套了一句：“哪位高才，愿意做赋而纪之啊？”，按照剧本，大家也都知道这时候都该谦让一番，最后公推阎公女婿出来执笔，给这场盛会划上句号。\n\n结果，十几岁的王勃不知道还有这么多门道，一听要写文章，那当然是我来啊！于是就直接跳了出来，表示既然如此，那我这个高才就来写一篇吧！\n\n当时阎公脸就黑了，但又不能自己打脸，于是就表示行啊小伙子，那你有胆你就写写看，然后拂袖而去，到楼上雅间里生闷气去了。\n\n王勃这时候终于感觉出不对来了……看来不小心踩了个大坑啊。怎么办，在别人的场子上打了主人的脸，换了一般人，这时候估计就要屁滚尿流落荒而逃了，先保住自己这条狗命再说。\n\n但王勃不是一般人。在这样的压力之下，他反而文思泉涌——既然已经打了脸，那我干脆就把这脸打的漂漂亮亮的，让你们不得不服，而且还要亲口说打的好！不过大家面子上还是要过得去的，我在文章里捧你们一下，给主人修个好看的台阶，看你怎么办。\n\n于是，接下来几句，更是捧到了极致。\n\n**雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。**\n\n雄州雾列，是说洪州乃是大唐的一等雄州，远眺山川，楼宇屋舍田地连绵不绝，一直隐没到远方的薄雾之中。俊采星驰，是说当地俊杰犹如星辰一般繁多、闪耀、在这片丰饶的土地上往来驰骋，使人目不暇接。著名影星周先生，其名字就是来自这个词。\n\n![（雄州雾列，大致就是这个feel）](/images/reproduce/literature/TengWangGeXu-1-2.jpg)\n\n台隍枕夷夏之交，夷是蛮夷，夏是华夏。这句呼应了上面对江西地理位置重要性的描述，更进一步的点出了这座楼台、这座城池就位于蛮夷文明和中原文明的分界点上，乃是照亮蛮荒之地的明灯。而今天在这里的宾客和主人呢？也自然是集中了东南地区最杰出的人士，所以是宾主尽东南之美。\n\n**都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。**\n\n为了怕在座各位不明白，我王勃再强调一下，我们要紧密团结在阎都督和宇文州牧的领导周围！阎都督素有雅望，德高望重，乃是天下名士。棨戟是古时候大官出行时，队伍前面举的仪仗。遥临两字，更是说明了阎都督是不远千里来这里任职指导工作、给我们指明前进道路的，大家更应该有感恩之心才对啊。\n\n而宇文州牧，也是我们做官做人之懿范，是值得我们学习的好榜样。而且宇文州牧只是在这里暂时任职——你问为什么是暂时？废话，那当然是以后很快就要高升啊！\n\n估计阎公看到这两句，脸色就很难再黑起来了。虽然这个年轻人有点狂傲，但还是很懂得分寸的嘛！\n\n**十旬休假，胜友如云；千里逢迎，高朋满座。**\n\n这两句指出了这次聚会的原因，还贡献了高朋满座这个成语。大家总不能没事工作日聚餐，这次聚会，是因为刚好赶上了周末——唐代以十天为一旬，旬末一天是休息日。恰好赶上很多人杰聚集于此，所以大家才举行了这场聚会。为了这次盛大的聚会，有些朋友（比如我）甚至是不远千里而来的，大家坐满了席位，好一派盛况！\n\n**腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。**\n\n因为席上还有几位地位很高的朋友，所以再特意给大家点出来，尤其是咱们江西的文学领袖孟学士和军队领导王将军。孟学士是一代诗词文学大家，其文章如同蛟龙和凤凰一样绚烂。王将军的武艺非常出色，在武库里收藏的神兵如同古代名剑紫电、青霜一般名贵。因为朋友太多，这里就不再每一位都列出来了，还请大家见谅，谁有不同意见，可以和孟学士、王将军谈一谈。\n\n**家君作宰，路出名区；童子何知，躬逢胜饯。**\n\n在第一段的最后，捧完这座城市、捧完在座的诸位大佬、满座贤达以后，王勃点出了自己的身份。我也不是个毫无背景的人，我爸也是在外做官、管理一方的。这是在去探亲的路上，我恰好经过了咱们这座名城。大家都是有身份的人，就别小看我、难为我了吧？\n\n童子两字说出了王勃的年龄。历史上对于王勃是哪一年写的《滕王阁序》有两种说法，一说是十多岁的时候，一说是二十多岁，双方各有依据，争论不休。但我个人更倾向于相信十多岁的说法，一是因为这样更有传奇性，二是很难相信二十多岁、早就考取功名并任过官职的王勃还要自称为童子。\n\n所以，这最后一句也是谦让。诸君，我只是个十多岁的无知小朋友，恰好有幸遇到这次盛宴。所以，如果有哪里做的不到位的、如果后面的文字里有什么小小得罪的地方，还请大家体谅。\n\n回头再看这第一段，虽然篇幅精炼，但把这场盛会的来龙去脉、地点、原因都说的一清二楚，同时还对江西、对南昌、对主人、对各位宾客吹捧的极为到位。凭心而论，虽然南昌很好、虽然在座的也确实是当时当地之俊才，但大家看到这样的夸赞后，怕不是还是会有一丝脸红，心里有几分窃喜的。纵然大家再有什么被抢了风头的不快，看到这样的文笔、看到这样的褒扬，也没有办法再发作了。不仅如此，这个颇有气势的开场，更是令人对后面的几段产生了莫大的期待。大江之畔、高楼之上，估计宾客们正在屏息静待，看这个十多岁的少年还能抛出多么灿烂的文字。\n\n那么，接下来，前言结束，我这就开始表演了！\n\n![](/images/reproduce/literature/TengWangGeXu-1-3.jpg)","source":"_posts/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-1.md","raw":"---\ntitle: 美文系列：滕王阁序(1)\ndate: 2018年6月10日 03:12:52\ncategories: 文学\ntags: \n    - 文学\n    - 滕王阁序\n    - 转载\ntoc: false\nthumbnail: /images/reproduce/literature/TengWangGeXu-thumbnail.png\nbanner: /images/reproduce/literature/TengWangGeXu-banner.png\n---\n本文系转载，已征得原文作者同意，特此声明。\n原文作者：海上钢琴师\n原文链接：[http://www.acfun.cn/a/ac4159097](http://www.acfun.cn/a/ac4159097)\n\n---\n\n**豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。**\n\n如果要评选古代最美的文章，那《滕王阁序》即使不能夺魁，也一定是在三甲之内。这篇文章，可以说是古代骈文中的最高峰、集大成之作。此前、此后，都没有能在骈文之道上超过这一篇的。\n\n骈文是一种极端华丽的文体。这种文体发端于汉魏，盛行于南北朝，特点是每一句都像对联一样，严格对仗。同时，多使用四字、六字的句子，让整体韵律更加周密协调。为了让内容更有深意，骈文还讲究多用典故，每一句里都隐含着各种历史故事。整篇下来，就仿佛是精雕细琢、嵌满珠玉、金碧辉煌的宫殿一般，给人以目不暇接之感。\n\n但可想而知，这种文章非常难写。就像最近大热的《国家宝藏》节目里，大家一起嘲讽乾隆的各种釉彩大瓶一样——骈文因为太华丽，所以写起来往往顾此失彼：注重内涵了，结果文辞不够华美；雕琢文采了，结果空洞无味；典故用少了，读来就有村气；典故用多用僻了，大家又觉得费解。要把握好其中的平衡，写出一篇好的骈文，简直难如登天。\n\n不过，对于真正的天才来说，这些都不是事儿啊！\n\n王勃就是这样的天才。作为初唐四杰王杨卢骆之首，王勃的才气得到了当时人们的一致认可，他们四位是承上启下、开辟了唐代文学盛世的重要人物，其才能可见一斑。\n\n王勃少年成名，十岁前通读经书，十岁后就已经因诗文而名动京师了。虽然他不到三十岁就意外身故，但留下的一系列诗文足以让他列入唐代最顶尖的文学家行列。而他最出色的作品，就是这篇《滕王阁序》。\n\n好在哪里？咱们一起来读一读吧！\n\n**豫章故郡，洪都新府。星分翼轸，地接衡庐。**\n\n这是开篇四句。滕王阁在江西南昌，紧靠赣江，号称江南楼阁之首。这座楼是唐初一位亲王修的，他的封号是滕王，所以这座楼就叫滕王阁。\n\n南昌是一座极有历史的古城。汉代这里叫豫章，唐代这里叫洪州，所以前两句直接从历史角度描述了这座城市在哪里。豫章故郡，说明过去这里是古豫章所在。洪都新府，说明这里是当今的新洪州城。历史和现代，在这里交汇在一起。\n\n描述了时间的坐标，接下来就是空间的坐标。中国古代将星空也分为不同的星宿，相当于现在的星座，并且将这些星宿和古中国的地理划分一一对应起来。南昌一带，刚好对应天上翼宿和轸宿之间，所以说星分翼轸。\n\n在天为翼轸之间，在地刚好是衡山和庐山之间，所以紧跟着说地接衡庐。一在天，一在地，完美的描述了南昌的空间坐标。于是，通过短短十六个字，南昌城的时空一下子就确定了。\n\n**襟三江而带五湖，控蛮荆而引瓯越。**\n\n有了时空的位置，那这个城市的意义呢？跟下来两句立刻就解释了。南昌紧靠赣江，刚好是三条支流交汇之处；五湖，这个一般来说没有具体的指代，但我认真的在地图上看过，貌似还真是有五个：\n\n![（自己找一找，三江和五湖都在哪里呢？）](/images/reproduce/literature/TengWangGeXu-1-1.png)\n\n控蛮荆而引瓯越，这里面就指出了江西的重要性。江西西接湖南湖北，这一片是历史上的楚国、三国时的荆州。楚王自己说“我蛮夷也”，所以这里用蛮荆来指代这一片楚地。楚人善战，江西居其下游起到抑制作用，所以用控字表达江西对两湖地区的控制力。而江西往东，就是浙江一带，乃是古时候的越国。古越国都城为东瓯，金瓯一词还有国土一角的意思，所以瓯越包含了这两重含义。江西居于越国上游，所以用引字，表达两地的关系。\n\n综合起来，这两句先描绘了南昌的地形，又赞扬了地理位置之重要，一下子就把南昌城的意义捧得很高了。\n\n**物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。**\n\n这两句里，创造出了两个常常连用的成语：物华天宝、人杰地灵。物华天宝，指这里的出产极其美好，仿佛都是来自天上的宝物一般。光吹不行，后面就是个具体的例子——龙光射牛斗之墟。\n\n这是个晋代故事。西晋时有位大牛人张华，这哥们不仅官做的大，学问更是高深，乃是中国历史上第一位博物学家。据说他当时看到天上的牛宿和斗宿之间常有紫光闪烁，于是就问朋友雷焕是什么原因。雷焕说，这一定是地上有奇珍异宝，宝光冲天，所以看到天上都有紫光。看这个位置，宝物应该是埋藏在豫章一带。后来，他们果然在豫章郡治下的丰城县发掘出一个石匣，其中是两把宝剑，一名龙泉，一名太阿。后来，这两把剑落入水中，人们下去打捞的时候没有看到宝剑，却看到两条蛟龙蜿蜒盘旋，从此这两把剑就不知所踪了。\n\n所以你看，我说这地物华天宝，这是真的啊！挖出来两把剑都能化龙！\n\n人杰地灵，是说在这片充满灵气的土地上，盛产各种人才。同样，后面也是一个具体的例子。陈蕃是汉末名士，著名的“一屋不扫何以扫天下”就是他小时候说的。后来他在豫章做官的时候，和豫章名士徐孺子交好。好到什么程度呢？他平时根本不接待其他客人，但专门给徐孺子打了一张床榻，每当徐孺子来的时候，两人就躺在这张专床上通宵达旦的聊天……\n\nEmmmmmm……\n\n不过不管这个故事究竟有什么含义，江西确实是个出才子的地方，所以这一句人杰地灵，也仿佛预示了江西后来井喷式出现的各类人才，实在是精辟的很。\n\n这两句连起来，就又把江西和南昌捧到了一个新的高度。\n\n为什么要捧呢？其实原因很简单——王勃这是客场作战。王勃不是江西人，和当时滕王阁上的一大群名流也没有交集。这是以当时的洪州都督、州牧为首所发起的一场上流社会party，王勃因为当时去南方探望自己外地做官的父亲，刚好路过南昌，因为文名而被邀请参加的。\n\n据传说，当时本来是都督阎公让自己的女婿事先做好了一篇赋，准备在聚会上抛出来。结果在聚会上，阎公客套了一句：“哪位高才，愿意做赋而纪之啊？”，按照剧本，大家也都知道这时候都该谦让一番，最后公推阎公女婿出来执笔，给这场盛会划上句号。\n\n结果，十几岁的王勃不知道还有这么多门道，一听要写文章，那当然是我来啊！于是就直接跳了出来，表示既然如此，那我这个高才就来写一篇吧！\n\n当时阎公脸就黑了，但又不能自己打脸，于是就表示行啊小伙子，那你有胆你就写写看，然后拂袖而去，到楼上雅间里生闷气去了。\n\n王勃这时候终于感觉出不对来了……看来不小心踩了个大坑啊。怎么办，在别人的场子上打了主人的脸，换了一般人，这时候估计就要屁滚尿流落荒而逃了，先保住自己这条狗命再说。\n\n但王勃不是一般人。在这样的压力之下，他反而文思泉涌——既然已经打了脸，那我干脆就把这脸打的漂漂亮亮的，让你们不得不服，而且还要亲口说打的好！不过大家面子上还是要过得去的，我在文章里捧你们一下，给主人修个好看的台阶，看你怎么办。\n\n于是，接下来几句，更是捧到了极致。\n\n**雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。**\n\n雄州雾列，是说洪州乃是大唐的一等雄州，远眺山川，楼宇屋舍田地连绵不绝，一直隐没到远方的薄雾之中。俊采星驰，是说当地俊杰犹如星辰一般繁多、闪耀、在这片丰饶的土地上往来驰骋，使人目不暇接。著名影星周先生，其名字就是来自这个词。\n\n![（雄州雾列，大致就是这个feel）](/images/reproduce/literature/TengWangGeXu-1-2.jpg)\n\n台隍枕夷夏之交，夷是蛮夷，夏是华夏。这句呼应了上面对江西地理位置重要性的描述，更进一步的点出了这座楼台、这座城池就位于蛮夷文明和中原文明的分界点上，乃是照亮蛮荒之地的明灯。而今天在这里的宾客和主人呢？也自然是集中了东南地区最杰出的人士，所以是宾主尽东南之美。\n\n**都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。**\n\n为了怕在座各位不明白，我王勃再强调一下，我们要紧密团结在阎都督和宇文州牧的领导周围！阎都督素有雅望，德高望重，乃是天下名士。棨戟是古时候大官出行时，队伍前面举的仪仗。遥临两字，更是说明了阎都督是不远千里来这里任职指导工作、给我们指明前进道路的，大家更应该有感恩之心才对啊。\n\n而宇文州牧，也是我们做官做人之懿范，是值得我们学习的好榜样。而且宇文州牧只是在这里暂时任职——你问为什么是暂时？废话，那当然是以后很快就要高升啊！\n\n估计阎公看到这两句，脸色就很难再黑起来了。虽然这个年轻人有点狂傲，但还是很懂得分寸的嘛！\n\n**十旬休假，胜友如云；千里逢迎，高朋满座。**\n\n这两句指出了这次聚会的原因，还贡献了高朋满座这个成语。大家总不能没事工作日聚餐，这次聚会，是因为刚好赶上了周末——唐代以十天为一旬，旬末一天是休息日。恰好赶上很多人杰聚集于此，所以大家才举行了这场聚会。为了这次盛大的聚会，有些朋友（比如我）甚至是不远千里而来的，大家坐满了席位，好一派盛况！\n\n**腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。**\n\n因为席上还有几位地位很高的朋友，所以再特意给大家点出来，尤其是咱们江西的文学领袖孟学士和军队领导王将军。孟学士是一代诗词文学大家，其文章如同蛟龙和凤凰一样绚烂。王将军的武艺非常出色，在武库里收藏的神兵如同古代名剑紫电、青霜一般名贵。因为朋友太多，这里就不再每一位都列出来了，还请大家见谅，谁有不同意见，可以和孟学士、王将军谈一谈。\n\n**家君作宰，路出名区；童子何知，躬逢胜饯。**\n\n在第一段的最后，捧完这座城市、捧完在座的诸位大佬、满座贤达以后，王勃点出了自己的身份。我也不是个毫无背景的人，我爸也是在外做官、管理一方的。这是在去探亲的路上，我恰好经过了咱们这座名城。大家都是有身份的人，就别小看我、难为我了吧？\n\n童子两字说出了王勃的年龄。历史上对于王勃是哪一年写的《滕王阁序》有两种说法，一说是十多岁的时候，一说是二十多岁，双方各有依据，争论不休。但我个人更倾向于相信十多岁的说法，一是因为这样更有传奇性，二是很难相信二十多岁、早就考取功名并任过官职的王勃还要自称为童子。\n\n所以，这最后一句也是谦让。诸君，我只是个十多岁的无知小朋友，恰好有幸遇到这次盛宴。所以，如果有哪里做的不到位的、如果后面的文字里有什么小小得罪的地方，还请大家体谅。\n\n回头再看这第一段，虽然篇幅精炼，但把这场盛会的来龙去脉、地点、原因都说的一清二楚，同时还对江西、对南昌、对主人、对各位宾客吹捧的极为到位。凭心而论，虽然南昌很好、虽然在座的也确实是当时当地之俊才，但大家看到这样的夸赞后，怕不是还是会有一丝脸红，心里有几分窃喜的。纵然大家再有什么被抢了风头的不快，看到这样的文笔、看到这样的褒扬，也没有办法再发作了。不仅如此，这个颇有气势的开场，更是令人对后面的几段产生了莫大的期待。大江之畔、高楼之上，估计宾客们正在屏息静待，看这个十多岁的少年还能抛出多么灿烂的文字。\n\n那么，接下来，前言结束，我这就开始表演了！\n\n![](/images/reproduce/literature/TengWangGeXu-1-3.jpg)","slug":"reproduce/literature/TengWangGeXu-HaiShangGangQinShi-1","published":1,"updated":"2018-07-10T17:31:12.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zfx001hektzz1zvse06","content":"<p>本文系转载，已征得原文作者同意，特此声明。<br>原文作者：海上钢琴师<br>原文链接：<a href=\"http://www.acfun.cn/a/ac4159097\" target=\"_blank\" rel=\"noopener\">http://www.acfun.cn/a/ac4159097</a></p>\n<hr>\n<p><strong>豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</strong></p>\n<p>如果要评选古代最美的文章，那《滕王阁序》即使不能夺魁，也一定是在三甲之内。这篇文章，可以说是古代骈文中的最高峰、集大成之作。此前、此后，都没有能在骈文之道上超过这一篇的。</p>\n<p>骈文是一种极端华丽的文体。这种文体发端于汉魏，盛行于南北朝，特点是每一句都像对联一样，严格对仗。同时，多使用四字、六字的句子，让整体韵律更加周密协调。为了让内容更有深意，骈文还讲究多用典故，每一句里都隐含着各种历史故事。整篇下来，就仿佛是精雕细琢、嵌满珠玉、金碧辉煌的宫殿一般，给人以目不暇接之感。</p>\n<p>但可想而知，这种文章非常难写。就像最近大热的《国家宝藏》节目里，大家一起嘲讽乾隆的各种釉彩大瓶一样——骈文因为太华丽，所以写起来往往顾此失彼：注重内涵了，结果文辞不够华美；雕琢文采了，结果空洞无味；典故用少了，读来就有村气；典故用多用僻了，大家又觉得费解。要把握好其中的平衡，写出一篇好的骈文，简直难如登天。</p>\n<p>不过，对于真正的天才来说，这些都不是事儿啊！</p>\n<p>王勃就是这样的天才。作为初唐四杰王杨卢骆之首，王勃的才气得到了当时人们的一致认可，他们四位是承上启下、开辟了唐代文学盛世的重要人物，其才能可见一斑。</p>\n<p>王勃少年成名，十岁前通读经书，十岁后就已经因诗文而名动京师了。虽然他不到三十岁就意外身故，但留下的一系列诗文足以让他列入唐代最顶尖的文学家行列。而他最出色的作品，就是这篇《滕王阁序》。</p>\n<p>好在哪里？咱们一起来读一读吧！</p>\n<p><strong>豫章故郡，洪都新府。星分翼轸，地接衡庐。</strong></p>\n<p>这是开篇四句。滕王阁在江西南昌，紧靠赣江，号称江南楼阁之首。这座楼是唐初一位亲王修的，他的封号是滕王，所以这座楼就叫滕王阁。</p>\n<p>南昌是一座极有历史的古城。汉代这里叫豫章，唐代这里叫洪州，所以前两句直接从历史角度描述了这座城市在哪里。豫章故郡，说明过去这里是古豫章所在。洪都新府，说明这里是当今的新洪州城。历史和现代，在这里交汇在一起。</p>\n<p>描述了时间的坐标，接下来就是空间的坐标。中国古代将星空也分为不同的星宿，相当于现在的星座，并且将这些星宿和古中国的地理划分一一对应起来。南昌一带，刚好对应天上翼宿和轸宿之间，所以说星分翼轸。</p>\n<p>在天为翼轸之间，在地刚好是衡山和庐山之间，所以紧跟着说地接衡庐。一在天，一在地，完美的描述了南昌的空间坐标。于是，通过短短十六个字，南昌城的时空一下子就确定了。</p>\n<p><strong>襟三江而带五湖，控蛮荆而引瓯越。</strong></p>\n<p>有了时空的位置，那这个城市的意义呢？跟下来两句立刻就解释了。南昌紧靠赣江，刚好是三条支流交汇之处；五湖，这个一般来说没有具体的指代，但我认真的在地图上看过，貌似还真是有五个：</p>\n<p><img src=\"/images/reproduce/literature/TengWangGeXu-1-1.png\" alt=\"（自己找一找，三江和五湖都在哪里呢？）\"></p>\n<p>控蛮荆而引瓯越，这里面就指出了江西的重要性。江西西接湖南湖北，这一片是历史上的楚国、三国时的荆州。楚王自己说“我蛮夷也”，所以这里用蛮荆来指代这一片楚地。楚人善战，江西居其下游起到抑制作用，所以用控字表达江西对两湖地区的控制力。而江西往东，就是浙江一带，乃是古时候的越国。古越国都城为东瓯，金瓯一词还有国土一角的意思，所以瓯越包含了这两重含义。江西居于越国上游，所以用引字，表达两地的关系。</p>\n<p>综合起来，这两句先描绘了南昌的地形，又赞扬了地理位置之重要，一下子就把南昌城的意义捧得很高了。</p>\n<p><strong>物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。</strong></p>\n<p>这两句里，创造出了两个常常连用的成语：物华天宝、人杰地灵。物华天宝，指这里的出产极其美好，仿佛都是来自天上的宝物一般。光吹不行，后面就是个具体的例子——龙光射牛斗之墟。</p>\n<p>这是个晋代故事。西晋时有位大牛人张华，这哥们不仅官做的大，学问更是高深，乃是中国历史上第一位博物学家。据说他当时看到天上的牛宿和斗宿之间常有紫光闪烁，于是就问朋友雷焕是什么原因。雷焕说，这一定是地上有奇珍异宝，宝光冲天，所以看到天上都有紫光。看这个位置，宝物应该是埋藏在豫章一带。后来，他们果然在豫章郡治下的丰城县发掘出一个石匣，其中是两把宝剑，一名龙泉，一名太阿。后来，这两把剑落入水中，人们下去打捞的时候没有看到宝剑，却看到两条蛟龙蜿蜒盘旋，从此这两把剑就不知所踪了。</p>\n<p>所以你看，我说这地物华天宝，这是真的啊！挖出来两把剑都能化龙！</p>\n<p>人杰地灵，是说在这片充满灵气的土地上，盛产各种人才。同样，后面也是一个具体的例子。陈蕃是汉末名士，著名的“一屋不扫何以扫天下”就是他小时候说的。后来他在豫章做官的时候，和豫章名士徐孺子交好。好到什么程度呢？他平时根本不接待其他客人，但专门给徐孺子打了一张床榻，每当徐孺子来的时候，两人就躺在这张专床上通宵达旦的聊天……</p>\n<p>Emmmmmm……</p>\n<p>不过不管这个故事究竟有什么含义，江西确实是个出才子的地方，所以这一句人杰地灵，也仿佛预示了江西后来井喷式出现的各类人才，实在是精辟的很。</p>\n<p>这两句连起来，就又把江西和南昌捧到了一个新的高度。</p>\n<p>为什么要捧呢？其实原因很简单——王勃这是客场作战。王勃不是江西人，和当时滕王阁上的一大群名流也没有交集。这是以当时的洪州都督、州牧为首所发起的一场上流社会party，王勃因为当时去南方探望自己外地做官的父亲，刚好路过南昌，因为文名而被邀请参加的。</p>\n<p>据传说，当时本来是都督阎公让自己的女婿事先做好了一篇赋，准备在聚会上抛出来。结果在聚会上，阎公客套了一句：“哪位高才，愿意做赋而纪之啊？”，按照剧本，大家也都知道这时候都该谦让一番，最后公推阎公女婿出来执笔，给这场盛会划上句号。</p>\n<p>结果，十几岁的王勃不知道还有这么多门道，一听要写文章，那当然是我来啊！于是就直接跳了出来，表示既然如此，那我这个高才就来写一篇吧！</p>\n<p>当时阎公脸就黑了，但又不能自己打脸，于是就表示行啊小伙子，那你有胆你就写写看，然后拂袖而去，到楼上雅间里生闷气去了。</p>\n<p>王勃这时候终于感觉出不对来了……看来不小心踩了个大坑啊。怎么办，在别人的场子上打了主人的脸，换了一般人，这时候估计就要屁滚尿流落荒而逃了，先保住自己这条狗命再说。</p>\n<p>但王勃不是一般人。在这样的压力之下，他反而文思泉涌——既然已经打了脸，那我干脆就把这脸打的漂漂亮亮的，让你们不得不服，而且还要亲口说打的好！不过大家面子上还是要过得去的，我在文章里捧你们一下，给主人修个好看的台阶，看你怎么办。</p>\n<p>于是，接下来几句，更是捧到了极致。</p>\n<p><strong>雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。</strong></p>\n<p>雄州雾列，是说洪州乃是大唐的一等雄州，远眺山川，楼宇屋舍田地连绵不绝，一直隐没到远方的薄雾之中。俊采星驰，是说当地俊杰犹如星辰一般繁多、闪耀、在这片丰饶的土地上往来驰骋，使人目不暇接。著名影星周先生，其名字就是来自这个词。</p>\n<p><img src=\"/images/reproduce/literature/TengWangGeXu-1-2.jpg\" alt=\"（雄州雾列，大致就是这个feel）\"></p>\n<p>台隍枕夷夏之交，夷是蛮夷，夏是华夏。这句呼应了上面对江西地理位置重要性的描述，更进一步的点出了这座楼台、这座城池就位于蛮夷文明和中原文明的分界点上，乃是照亮蛮荒之地的明灯。而今天在这里的宾客和主人呢？也自然是集中了东南地区最杰出的人士，所以是宾主尽东南之美。</p>\n<p><strong>都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。</strong></p>\n<p>为了怕在座各位不明白，我王勃再强调一下，我们要紧密团结在阎都督和宇文州牧的领导周围！阎都督素有雅望，德高望重，乃是天下名士。棨戟是古时候大官出行时，队伍前面举的仪仗。遥临两字，更是说明了阎都督是不远千里来这里任职指导工作、给我们指明前进道路的，大家更应该有感恩之心才对啊。</p>\n<p>而宇文州牧，也是我们做官做人之懿范，是值得我们学习的好榜样。而且宇文州牧只是在这里暂时任职——你问为什么是暂时？废话，那当然是以后很快就要高升啊！</p>\n<p>估计阎公看到这两句，脸色就很难再黑起来了。虽然这个年轻人有点狂傲，但还是很懂得分寸的嘛！</p>\n<p><strong>十旬休假，胜友如云；千里逢迎，高朋满座。</strong></p>\n<p>这两句指出了这次聚会的原因，还贡献了高朋满座这个成语。大家总不能没事工作日聚餐，这次聚会，是因为刚好赶上了周末——唐代以十天为一旬，旬末一天是休息日。恰好赶上很多人杰聚集于此，所以大家才举行了这场聚会。为了这次盛大的聚会，有些朋友（比如我）甚至是不远千里而来的，大家坐满了席位，好一派盛况！</p>\n<p><strong>腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。</strong></p>\n<p>因为席上还有几位地位很高的朋友，所以再特意给大家点出来，尤其是咱们江西的文学领袖孟学士和军队领导王将军。孟学士是一代诗词文学大家，其文章如同蛟龙和凤凰一样绚烂。王将军的武艺非常出色，在武库里收藏的神兵如同古代名剑紫电、青霜一般名贵。因为朋友太多，这里就不再每一位都列出来了，还请大家见谅，谁有不同意见，可以和孟学士、王将军谈一谈。</p>\n<p><strong>家君作宰，路出名区；童子何知，躬逢胜饯。</strong></p>\n<p>在第一段的最后，捧完这座城市、捧完在座的诸位大佬、满座贤达以后，王勃点出了自己的身份。我也不是个毫无背景的人，我爸也是在外做官、管理一方的。这是在去探亲的路上，我恰好经过了咱们这座名城。大家都是有身份的人，就别小看我、难为我了吧？</p>\n<p>童子两字说出了王勃的年龄。历史上对于王勃是哪一年写的《滕王阁序》有两种说法，一说是十多岁的时候，一说是二十多岁，双方各有依据，争论不休。但我个人更倾向于相信十多岁的说法，一是因为这样更有传奇性，二是很难相信二十多岁、早就考取功名并任过官职的王勃还要自称为童子。</p>\n<p>所以，这最后一句也是谦让。诸君，我只是个十多岁的无知小朋友，恰好有幸遇到这次盛宴。所以，如果有哪里做的不到位的、如果后面的文字里有什么小小得罪的地方，还请大家体谅。</p>\n<p>回头再看这第一段，虽然篇幅精炼，但把这场盛会的来龙去脉、地点、原因都说的一清二楚，同时还对江西、对南昌、对主人、对各位宾客吹捧的极为到位。凭心而论，虽然南昌很好、虽然在座的也确实是当时当地之俊才，但大家看到这样的夸赞后，怕不是还是会有一丝脸红，心里有几分窃喜的。纵然大家再有什么被抢了风头的不快，看到这样的文笔、看到这样的褒扬，也没有办法再发作了。不仅如此，这个颇有气势的开场，更是令人对后面的几段产生了莫大的期待。大江之畔、高楼之上，估计宾客们正在屏息静待，看这个十多岁的少年还能抛出多么灿烂的文字。</p>\n<p>那么，接下来，前言结束，我这就开始表演了！</p>\n<p><img src=\"/images/reproduce/literature/TengWangGeXu-1-3.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文系转载，已征得原文作者同意，特此声明。<br>原文作者：海上钢琴师<br>原文链接：<a href=\"http://www.acfun.cn/a/ac4159097\" target=\"_blank\" rel=\"noopener\">http://www.acfun.cn/a/ac4159097</a></p>\n<hr>\n<p><strong>豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</strong></p>\n<p>如果要评选古代最美的文章，那《滕王阁序》即使不能夺魁，也一定是在三甲之内。这篇文章，可以说是古代骈文中的最高峰、集大成之作。此前、此后，都没有能在骈文之道上超过这一篇的。</p>\n<p>骈文是一种极端华丽的文体。这种文体发端于汉魏，盛行于南北朝，特点是每一句都像对联一样，严格对仗。同时，多使用四字、六字的句子，让整体韵律更加周密协调。为了让内容更有深意，骈文还讲究多用典故，每一句里都隐含着各种历史故事。整篇下来，就仿佛是精雕细琢、嵌满珠玉、金碧辉煌的宫殿一般，给人以目不暇接之感。</p>\n<p>但可想而知，这种文章非常难写。就像最近大热的《国家宝藏》节目里，大家一起嘲讽乾隆的各种釉彩大瓶一样——骈文因为太华丽，所以写起来往往顾此失彼：注重内涵了，结果文辞不够华美；雕琢文采了，结果空洞无味；典故用少了，读来就有村气；典故用多用僻了，大家又觉得费解。要把握好其中的平衡，写出一篇好的骈文，简直难如登天。</p>\n<p>不过，对于真正的天才来说，这些都不是事儿啊！</p>\n<p>王勃就是这样的天才。作为初唐四杰王杨卢骆之首，王勃的才气得到了当时人们的一致认可，他们四位是承上启下、开辟了唐代文学盛世的重要人物，其才能可见一斑。</p>\n<p>王勃少年成名，十岁前通读经书，十岁后就已经因诗文而名动京师了。虽然他不到三十岁就意外身故，但留下的一系列诗文足以让他列入唐代最顶尖的文学家行列。而他最出色的作品，就是这篇《滕王阁序》。</p>\n<p>好在哪里？咱们一起来读一读吧！</p>\n<p><strong>豫章故郡，洪都新府。星分翼轸，地接衡庐。</strong></p>\n<p>这是开篇四句。滕王阁在江西南昌，紧靠赣江，号称江南楼阁之首。这座楼是唐初一位亲王修的，他的封号是滕王，所以这座楼就叫滕王阁。</p>\n<p>南昌是一座极有历史的古城。汉代这里叫豫章，唐代这里叫洪州，所以前两句直接从历史角度描述了这座城市在哪里。豫章故郡，说明过去这里是古豫章所在。洪都新府，说明这里是当今的新洪州城。历史和现代，在这里交汇在一起。</p>\n<p>描述了时间的坐标，接下来就是空间的坐标。中国古代将星空也分为不同的星宿，相当于现在的星座，并且将这些星宿和古中国的地理划分一一对应起来。南昌一带，刚好对应天上翼宿和轸宿之间，所以说星分翼轸。</p>\n<p>在天为翼轸之间，在地刚好是衡山和庐山之间，所以紧跟着说地接衡庐。一在天，一在地，完美的描述了南昌的空间坐标。于是，通过短短十六个字，南昌城的时空一下子就确定了。</p>\n<p><strong>襟三江而带五湖，控蛮荆而引瓯越。</strong></p>\n<p>有了时空的位置，那这个城市的意义呢？跟下来两句立刻就解释了。南昌紧靠赣江，刚好是三条支流交汇之处；五湖，这个一般来说没有具体的指代，但我认真的在地图上看过，貌似还真是有五个：</p>\n<p><img src=\"/images/reproduce/literature/TengWangGeXu-1-1.png\" alt=\"（自己找一找，三江和五湖都在哪里呢？）\"></p>\n<p>控蛮荆而引瓯越，这里面就指出了江西的重要性。江西西接湖南湖北，这一片是历史上的楚国、三国时的荆州。楚王自己说“我蛮夷也”，所以这里用蛮荆来指代这一片楚地。楚人善战，江西居其下游起到抑制作用，所以用控字表达江西对两湖地区的控制力。而江西往东，就是浙江一带，乃是古时候的越国。古越国都城为东瓯，金瓯一词还有国土一角的意思，所以瓯越包含了这两重含义。江西居于越国上游，所以用引字，表达两地的关系。</p>\n<p>综合起来，这两句先描绘了南昌的地形，又赞扬了地理位置之重要，一下子就把南昌城的意义捧得很高了。</p>\n<p><strong>物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。</strong></p>\n<p>这两句里，创造出了两个常常连用的成语：物华天宝、人杰地灵。物华天宝，指这里的出产极其美好，仿佛都是来自天上的宝物一般。光吹不行，后面就是个具体的例子——龙光射牛斗之墟。</p>\n<p>这是个晋代故事。西晋时有位大牛人张华，这哥们不仅官做的大，学问更是高深，乃是中国历史上第一位博物学家。据说他当时看到天上的牛宿和斗宿之间常有紫光闪烁，于是就问朋友雷焕是什么原因。雷焕说，这一定是地上有奇珍异宝，宝光冲天，所以看到天上都有紫光。看这个位置，宝物应该是埋藏在豫章一带。后来，他们果然在豫章郡治下的丰城县发掘出一个石匣，其中是两把宝剑，一名龙泉，一名太阿。后来，这两把剑落入水中，人们下去打捞的时候没有看到宝剑，却看到两条蛟龙蜿蜒盘旋，从此这两把剑就不知所踪了。</p>\n<p>所以你看，我说这地物华天宝，这是真的啊！挖出来两把剑都能化龙！</p>\n<p>人杰地灵，是说在这片充满灵气的土地上，盛产各种人才。同样，后面也是一个具体的例子。陈蕃是汉末名士，著名的“一屋不扫何以扫天下”就是他小时候说的。后来他在豫章做官的时候，和豫章名士徐孺子交好。好到什么程度呢？他平时根本不接待其他客人，但专门给徐孺子打了一张床榻，每当徐孺子来的时候，两人就躺在这张专床上通宵达旦的聊天……</p>\n<p>Emmmmmm……</p>\n<p>不过不管这个故事究竟有什么含义，江西确实是个出才子的地方，所以这一句人杰地灵，也仿佛预示了江西后来井喷式出现的各类人才，实在是精辟的很。</p>\n<p>这两句连起来，就又把江西和南昌捧到了一个新的高度。</p>\n<p>为什么要捧呢？其实原因很简单——王勃这是客场作战。王勃不是江西人，和当时滕王阁上的一大群名流也没有交集。这是以当时的洪州都督、州牧为首所发起的一场上流社会party，王勃因为当时去南方探望自己外地做官的父亲，刚好路过南昌，因为文名而被邀请参加的。</p>\n<p>据传说，当时本来是都督阎公让自己的女婿事先做好了一篇赋，准备在聚会上抛出来。结果在聚会上，阎公客套了一句：“哪位高才，愿意做赋而纪之啊？”，按照剧本，大家也都知道这时候都该谦让一番，最后公推阎公女婿出来执笔，给这场盛会划上句号。</p>\n<p>结果，十几岁的王勃不知道还有这么多门道，一听要写文章，那当然是我来啊！于是就直接跳了出来，表示既然如此，那我这个高才就来写一篇吧！</p>\n<p>当时阎公脸就黑了，但又不能自己打脸，于是就表示行啊小伙子，那你有胆你就写写看，然后拂袖而去，到楼上雅间里生闷气去了。</p>\n<p>王勃这时候终于感觉出不对来了……看来不小心踩了个大坑啊。怎么办，在别人的场子上打了主人的脸，换了一般人，这时候估计就要屁滚尿流落荒而逃了，先保住自己这条狗命再说。</p>\n<p>但王勃不是一般人。在这样的压力之下，他反而文思泉涌——既然已经打了脸，那我干脆就把这脸打的漂漂亮亮的，让你们不得不服，而且还要亲口说打的好！不过大家面子上还是要过得去的，我在文章里捧你们一下，给主人修个好看的台阶，看你怎么办。</p>\n<p>于是，接下来几句，更是捧到了极致。</p>\n<p><strong>雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。</strong></p>\n<p>雄州雾列，是说洪州乃是大唐的一等雄州，远眺山川，楼宇屋舍田地连绵不绝，一直隐没到远方的薄雾之中。俊采星驰，是说当地俊杰犹如星辰一般繁多、闪耀、在这片丰饶的土地上往来驰骋，使人目不暇接。著名影星周先生，其名字就是来自这个词。</p>\n<p><img src=\"/images/reproduce/literature/TengWangGeXu-1-2.jpg\" alt=\"（雄州雾列，大致就是这个feel）\"></p>\n<p>台隍枕夷夏之交，夷是蛮夷，夏是华夏。这句呼应了上面对江西地理位置重要性的描述，更进一步的点出了这座楼台、这座城池就位于蛮夷文明和中原文明的分界点上，乃是照亮蛮荒之地的明灯。而今天在这里的宾客和主人呢？也自然是集中了东南地区最杰出的人士，所以是宾主尽东南之美。</p>\n<p><strong>都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。</strong></p>\n<p>为了怕在座各位不明白，我王勃再强调一下，我们要紧密团结在阎都督和宇文州牧的领导周围！阎都督素有雅望，德高望重，乃是天下名士。棨戟是古时候大官出行时，队伍前面举的仪仗。遥临两字，更是说明了阎都督是不远千里来这里任职指导工作、给我们指明前进道路的，大家更应该有感恩之心才对啊。</p>\n<p>而宇文州牧，也是我们做官做人之懿范，是值得我们学习的好榜样。而且宇文州牧只是在这里暂时任职——你问为什么是暂时？废话，那当然是以后很快就要高升啊！</p>\n<p>估计阎公看到这两句，脸色就很难再黑起来了。虽然这个年轻人有点狂傲，但还是很懂得分寸的嘛！</p>\n<p><strong>十旬休假，胜友如云；千里逢迎，高朋满座。</strong></p>\n<p>这两句指出了这次聚会的原因，还贡献了高朋满座这个成语。大家总不能没事工作日聚餐，这次聚会，是因为刚好赶上了周末——唐代以十天为一旬，旬末一天是休息日。恰好赶上很多人杰聚集于此，所以大家才举行了这场聚会。为了这次盛大的聚会，有些朋友（比如我）甚至是不远千里而来的，大家坐满了席位，好一派盛况！</p>\n<p><strong>腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。</strong></p>\n<p>因为席上还有几位地位很高的朋友，所以再特意给大家点出来，尤其是咱们江西的文学领袖孟学士和军队领导王将军。孟学士是一代诗词文学大家，其文章如同蛟龙和凤凰一样绚烂。王将军的武艺非常出色，在武库里收藏的神兵如同古代名剑紫电、青霜一般名贵。因为朋友太多，这里就不再每一位都列出来了，还请大家见谅，谁有不同意见，可以和孟学士、王将军谈一谈。</p>\n<p><strong>家君作宰，路出名区；童子何知，躬逢胜饯。</strong></p>\n<p>在第一段的最后，捧完这座城市、捧完在座的诸位大佬、满座贤达以后，王勃点出了自己的身份。我也不是个毫无背景的人，我爸也是在外做官、管理一方的。这是在去探亲的路上，我恰好经过了咱们这座名城。大家都是有身份的人，就别小看我、难为我了吧？</p>\n<p>童子两字说出了王勃的年龄。历史上对于王勃是哪一年写的《滕王阁序》有两种说法，一说是十多岁的时候，一说是二十多岁，双方各有依据，争论不休。但我个人更倾向于相信十多岁的说法，一是因为这样更有传奇性，二是很难相信二十多岁、早就考取功名并任过官职的王勃还要自称为童子。</p>\n<p>所以，这最后一句也是谦让。诸君，我只是个十多岁的无知小朋友，恰好有幸遇到这次盛宴。所以，如果有哪里做的不到位的、如果后面的文字里有什么小小得罪的地方，还请大家体谅。</p>\n<p>回头再看这第一段，虽然篇幅精炼，但把这场盛会的来龙去脉、地点、原因都说的一清二楚，同时还对江西、对南昌、对主人、对各位宾客吹捧的极为到位。凭心而论，虽然南昌很好、虽然在座的也确实是当时当地之俊才，但大家看到这样的夸赞后，怕不是还是会有一丝脸红，心里有几分窃喜的。纵然大家再有什么被抢了风头的不快，看到这样的文笔、看到这样的褒扬，也没有办法再发作了。不仅如此，这个颇有气势的开场，更是令人对后面的几段产生了莫大的期待。大江之畔、高楼之上，估计宾客们正在屏息静待，看这个十多岁的少年还能抛出多么灿烂的文字。</p>\n<p>那么，接下来，前言结束，我这就开始表演了！</p>\n<p><img src=\"/images/reproduce/literature/TengWangGeXu-1-3.jpg\" alt=\"\"></p>\n"},{"title":"美文系列：滕王阁序(2)","date":"2018-06-09T19:29:55.000Z","toc":false,"thumbnail":"/images/reproduce/literature/TengWangGeXu-thumbnail.png","banner":"/images/reproduce/literature/TengWangGeXu-banner.png","_content":"本文系转载，已征得原文作者同意，特此声明。\n原文作者：海上钢琴师\n原文链接：[http://www.acfun.cn/a/ac4162716](http://www.acfun.cn/a/ac4162716)\n\n---\n\n**时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。**\n\n**披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。**\n\n第二三段在有些书上会合并为一段，总体来说是写景。开篇之后，既然背景已经交代清楚，那就要先从客观角度出发，来描绘这场盛会、这座楼阁了。从文字角度而言，这是全篇中最为华彩的一段，其中的几段名句，更是垂千古而不朽。\n\n**时维九月，序属三秋。**\n\n开始一句，就点名了现在的具体时间——农历九月，也就是所谓的三秋时节。按照古代农历，七八九月为秋季，三秋已经是秋天的最末，眼看就要进入冬天了。如果是在王勃的故乡山西，这时候已经是“秋风萧瑟天气凉，草木摇落露为霜”的时候了吧。\n\n但江南气候毕竟更加温和。“青山隐隐水迢迢，秋尽江南草未凋”，这时候的南昌城，草木还没有凋零，气候不冷不热，鱼蟹肥美，新酒方熟，正是舒适惬意的季节，最适合好友齐聚、登楼远眺、把酒临风，尽情抒发自己的胸怀。\n\n**潦水尽而寒潭清，烟光凝而暮山紫。**\n\n秋天的空气和夏天不同。夏季的空气闷热潮湿，远处的山峦都朦胧在水汽之中，看不清楚。丰沛的雨水让山上满是临时诞生的小溪，夹杂着落叶潺潺而下，让山脚下的潭水都变得有些浑浊了。\n\n但随着秋意的浸染，这些小溪逐渐消失，山下的潭水越发的青碧深幽，仿佛是一面碧玉磨成的镜子一样。天高气爽，笼罩着山川的水气消散了，一眼看去，山峦的形状一览无遗，山上的秋叶在夕阳映照下，显得分外红艳。\n\n古人曾经评论说，这两句“写尽九月之景”，确实如此。呼应前两句对时间的描述，一幅完美的深秋画卷已经展开在我们面前。\n\n**俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。**\n\n前面几句还算是开篇静态画面的话，从这句开始，一幕绝美的电影、一个经典的长镜头开始了——\n\n俨骖騑于上路，骖，是左马；騑，是右马。驾着双马拉的马车，王勃开始了他的旅程。能驾双马的马车，相当于现在年轻人开着一辆超跑，是一件很有格调的事儿。要是开到三驾、四驾的马车，那就是高级别的官员了。\n\n上路，说的不是王勃专门上单，而是呼应前面提到的暮山，指的是山上的路。驾着双马的超跑，从刚才描述的秋山路上驶来，带起一地的红叶……这就是秋名山老司机、社会我王哥啊！\n\n访风景于崇阿，崇阿，指崇山峻岭，这个词大有来历。大家都知道王羲之的《兰亭序》，但兰亭序是什么场合下写的？是王羲之、谢安等一群好哥们一起喝酒赛诗，最后给诗集做的序。只不过这篇序名气太大，以至于大家把后面的几十首诗都忽略了。\n\n但在兰亭会中，主角其实还是这几十首诗。其中被评为当日第一的，是谢安弟弟谢万所写的《兰亭》诗，开头第一句就是“肆眺崇阿，寓目高林”。王羲之在序里说“此地有崇山峻岭，茂林修竹”，呼应的就是这一句。\n\n所以，王哥开着超跑，一路上还在寻花问柳……啊不对，寻访沿途的风景。这一路走着看着，眼前突然出现了一个绝美的去处。\n\n这个去处，就是矗立在赣江江畔的帝子之长洲、天人之旧馆。滕王阁是唐帝国的亲王所建，所以夸一句帝子之长洲，完全没有问题。临字有多种含义，从山上往下望叫临，从外地而来叫临，突然见到这座楼台叫临，靠近水边的沙洲也叫临，但每一个解释都贴合这一句，可谓绝妙。\n\n当时滕王阁修了并没多少年。之所以用旧字，一是惋惜当时修阁的滕王已经不在了，有睹物思人之情；二是将滕王阁比喻为天上仙人的居所，只不过被仙人遗留在此，更是夸耀了滕王阁人间难得的盛景。\n\n把这几句连起来，我们能看到一个年轻人出门上路，寻访名山大川，峰回路转之时，一座江边楼阁出现在他眼前。这座楼阁是如此华美，简直不像是人间的建筑。\n\n既然来到这座仙宫前了，那接下来，肯定是要好好观赏一番：\n\n**层峦耸翠，上出重霄；飞阁流丹，下临无地。**\n\n走近些看，这座仙宫起伏连绵，屋顶铺着翠绿的琉璃瓦，其高耸之处仿佛直上云霄一般。当年曹操修铜雀台，曹植做赋，其中写到“立中天之华观兮，连飞阁乎西城”，这里的飞阁指的就是那些高高的楼阁之间精细纤巧、涂成朱红色的长桥阁道。一场秋雨洗过，那浓厚鲜亮的颜色仿佛都快要流淌下来一样。楼阁下紧靠大江，看下去都是江水，不见地面，气势恢宏。\n\n远眺之后，就要逐渐走进这座仙宫了：\n\n**鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。**\n\n宫殿紧靠江畔，殿前的花园和水岸的沙洲结合在一起，走向楼阁的路就在花园里萦回曲折，常有白鹤、鸳鸯等水鸟在路边嬉戏遨游。殿外几树桂花，宫前遍植兰草，自有幽香缭绕在廊庑之间。整座仙宫的构造精巧，宫殿楼阁高低起伏，走势就如同远处的山脉一样。\n\n中国古代造园手法，从唐宋开始真正步入成熟，到明清时达到大成。滕王阁修建于唐初，但从这两句描述中可以看到，当时人们在如何利用自然环境造园、如何借用远处山景和园景融为一体方面，已经很有思路了。\n\n逛完园林，自然就开始登楼：\n\n**披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。**\n\n绣闼，满是锦绣的门帘。虽然我们现在看那些景点不挂门帘，但古时候这都是人们生活起居的地方，挂门帘才是正常的。雕甍，精雕细琢的屋脊。同为初唐四杰的卢照邻说“双阙连甍垂凤翼”，指的就是唐代这种屋脊宽大、双侧自然下垂的宫殿造型。\n\n登到这座高耸的楼阁上，掀开西侧的锦缎门帘，扑面而来的是一幅壮丽景色。向下看，是矮处殿阁精美灿烂的屋脊。向远处看，是旷阔无际的原野、视野尽头的山峦。旷野之上，河流蜿蜒曲折，湖泊点缀其间，这种自然造物的美令人心醉神迷。\n\n**闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。**\n\n这句夸景色之美，同时也是夸耀南昌之富庶、宾客之高贵。滕王阁不是远郊外的景点，而是就在南昌城西，背靠雄城，面临大江。从楼上往东望，是鳞次栉比的屋舍。钟是编钟，是古代诸侯贵族宴会时旁边演奏的乐器。鼎是食器，古代诸侯们吃饭，每道菜单独放在一个小鼎里面，至少要有牛羊猪鱼鹿这五鼎食才叫大气上档次。钟鸣鼎食被王勃变成了一个成语，指这些人家都不是普通人家，而是堪比王侯的大富大贵之人。\n\n从楼上往西看，是滔滔的大江。江边停满了各种楼船——相当一部分自然也是楼上宾客们的座驾了。这些大船上有的绘着青雀，有的绘着黄龙，每一条都华美异常。需要注意的是，这里青雀不是简单的雀鸟，而是指传说中西王母驾前的神鸟，所以才能和黄龙所并列。后来李商隐说“蓬山此去无多路，青鸟殷勤为探看”，说的就是这个青雀。\n\n**云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。**\n\n这时候已经是邻近傍晚了。一场秋雨刚刚结束，乌云散去，澄空如洗，只剩下天边一抹被夕阳映成五彩的云霞。在这云霞的背景之上，一只孤独的鸟儿腾空而起，飞向天际。目光追随着鸟儿远去，她的身影越来越小，最终只看到在遥远的天边，大江和天际都在暮色中变得模糊，最终融合在一起，难分彼此。\n\n这里面有个很有趣的公案。王勃说的是孤鹜，可鹜是什么？是胖胖的水鸟，说好听了叫鸳鸯，说的不好听了叫野鸭子……这鸟都是成群结队活动的，也不善于长距离飞翔。所以为什么是一只孤单的胖野鸭飞过去，大家都很是费解。据说日本收藏的唐代抄本里面写作“孤雾”，但这又完全失去了动态的美感，这解释也不靠谱。\n\n我倒是觉得，王勃当时所形容的，很可能是白鹭、白鹤一类的水鸟。这种鸟身姿纤美，善于飞翔，最是能引发人的诗性。“晴空一鹤排云上，便引诗情到碧霄”，这个解释要更加应景的多。有可能在写的时候，误将鹭写成了鹜，所以才造成了这个误解。\n\n秋水共长天一色，这句里诞生出了水天一色这个成语，将水天之景写到了极致。后来的唐宋诗人们都喜欢写类似的诗句，比如“黄河远上白云间”、“孤帆远影碧空尽，唯见长江天际流”、“水随天去秋无际”、“江流天地外”、“洞庭秋水远连天”、“长江一洗放天青”等等，是诗人们最爱的意象。\n\n这两句一出，文章顿时如同从黑白默片变成彩色电影一样，一下子就活了、就有了颜色，不愧是被传诵不绝的千古名句！据说，闹小脾气的都督阎公听说这个年轻人挥笔写出了这一句时，不由得感叹说：“这是真正的天才啊！”于是赶快下楼和王勃见礼，并且站在他身边看他写完全篇。\n\n**渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。**\n\n从艺术角度来说，这一句之美并不亚于上一句。上一句是有色，这一句是有声。承接上一句，当目光已经投向天边，看到茫茫天际时，刚才所见的满眼繁华富贵顿时变的渺小起来。身后酒席上的欢宴喧哗逐渐远去了，此时目光中只有天地，耳边只剩下彭蠡湖畔渔夫归家的歌声、天空中飞过雁群的鸣叫。歌声渐小，雁鸣渐远，画面渐渐变得宁静沉寂。\n\n从出发，到近观，到游园，到登楼，到俯瞰，到远眺，到东西巡视，到随着飞鸟极目天边。这个一气呵成的长镜头带我们饱览了滕王阁景物之壮美，最终归于一片寥廓之中。此情此景之下，我们自然会开始思索一些永恒的问题——天地至大不朽，人类渺小短暂，那我们的存在又有什么意义呢？\n\n这时候，大家也终于意识到，自己正在亲眼见证历史的发生，意识到今日之会，必将因这个年轻人、因这篇雄文而不朽。事实也的确如此。千年之后，滕王阁已经重建了数十次，当年的楼阁是什么样子，阎都督、宇文州牧、孟学士、王将军究竟是谁，早就无人知晓了。但这座楼阁、这些名字已经被牢记在文学史上，只要人类文明还在，就会一直流传下去，得到真正的永生。\n\n开始的嘲弄早已经不在了。所有人都围拢过来，等待着王勃写下新的篇章，等待着自己刚被文字洗礼过的心灵，被重重敲击的那一刻。","source":"_posts/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-2.md","raw":"---\ntitle: 美文系列：滕王阁序(2)\ndate: 2018-6-10 03:29:55\ncategories: 文学\ntags: \n    - 文学\n    - 滕王阁序\n    - 转载\ntoc: false\nthumbnail: /images/reproduce/literature/TengWangGeXu-thumbnail.png\nbanner: /images/reproduce/literature/TengWangGeXu-banner.png\n---\n本文系转载，已征得原文作者同意，特此声明。\n原文作者：海上钢琴师\n原文链接：[http://www.acfun.cn/a/ac4162716](http://www.acfun.cn/a/ac4162716)\n\n---\n\n**时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。**\n\n**披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。**\n\n第二三段在有些书上会合并为一段，总体来说是写景。开篇之后，既然背景已经交代清楚，那就要先从客观角度出发，来描绘这场盛会、这座楼阁了。从文字角度而言，这是全篇中最为华彩的一段，其中的几段名句，更是垂千古而不朽。\n\n**时维九月，序属三秋。**\n\n开始一句，就点名了现在的具体时间——农历九月，也就是所谓的三秋时节。按照古代农历，七八九月为秋季，三秋已经是秋天的最末，眼看就要进入冬天了。如果是在王勃的故乡山西，这时候已经是“秋风萧瑟天气凉，草木摇落露为霜”的时候了吧。\n\n但江南气候毕竟更加温和。“青山隐隐水迢迢，秋尽江南草未凋”，这时候的南昌城，草木还没有凋零，气候不冷不热，鱼蟹肥美，新酒方熟，正是舒适惬意的季节，最适合好友齐聚、登楼远眺、把酒临风，尽情抒发自己的胸怀。\n\n**潦水尽而寒潭清，烟光凝而暮山紫。**\n\n秋天的空气和夏天不同。夏季的空气闷热潮湿，远处的山峦都朦胧在水汽之中，看不清楚。丰沛的雨水让山上满是临时诞生的小溪，夹杂着落叶潺潺而下，让山脚下的潭水都变得有些浑浊了。\n\n但随着秋意的浸染，这些小溪逐渐消失，山下的潭水越发的青碧深幽，仿佛是一面碧玉磨成的镜子一样。天高气爽，笼罩着山川的水气消散了，一眼看去，山峦的形状一览无遗，山上的秋叶在夕阳映照下，显得分外红艳。\n\n古人曾经评论说，这两句“写尽九月之景”，确实如此。呼应前两句对时间的描述，一幅完美的深秋画卷已经展开在我们面前。\n\n**俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。**\n\n前面几句还算是开篇静态画面的话，从这句开始，一幕绝美的电影、一个经典的长镜头开始了——\n\n俨骖騑于上路，骖，是左马；騑，是右马。驾着双马拉的马车，王勃开始了他的旅程。能驾双马的马车，相当于现在年轻人开着一辆超跑，是一件很有格调的事儿。要是开到三驾、四驾的马车，那就是高级别的官员了。\n\n上路，说的不是王勃专门上单，而是呼应前面提到的暮山，指的是山上的路。驾着双马的超跑，从刚才描述的秋山路上驶来，带起一地的红叶……这就是秋名山老司机、社会我王哥啊！\n\n访风景于崇阿，崇阿，指崇山峻岭，这个词大有来历。大家都知道王羲之的《兰亭序》，但兰亭序是什么场合下写的？是王羲之、谢安等一群好哥们一起喝酒赛诗，最后给诗集做的序。只不过这篇序名气太大，以至于大家把后面的几十首诗都忽略了。\n\n但在兰亭会中，主角其实还是这几十首诗。其中被评为当日第一的，是谢安弟弟谢万所写的《兰亭》诗，开头第一句就是“肆眺崇阿，寓目高林”。王羲之在序里说“此地有崇山峻岭，茂林修竹”，呼应的就是这一句。\n\n所以，王哥开着超跑，一路上还在寻花问柳……啊不对，寻访沿途的风景。这一路走着看着，眼前突然出现了一个绝美的去处。\n\n这个去处，就是矗立在赣江江畔的帝子之长洲、天人之旧馆。滕王阁是唐帝国的亲王所建，所以夸一句帝子之长洲，完全没有问题。临字有多种含义，从山上往下望叫临，从外地而来叫临，突然见到这座楼台叫临，靠近水边的沙洲也叫临，但每一个解释都贴合这一句，可谓绝妙。\n\n当时滕王阁修了并没多少年。之所以用旧字，一是惋惜当时修阁的滕王已经不在了，有睹物思人之情；二是将滕王阁比喻为天上仙人的居所，只不过被仙人遗留在此，更是夸耀了滕王阁人间难得的盛景。\n\n把这几句连起来，我们能看到一个年轻人出门上路，寻访名山大川，峰回路转之时，一座江边楼阁出现在他眼前。这座楼阁是如此华美，简直不像是人间的建筑。\n\n既然来到这座仙宫前了，那接下来，肯定是要好好观赏一番：\n\n**层峦耸翠，上出重霄；飞阁流丹，下临无地。**\n\n走近些看，这座仙宫起伏连绵，屋顶铺着翠绿的琉璃瓦，其高耸之处仿佛直上云霄一般。当年曹操修铜雀台，曹植做赋，其中写到“立中天之华观兮，连飞阁乎西城”，这里的飞阁指的就是那些高高的楼阁之间精细纤巧、涂成朱红色的长桥阁道。一场秋雨洗过，那浓厚鲜亮的颜色仿佛都快要流淌下来一样。楼阁下紧靠大江，看下去都是江水，不见地面，气势恢宏。\n\n远眺之后，就要逐渐走进这座仙宫了：\n\n**鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。**\n\n宫殿紧靠江畔，殿前的花园和水岸的沙洲结合在一起，走向楼阁的路就在花园里萦回曲折，常有白鹤、鸳鸯等水鸟在路边嬉戏遨游。殿外几树桂花，宫前遍植兰草，自有幽香缭绕在廊庑之间。整座仙宫的构造精巧，宫殿楼阁高低起伏，走势就如同远处的山脉一样。\n\n中国古代造园手法，从唐宋开始真正步入成熟，到明清时达到大成。滕王阁修建于唐初，但从这两句描述中可以看到，当时人们在如何利用自然环境造园、如何借用远处山景和园景融为一体方面，已经很有思路了。\n\n逛完园林，自然就开始登楼：\n\n**披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。**\n\n绣闼，满是锦绣的门帘。虽然我们现在看那些景点不挂门帘，但古时候这都是人们生活起居的地方，挂门帘才是正常的。雕甍，精雕细琢的屋脊。同为初唐四杰的卢照邻说“双阙连甍垂凤翼”，指的就是唐代这种屋脊宽大、双侧自然下垂的宫殿造型。\n\n登到这座高耸的楼阁上，掀开西侧的锦缎门帘，扑面而来的是一幅壮丽景色。向下看，是矮处殿阁精美灿烂的屋脊。向远处看，是旷阔无际的原野、视野尽头的山峦。旷野之上，河流蜿蜒曲折，湖泊点缀其间，这种自然造物的美令人心醉神迷。\n\n**闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。**\n\n这句夸景色之美，同时也是夸耀南昌之富庶、宾客之高贵。滕王阁不是远郊外的景点，而是就在南昌城西，背靠雄城，面临大江。从楼上往东望，是鳞次栉比的屋舍。钟是编钟，是古代诸侯贵族宴会时旁边演奏的乐器。鼎是食器，古代诸侯们吃饭，每道菜单独放在一个小鼎里面，至少要有牛羊猪鱼鹿这五鼎食才叫大气上档次。钟鸣鼎食被王勃变成了一个成语，指这些人家都不是普通人家，而是堪比王侯的大富大贵之人。\n\n从楼上往西看，是滔滔的大江。江边停满了各种楼船——相当一部分自然也是楼上宾客们的座驾了。这些大船上有的绘着青雀，有的绘着黄龙，每一条都华美异常。需要注意的是，这里青雀不是简单的雀鸟，而是指传说中西王母驾前的神鸟，所以才能和黄龙所并列。后来李商隐说“蓬山此去无多路，青鸟殷勤为探看”，说的就是这个青雀。\n\n**云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。**\n\n这时候已经是邻近傍晚了。一场秋雨刚刚结束，乌云散去，澄空如洗，只剩下天边一抹被夕阳映成五彩的云霞。在这云霞的背景之上，一只孤独的鸟儿腾空而起，飞向天际。目光追随着鸟儿远去，她的身影越来越小，最终只看到在遥远的天边，大江和天际都在暮色中变得模糊，最终融合在一起，难分彼此。\n\n这里面有个很有趣的公案。王勃说的是孤鹜，可鹜是什么？是胖胖的水鸟，说好听了叫鸳鸯，说的不好听了叫野鸭子……这鸟都是成群结队活动的，也不善于长距离飞翔。所以为什么是一只孤单的胖野鸭飞过去，大家都很是费解。据说日本收藏的唐代抄本里面写作“孤雾”，但这又完全失去了动态的美感，这解释也不靠谱。\n\n我倒是觉得，王勃当时所形容的，很可能是白鹭、白鹤一类的水鸟。这种鸟身姿纤美，善于飞翔，最是能引发人的诗性。“晴空一鹤排云上，便引诗情到碧霄”，这个解释要更加应景的多。有可能在写的时候，误将鹭写成了鹜，所以才造成了这个误解。\n\n秋水共长天一色，这句里诞生出了水天一色这个成语，将水天之景写到了极致。后来的唐宋诗人们都喜欢写类似的诗句，比如“黄河远上白云间”、“孤帆远影碧空尽，唯见长江天际流”、“水随天去秋无际”、“江流天地外”、“洞庭秋水远连天”、“长江一洗放天青”等等，是诗人们最爱的意象。\n\n这两句一出，文章顿时如同从黑白默片变成彩色电影一样，一下子就活了、就有了颜色，不愧是被传诵不绝的千古名句！据说，闹小脾气的都督阎公听说这个年轻人挥笔写出了这一句时，不由得感叹说：“这是真正的天才啊！”于是赶快下楼和王勃见礼，并且站在他身边看他写完全篇。\n\n**渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。**\n\n从艺术角度来说，这一句之美并不亚于上一句。上一句是有色，这一句是有声。承接上一句，当目光已经投向天边，看到茫茫天际时，刚才所见的满眼繁华富贵顿时变的渺小起来。身后酒席上的欢宴喧哗逐渐远去了，此时目光中只有天地，耳边只剩下彭蠡湖畔渔夫归家的歌声、天空中飞过雁群的鸣叫。歌声渐小，雁鸣渐远，画面渐渐变得宁静沉寂。\n\n从出发，到近观，到游园，到登楼，到俯瞰，到远眺，到东西巡视，到随着飞鸟极目天边。这个一气呵成的长镜头带我们饱览了滕王阁景物之壮美，最终归于一片寥廓之中。此情此景之下，我们自然会开始思索一些永恒的问题——天地至大不朽，人类渺小短暂，那我们的存在又有什么意义呢？\n\n这时候，大家也终于意识到，自己正在亲眼见证历史的发生，意识到今日之会，必将因这个年轻人、因这篇雄文而不朽。事实也的确如此。千年之后，滕王阁已经重建了数十次，当年的楼阁是什么样子，阎都督、宇文州牧、孟学士、王将军究竟是谁，早就无人知晓了。但这座楼阁、这些名字已经被牢记在文学史上，只要人类文明还在，就会一直流传下去，得到真正的永生。\n\n开始的嘲弄早已经不在了。所有人都围拢过来，等待着王勃写下新的篇章，等待着自己刚被文字洗礼过的心灵，被重重敲击的那一刻。","slug":"reproduce/literature/TengWangGeXu-HaiShangGangQinShi-2","published":1,"updated":"2018-07-10T17:31:12.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zfz001jektzihni0aan","content":"<p>本文系转载，已征得原文作者同意，特此声明。<br>原文作者：海上钢琴师<br>原文链接：<a href=\"http://www.acfun.cn/a/ac4162716\" target=\"_blank\" rel=\"noopener\">http://www.acfun.cn/a/ac4162716</a></p>\n<hr>\n<p><strong>时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</strong></p>\n<p><strong>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。</strong></p>\n<p>第二三段在有些书上会合并为一段，总体来说是写景。开篇之后，既然背景已经交代清楚，那就要先从客观角度出发，来描绘这场盛会、这座楼阁了。从文字角度而言，这是全篇中最为华彩的一段，其中的几段名句，更是垂千古而不朽。</p>\n<p><strong>时维九月，序属三秋。</strong></p>\n<p>开始一句，就点名了现在的具体时间——农历九月，也就是所谓的三秋时节。按照古代农历，七八九月为秋季，三秋已经是秋天的最末，眼看就要进入冬天了。如果是在王勃的故乡山西，这时候已经是“秋风萧瑟天气凉，草木摇落露为霜”的时候了吧。</p>\n<p>但江南气候毕竟更加温和。“青山隐隐水迢迢，秋尽江南草未凋”，这时候的南昌城，草木还没有凋零，气候不冷不热，鱼蟹肥美，新酒方熟，正是舒适惬意的季节，最适合好友齐聚、登楼远眺、把酒临风，尽情抒发自己的胸怀。</p>\n<p><strong>潦水尽而寒潭清，烟光凝而暮山紫。</strong></p>\n<p>秋天的空气和夏天不同。夏季的空气闷热潮湿，远处的山峦都朦胧在水汽之中，看不清楚。丰沛的雨水让山上满是临时诞生的小溪，夹杂着落叶潺潺而下，让山脚下的潭水都变得有些浑浊了。</p>\n<p>但随着秋意的浸染，这些小溪逐渐消失，山下的潭水越发的青碧深幽，仿佛是一面碧玉磨成的镜子一样。天高气爽，笼罩着山川的水气消散了，一眼看去，山峦的形状一览无遗，山上的秋叶在夕阳映照下，显得分外红艳。</p>\n<p>古人曾经评论说，这两句“写尽九月之景”，确实如此。呼应前两句对时间的描述，一幅完美的深秋画卷已经展开在我们面前。</p>\n<p><strong>俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。</strong></p>\n<p>前面几句还算是开篇静态画面的话，从这句开始，一幕绝美的电影、一个经典的长镜头开始了——</p>\n<p>俨骖騑于上路，骖，是左马；騑，是右马。驾着双马拉的马车，王勃开始了他的旅程。能驾双马的马车，相当于现在年轻人开着一辆超跑，是一件很有格调的事儿。要是开到三驾、四驾的马车，那就是高级别的官员了。</p>\n<p>上路，说的不是王勃专门上单，而是呼应前面提到的暮山，指的是山上的路。驾着双马的超跑，从刚才描述的秋山路上驶来，带起一地的红叶……这就是秋名山老司机、社会我王哥啊！</p>\n<p>访风景于崇阿，崇阿，指崇山峻岭，这个词大有来历。大家都知道王羲之的《兰亭序》，但兰亭序是什么场合下写的？是王羲之、谢安等一群好哥们一起喝酒赛诗，最后给诗集做的序。只不过这篇序名气太大，以至于大家把后面的几十首诗都忽略了。</p>\n<p>但在兰亭会中，主角其实还是这几十首诗。其中被评为当日第一的，是谢安弟弟谢万所写的《兰亭》诗，开头第一句就是“肆眺崇阿，寓目高林”。王羲之在序里说“此地有崇山峻岭，茂林修竹”，呼应的就是这一句。</p>\n<p>所以，王哥开着超跑，一路上还在寻花问柳……啊不对，寻访沿途的风景。这一路走着看着，眼前突然出现了一个绝美的去处。</p>\n<p>这个去处，就是矗立在赣江江畔的帝子之长洲、天人之旧馆。滕王阁是唐帝国的亲王所建，所以夸一句帝子之长洲，完全没有问题。临字有多种含义，从山上往下望叫临，从外地而来叫临，突然见到这座楼台叫临，靠近水边的沙洲也叫临，但每一个解释都贴合这一句，可谓绝妙。</p>\n<p>当时滕王阁修了并没多少年。之所以用旧字，一是惋惜当时修阁的滕王已经不在了，有睹物思人之情；二是将滕王阁比喻为天上仙人的居所，只不过被仙人遗留在此，更是夸耀了滕王阁人间难得的盛景。</p>\n<p>把这几句连起来，我们能看到一个年轻人出门上路，寻访名山大川，峰回路转之时，一座江边楼阁出现在他眼前。这座楼阁是如此华美，简直不像是人间的建筑。</p>\n<p>既然来到这座仙宫前了，那接下来，肯定是要好好观赏一番：</p>\n<p><strong>层峦耸翠，上出重霄；飞阁流丹，下临无地。</strong></p>\n<p>走近些看，这座仙宫起伏连绵，屋顶铺着翠绿的琉璃瓦，其高耸之处仿佛直上云霄一般。当年曹操修铜雀台，曹植做赋，其中写到“立中天之华观兮，连飞阁乎西城”，这里的飞阁指的就是那些高高的楼阁之间精细纤巧、涂成朱红色的长桥阁道。一场秋雨洗过，那浓厚鲜亮的颜色仿佛都快要流淌下来一样。楼阁下紧靠大江，看下去都是江水，不见地面，气势恢宏。</p>\n<p>远眺之后，就要逐渐走进这座仙宫了：</p>\n<p><strong>鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</strong></p>\n<p>宫殿紧靠江畔，殿前的花园和水岸的沙洲结合在一起，走向楼阁的路就在花园里萦回曲折，常有白鹤、鸳鸯等水鸟在路边嬉戏遨游。殿外几树桂花，宫前遍植兰草，自有幽香缭绕在廊庑之间。整座仙宫的构造精巧，宫殿楼阁高低起伏，走势就如同远处的山脉一样。</p>\n<p>中国古代造园手法，从唐宋开始真正步入成熟，到明清时达到大成。滕王阁修建于唐初，但从这两句描述中可以看到，当时人们在如何利用自然环境造园、如何借用远处山景和园景融为一体方面，已经很有思路了。</p>\n<p>逛完园林，自然就开始登楼：</p>\n<p><strong>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。</strong></p>\n<p>绣闼，满是锦绣的门帘。虽然我们现在看那些景点不挂门帘，但古时候这都是人们生活起居的地方，挂门帘才是正常的。雕甍，精雕细琢的屋脊。同为初唐四杰的卢照邻说“双阙连甍垂凤翼”，指的就是唐代这种屋脊宽大、双侧自然下垂的宫殿造型。</p>\n<p>登到这座高耸的楼阁上，掀开西侧的锦缎门帘，扑面而来的是一幅壮丽景色。向下看，是矮处殿阁精美灿烂的屋脊。向远处看，是旷阔无际的原野、视野尽头的山峦。旷野之上，河流蜿蜒曲折，湖泊点缀其间，这种自然造物的美令人心醉神迷。</p>\n<p><strong>闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。</strong></p>\n<p>这句夸景色之美，同时也是夸耀南昌之富庶、宾客之高贵。滕王阁不是远郊外的景点，而是就在南昌城西，背靠雄城，面临大江。从楼上往东望，是鳞次栉比的屋舍。钟是编钟，是古代诸侯贵族宴会时旁边演奏的乐器。鼎是食器，古代诸侯们吃饭，每道菜单独放在一个小鼎里面，至少要有牛羊猪鱼鹿这五鼎食才叫大气上档次。钟鸣鼎食被王勃变成了一个成语，指这些人家都不是普通人家，而是堪比王侯的大富大贵之人。</p>\n<p>从楼上往西看，是滔滔的大江。江边停满了各种楼船——相当一部分自然也是楼上宾客们的座驾了。这些大船上有的绘着青雀，有的绘着黄龙，每一条都华美异常。需要注意的是，这里青雀不是简单的雀鸟，而是指传说中西王母驾前的神鸟，所以才能和黄龙所并列。后来李商隐说“蓬山此去无多路，青鸟殷勤为探看”，说的就是这个青雀。</p>\n<p><strong>云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。</strong></p>\n<p>这时候已经是邻近傍晚了。一场秋雨刚刚结束，乌云散去，澄空如洗，只剩下天边一抹被夕阳映成五彩的云霞。在这云霞的背景之上，一只孤独的鸟儿腾空而起，飞向天际。目光追随着鸟儿远去，她的身影越来越小，最终只看到在遥远的天边，大江和天际都在暮色中变得模糊，最终融合在一起，难分彼此。</p>\n<p>这里面有个很有趣的公案。王勃说的是孤鹜，可鹜是什么？是胖胖的水鸟，说好听了叫鸳鸯，说的不好听了叫野鸭子……这鸟都是成群结队活动的，也不善于长距离飞翔。所以为什么是一只孤单的胖野鸭飞过去，大家都很是费解。据说日本收藏的唐代抄本里面写作“孤雾”，但这又完全失去了动态的美感，这解释也不靠谱。</p>\n<p>我倒是觉得，王勃当时所形容的，很可能是白鹭、白鹤一类的水鸟。这种鸟身姿纤美，善于飞翔，最是能引发人的诗性。“晴空一鹤排云上，便引诗情到碧霄”，这个解释要更加应景的多。有可能在写的时候，误将鹭写成了鹜，所以才造成了这个误解。</p>\n<p>秋水共长天一色，这句里诞生出了水天一色这个成语，将水天之景写到了极致。后来的唐宋诗人们都喜欢写类似的诗句，比如“黄河远上白云间”、“孤帆远影碧空尽，唯见长江天际流”、“水随天去秋无际”、“江流天地外”、“洞庭秋水远连天”、“长江一洗放天青”等等，是诗人们最爱的意象。</p>\n<p>这两句一出，文章顿时如同从黑白默片变成彩色电影一样，一下子就活了、就有了颜色，不愧是被传诵不绝的千古名句！据说，闹小脾气的都督阎公听说这个年轻人挥笔写出了这一句时，不由得感叹说：“这是真正的天才啊！”于是赶快下楼和王勃见礼，并且站在他身边看他写完全篇。</p>\n<p><strong>渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。</strong></p>\n<p>从艺术角度来说，这一句之美并不亚于上一句。上一句是有色，这一句是有声。承接上一句，当目光已经投向天边，看到茫茫天际时，刚才所见的满眼繁华富贵顿时变的渺小起来。身后酒席上的欢宴喧哗逐渐远去了，此时目光中只有天地，耳边只剩下彭蠡湖畔渔夫归家的歌声、天空中飞过雁群的鸣叫。歌声渐小，雁鸣渐远，画面渐渐变得宁静沉寂。</p>\n<p>从出发，到近观，到游园，到登楼，到俯瞰，到远眺，到东西巡视，到随着飞鸟极目天边。这个一气呵成的长镜头带我们饱览了滕王阁景物之壮美，最终归于一片寥廓之中。此情此景之下，我们自然会开始思索一些永恒的问题——天地至大不朽，人类渺小短暂，那我们的存在又有什么意义呢？</p>\n<p>这时候，大家也终于意识到，自己正在亲眼见证历史的发生，意识到今日之会，必将因这个年轻人、因这篇雄文而不朽。事实也的确如此。千年之后，滕王阁已经重建了数十次，当年的楼阁是什么样子，阎都督、宇文州牧、孟学士、王将军究竟是谁，早就无人知晓了。但这座楼阁、这些名字已经被牢记在文学史上，只要人类文明还在，就会一直流传下去，得到真正的永生。</p>\n<p>开始的嘲弄早已经不在了。所有人都围拢过来，等待着王勃写下新的篇章，等待着自己刚被文字洗礼过的心灵，被重重敲击的那一刻。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文系转载，已征得原文作者同意，特此声明。<br>原文作者：海上钢琴师<br>原文链接：<a href=\"http://www.acfun.cn/a/ac4162716\" target=\"_blank\" rel=\"noopener\">http://www.acfun.cn/a/ac4162716</a></p>\n<hr>\n<p><strong>时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</strong></p>\n<p><strong>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。</strong></p>\n<p>第二三段在有些书上会合并为一段，总体来说是写景。开篇之后，既然背景已经交代清楚，那就要先从客观角度出发，来描绘这场盛会、这座楼阁了。从文字角度而言，这是全篇中最为华彩的一段，其中的几段名句，更是垂千古而不朽。</p>\n<p><strong>时维九月，序属三秋。</strong></p>\n<p>开始一句，就点名了现在的具体时间——农历九月，也就是所谓的三秋时节。按照古代农历，七八九月为秋季，三秋已经是秋天的最末，眼看就要进入冬天了。如果是在王勃的故乡山西，这时候已经是“秋风萧瑟天气凉，草木摇落露为霜”的时候了吧。</p>\n<p>但江南气候毕竟更加温和。“青山隐隐水迢迢，秋尽江南草未凋”，这时候的南昌城，草木还没有凋零，气候不冷不热，鱼蟹肥美，新酒方熟，正是舒适惬意的季节，最适合好友齐聚、登楼远眺、把酒临风，尽情抒发自己的胸怀。</p>\n<p><strong>潦水尽而寒潭清，烟光凝而暮山紫。</strong></p>\n<p>秋天的空气和夏天不同。夏季的空气闷热潮湿，远处的山峦都朦胧在水汽之中，看不清楚。丰沛的雨水让山上满是临时诞生的小溪，夹杂着落叶潺潺而下，让山脚下的潭水都变得有些浑浊了。</p>\n<p>但随着秋意的浸染，这些小溪逐渐消失，山下的潭水越发的青碧深幽，仿佛是一面碧玉磨成的镜子一样。天高气爽，笼罩着山川的水气消散了，一眼看去，山峦的形状一览无遗，山上的秋叶在夕阳映照下，显得分外红艳。</p>\n<p>古人曾经评论说，这两句“写尽九月之景”，确实如此。呼应前两句对时间的描述，一幅完美的深秋画卷已经展开在我们面前。</p>\n<p><strong>俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。</strong></p>\n<p>前面几句还算是开篇静态画面的话，从这句开始，一幕绝美的电影、一个经典的长镜头开始了——</p>\n<p>俨骖騑于上路，骖，是左马；騑，是右马。驾着双马拉的马车，王勃开始了他的旅程。能驾双马的马车，相当于现在年轻人开着一辆超跑，是一件很有格调的事儿。要是开到三驾、四驾的马车，那就是高级别的官员了。</p>\n<p>上路，说的不是王勃专门上单，而是呼应前面提到的暮山，指的是山上的路。驾着双马的超跑，从刚才描述的秋山路上驶来，带起一地的红叶……这就是秋名山老司机、社会我王哥啊！</p>\n<p>访风景于崇阿，崇阿，指崇山峻岭，这个词大有来历。大家都知道王羲之的《兰亭序》，但兰亭序是什么场合下写的？是王羲之、谢安等一群好哥们一起喝酒赛诗，最后给诗集做的序。只不过这篇序名气太大，以至于大家把后面的几十首诗都忽略了。</p>\n<p>但在兰亭会中，主角其实还是这几十首诗。其中被评为当日第一的，是谢安弟弟谢万所写的《兰亭》诗，开头第一句就是“肆眺崇阿，寓目高林”。王羲之在序里说“此地有崇山峻岭，茂林修竹”，呼应的就是这一句。</p>\n<p>所以，王哥开着超跑，一路上还在寻花问柳……啊不对，寻访沿途的风景。这一路走着看着，眼前突然出现了一个绝美的去处。</p>\n<p>这个去处，就是矗立在赣江江畔的帝子之长洲、天人之旧馆。滕王阁是唐帝国的亲王所建，所以夸一句帝子之长洲，完全没有问题。临字有多种含义，从山上往下望叫临，从外地而来叫临，突然见到这座楼台叫临，靠近水边的沙洲也叫临，但每一个解释都贴合这一句，可谓绝妙。</p>\n<p>当时滕王阁修了并没多少年。之所以用旧字，一是惋惜当时修阁的滕王已经不在了，有睹物思人之情；二是将滕王阁比喻为天上仙人的居所，只不过被仙人遗留在此，更是夸耀了滕王阁人间难得的盛景。</p>\n<p>把这几句连起来，我们能看到一个年轻人出门上路，寻访名山大川，峰回路转之时，一座江边楼阁出现在他眼前。这座楼阁是如此华美，简直不像是人间的建筑。</p>\n<p>既然来到这座仙宫前了，那接下来，肯定是要好好观赏一番：</p>\n<p><strong>层峦耸翠，上出重霄；飞阁流丹，下临无地。</strong></p>\n<p>走近些看，这座仙宫起伏连绵，屋顶铺着翠绿的琉璃瓦，其高耸之处仿佛直上云霄一般。当年曹操修铜雀台，曹植做赋，其中写到“立中天之华观兮，连飞阁乎西城”，这里的飞阁指的就是那些高高的楼阁之间精细纤巧、涂成朱红色的长桥阁道。一场秋雨洗过，那浓厚鲜亮的颜色仿佛都快要流淌下来一样。楼阁下紧靠大江，看下去都是江水，不见地面，气势恢宏。</p>\n<p>远眺之后，就要逐渐走进这座仙宫了：</p>\n<p><strong>鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</strong></p>\n<p>宫殿紧靠江畔，殿前的花园和水岸的沙洲结合在一起，走向楼阁的路就在花园里萦回曲折，常有白鹤、鸳鸯等水鸟在路边嬉戏遨游。殿外几树桂花，宫前遍植兰草，自有幽香缭绕在廊庑之间。整座仙宫的构造精巧，宫殿楼阁高低起伏，走势就如同远处的山脉一样。</p>\n<p>中国古代造园手法，从唐宋开始真正步入成熟，到明清时达到大成。滕王阁修建于唐初，但从这两句描述中可以看到，当时人们在如何利用自然环境造园、如何借用远处山景和园景融为一体方面，已经很有思路了。</p>\n<p>逛完园林，自然就开始登楼：</p>\n<p><strong>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。</strong></p>\n<p>绣闼，满是锦绣的门帘。虽然我们现在看那些景点不挂门帘，但古时候这都是人们生活起居的地方，挂门帘才是正常的。雕甍，精雕细琢的屋脊。同为初唐四杰的卢照邻说“双阙连甍垂凤翼”，指的就是唐代这种屋脊宽大、双侧自然下垂的宫殿造型。</p>\n<p>登到这座高耸的楼阁上，掀开西侧的锦缎门帘，扑面而来的是一幅壮丽景色。向下看，是矮处殿阁精美灿烂的屋脊。向远处看，是旷阔无际的原野、视野尽头的山峦。旷野之上，河流蜿蜒曲折，湖泊点缀其间，这种自然造物的美令人心醉神迷。</p>\n<p><strong>闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。</strong></p>\n<p>这句夸景色之美，同时也是夸耀南昌之富庶、宾客之高贵。滕王阁不是远郊外的景点，而是就在南昌城西，背靠雄城，面临大江。从楼上往东望，是鳞次栉比的屋舍。钟是编钟，是古代诸侯贵族宴会时旁边演奏的乐器。鼎是食器，古代诸侯们吃饭，每道菜单独放在一个小鼎里面，至少要有牛羊猪鱼鹿这五鼎食才叫大气上档次。钟鸣鼎食被王勃变成了一个成语，指这些人家都不是普通人家，而是堪比王侯的大富大贵之人。</p>\n<p>从楼上往西看，是滔滔的大江。江边停满了各种楼船——相当一部分自然也是楼上宾客们的座驾了。这些大船上有的绘着青雀，有的绘着黄龙，每一条都华美异常。需要注意的是，这里青雀不是简单的雀鸟，而是指传说中西王母驾前的神鸟，所以才能和黄龙所并列。后来李商隐说“蓬山此去无多路，青鸟殷勤为探看”，说的就是这个青雀。</p>\n<p><strong>云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。</strong></p>\n<p>这时候已经是邻近傍晚了。一场秋雨刚刚结束，乌云散去，澄空如洗，只剩下天边一抹被夕阳映成五彩的云霞。在这云霞的背景之上，一只孤独的鸟儿腾空而起，飞向天际。目光追随着鸟儿远去，她的身影越来越小，最终只看到在遥远的天边，大江和天际都在暮色中变得模糊，最终融合在一起，难分彼此。</p>\n<p>这里面有个很有趣的公案。王勃说的是孤鹜，可鹜是什么？是胖胖的水鸟，说好听了叫鸳鸯，说的不好听了叫野鸭子……这鸟都是成群结队活动的，也不善于长距离飞翔。所以为什么是一只孤单的胖野鸭飞过去，大家都很是费解。据说日本收藏的唐代抄本里面写作“孤雾”，但这又完全失去了动态的美感，这解释也不靠谱。</p>\n<p>我倒是觉得，王勃当时所形容的，很可能是白鹭、白鹤一类的水鸟。这种鸟身姿纤美，善于飞翔，最是能引发人的诗性。“晴空一鹤排云上，便引诗情到碧霄”，这个解释要更加应景的多。有可能在写的时候，误将鹭写成了鹜，所以才造成了这个误解。</p>\n<p>秋水共长天一色，这句里诞生出了水天一色这个成语，将水天之景写到了极致。后来的唐宋诗人们都喜欢写类似的诗句，比如“黄河远上白云间”、“孤帆远影碧空尽，唯见长江天际流”、“水随天去秋无际”、“江流天地外”、“洞庭秋水远连天”、“长江一洗放天青”等等，是诗人们最爱的意象。</p>\n<p>这两句一出，文章顿时如同从黑白默片变成彩色电影一样，一下子就活了、就有了颜色，不愧是被传诵不绝的千古名句！据说，闹小脾气的都督阎公听说这个年轻人挥笔写出了这一句时，不由得感叹说：“这是真正的天才啊！”于是赶快下楼和王勃见礼，并且站在他身边看他写完全篇。</p>\n<p><strong>渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。</strong></p>\n<p>从艺术角度来说，这一句之美并不亚于上一句。上一句是有色，这一句是有声。承接上一句，当目光已经投向天边，看到茫茫天际时，刚才所见的满眼繁华富贵顿时变的渺小起来。身后酒席上的欢宴喧哗逐渐远去了，此时目光中只有天地，耳边只剩下彭蠡湖畔渔夫归家的歌声、天空中飞过雁群的鸣叫。歌声渐小，雁鸣渐远，画面渐渐变得宁静沉寂。</p>\n<p>从出发，到近观，到游园，到登楼，到俯瞰，到远眺，到东西巡视，到随着飞鸟极目天边。这个一气呵成的长镜头带我们饱览了滕王阁景物之壮美，最终归于一片寥廓之中。此情此景之下，我们自然会开始思索一些永恒的问题——天地至大不朽，人类渺小短暂，那我们的存在又有什么意义呢？</p>\n<p>这时候，大家也终于意识到，自己正在亲眼见证历史的发生，意识到今日之会，必将因这个年轻人、因这篇雄文而不朽。事实也的确如此。千年之后，滕王阁已经重建了数十次，当年的楼阁是什么样子，阎都督、宇文州牧、孟学士、王将军究竟是谁，早就无人知晓了。但这座楼阁、这些名字已经被牢记在文学史上，只要人类文明还在，就会一直流传下去，得到真正的永生。</p>\n<p>开始的嘲弄早已经不在了。所有人都围拢过来，等待着王勃写下新的篇章，等待着自己刚被文字洗礼过的心灵，被重重敲击的那一刻。</p>\n"},{"title":"美文系列：滕王阁序(3)","date":"2018-06-09T19:29:43.000Z","toc":false,"thumbnail":"/images/reproduce/literature/TengWangGeXu-thumbnail.png","banner":"/images/reproduce/literature/TengWangGeXu-banner.png","_content":"本文系转载，已征得原文作者同意，特此声明。\n原文作者：海上钢琴师\n原文链接：[http://www.acfun.cn/a/ac4399635](http://www.acfun.cn/a/ac4399635)\n\n---\n\n**遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？**\n\n**嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心。穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！**\n\n三百年前的一个春日，王羲之与谢安等好友会于兰亭。酒至酣处，诗已成章，王羲之提起笔来，准备写一篇序文。文章自然是从这场盛会开始，大家仰观宇宙之大，俯察品类之盛，将视听之娱都享受到了极致，可谓人生至乐。\n\n但接下来，王羲之笔锋一转，开始感慨。这样的至乐转瞬即逝，人生苦短，命运无常。人在志得意满之时，可曾想到老之将至？等看到自己所爱已经逝去，谁又能忍得住自己的悲伤？一代又一代的人们，都在这样的悲苦中辗转零落，这是多么哀痛的事情啊！\n\n三百年后的这个秋天，王勃站在滕王阁上。暮色低垂，四顾茫茫。大江在脚下滔滔而去，一直流向天地的尽头。吾生须臾，大江无穷，以须臾之身临无穷之境，此情此景，是应该悲伤，还是应该喜乐呢？\n\n**遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。**\n\n和已经老之将至的王羲之不同，王勃此时正是少年意气。凭栏远眺天外，不由觉得胸怀畅快，兴致飞扬。身后的宴席上，细细的箫声传来，和江上的清风一起在身边旋绕。当女孩子们的歌声告一段落时，仿佛天边的白云也凝滞了。\n\n这一点很有趣。面对类似的景色时，不同的人，感慨也是不同的。再过三百年，同样是在大江之上，苏轼和朋友们又是另外的感触。这三位顶尖的人物，有哀伤感怀，有气势昂扬，有遗世独立，但无论是哪一种情感，都是如此的自然，毫无矫揉造作之嫌。\n\n这恰好就是王国维所说的“境界”。“一切景语皆情语。境非独谓景物也，喜怒哀乐，亦人心中之一境界”。境界并非简单的写景，而是写真景色、真感情。山高水长、气象万千，谁又规定了必须发什么样的感慨呢？只要真景色和真感情可以交融在一起，那便是最好的文字了。\n\n**睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。**\n\n这一句里连用了四个典故。睢园是当年西汉梁王所修建的园林，遍植翠竹，在历史上以梁园雅集而著称。当年汉代最出色的文学家如司马相如、枚乘、严忌等人常常聚会于此，饮酒做赋。李白曾经作梁园诗：“人生达命岂暇愁，且饮美酒登高楼”，说的就是这里。\n\n彭泽是说的历史上另一个文学大家陶渊明，因为他做过彭泽令，所以后世常用彭泽来指代他。陶渊明也酷爱饮酒，给自己作挽歌都要写上“但恨在世时，饮酒不得足”，可见其酒瘾之大。\n\n三国时，曹魏建都于邺城，旁边便是邺水。三曹、建安七子等一众名士曾聚集于邺水之畔的铜雀台上，饮宴作乐。曹植写诗道：“秋兰被长坂，朱华冒绿池。潜鱼跃清波，好鸟鸣高枝”，也是极言欢聚之美。\n\n曹植的文笔，历来为诗家所称道。到了南北朝时，另一位大诗人谢灵运就吹嘘说“天下之才共一石。曹子建独得八斗，我得一斗，天下人共分一斗”。当然，谢灵运可是被李白推崇为“中间小谢又清发”的人，其才华自不必言。谢灵运虽然不是临川人，但做过江西临川的官员，所以临川之笔指的就是他。\n\n多说一句，江西多才子，而临川又是江西之冠。在王勃发出这句感慨后，临川才子便层出不穷，晏殊父子、王安石、曾巩、汤显祖等，无不是中国文学史上的顶尖人物。\n\n这一句中虽然连用了四个典故，但丝毫不觉得晦涩。这四个典故都和良辰美景、主宾欢宴、美酒佳肴、文学大家有关，和今天滕王阁上的聚会有着异曲同工之妙，也是在赞誉今日之会，可以和当年梁园、铜雀台之会相媲美。\n\n**四美具，二难并。穷睇眄于中天，极娱游于暇日。**\n\n就像上一句所描绘的，此时有美景、有美食、有美酒、有美文，于难得之时遇到难得之人，真是一场盛会！大家一起极目天边，欣赏这转瞬即逝的美景；一起尽情游戏，享受这片刻的欢乐时光。\n\n**天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。**\n\n物盛而衰，乐极则悲。面对高远无极的天地之时，人们自然可以意识到自身的渺小，意识到眼下的小小欢乐，只不过是天地之间的一瞬而已。与永恒相比，这些欢乐又有什么意义呢？况且人生在世，福祸本来就是定数。此时欢乐越多，明日的空虚失落就越大——此时终将过去，明日终会来临。眼见逆旅在前却避无可避，这是多么的无奈！\n\n**望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。**\n\n王勃正在自己的人生旅程上艰难跋涉。初唐之时，除了关中到洛阳一带尚称得上繁华以外，南方大部分地方都还贫困落后。他从长安一路向南，去交趾探望自己的父亲，仿佛是慢慢从文明走入蛮荒。\n\n南昌刚好是他旅程的中点。回首来路，西北望长安，已经在几千里以外了，在那太阳落下的地方。眺望前程，吴楚东南坼，父亲所在的地方隐藏在重重的云雾里，看不清还有多少艰难险阻。一边是再也攀不上的高耸天柱，一边是不可知的万丈深渊，人生沦落到此，进退两难。\n\n**关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。**\n\n这是与前面落霞一句并称的千古名句。关山是什么？是连接关中与西部的唯一通道，以关陇古道的名字为人所熟知。关陇古道在崇山峻岭之中萦回曲折，是有名难走的道路。当年张衡在四愁诗中说“我所思兮在汉阳，欲往从之陇坂长”，说的就是这里。\n\n王勃虽然没有翻越关山，但他一路行来，旅途中的艰辛比翻越关山古道更多更难。旅人迷于道路，甚至客死道边，乃是常见的事情，谁又知道这些漂泊天涯的人心中有多少失意悲苦！后来王守仁贬谪在贵州，遇到一家三口同时倒毙于山下，也只有他出于同情才埋葬祭拜。“古者重去其乡，游宦不逾千里。吾以窜逐而来此，宜也。尔亦何辜乎？”\n\n谁不爱自己的故园？谁愿意冒着死亡的危险远赴他乡？漂泊天涯的游子，大都有着自己不得不漂泊的理由。试看今日之宴上，从阎公、宇文州牧到千里逢迎的各位高朋，不管看起来光鲜还是落魄，不都是孤独的异乡之人吗？大家都像那无根的浮萍、像大江中失去控制的小舟，只能随着天下的大势而随波逐流、身不由己啊！\n\n**怀帝阍而不见，奉宣室以何年？**\n\n用这一句，王勃清楚的点出了自己漂泊的原因——宦途失意，报国无门。“道不行，乘桴浮于海”，既然此时君主不待见我，那我也只好浪迹于江湖了。当年贾谊能被文帝召回长安，我有没有这样一天呢？\n\n**嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。**\n\n时也运也命也——人的一生，真的是被冥冥中不可知的命运所操纵。西汉的冯唐勤恳贤良，却历经文帝、景帝两朝不被提拔。等终于被汉武帝赏识要委以重任时，已经年过九十了。人的一生，就是这样短暂，时机一纵即逝。汉武帝时的飞将军李广一生数十次参战，威名远播于匈奴，却总是因为各种各样的原因无法以军功封侯。最后更是因出征迷路获罪，自尽而死。这难道不是他们注定的悲剧吗？\n\n**屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？**\n\n即使是遇到圣明的君主，也难以拯救这些人的命运。贾谊是西汉承前启后的大学问家、第一流的聪明贤才，在史记上和屈原并列在《屈子贾生列传》里的人物。但这样的人却被汉文帝下令贬谪到长沙，虽然后来文帝又召回他问询，但问的却不是治国安邦之道，而是鬼神虚妄之事，多么令人惋惜。\n\n梁鸿是东汉的大学者，举案齐眉中的男主角。他因为写了首政治讽刺诗而被汉章帝追捕，被迫逃亡到海曲，隐姓埋名才得以终老。这两位都是著名的贤良之人、大学问家，而汉文帝和汉章帝也是历史上出色的明君。结果明君贤臣不但不能相得益彰，反而以此为下场，这是不是也说明了命运的难以抵抗呢？\n\n**所赖君子见机，达人知命。老当益壮，宁移白首之心。穷且益坚，不坠青云之志。**\n\n但是，这并不代表我们要向命运低下头颅。君子能够乐观面对一切逆境，不改心中青云之志；更能够伺机而动，随时准备挑战命运。人在衰老之时，心灵要愈加强大，不能因为老去而改变自己的想法。人在穷困之时，更要坚定自己的信念，不能让自己的志向和现实妥协。\n\n因为每一次妥协都是向命运的屈服，都是将自己的未来推向那注定潦倒的结局。只有那些永不服输、屡败屡战的猛士，才能真正主宰自己的人生。当年班超投笔从戎时已经三十多岁了，刘邦起义兵之时更是年近五十，如果他们早早就安于自己的命运，又怎么可能创下如此绝世的功业呢？\n\n**酌贪泉而觉爽，处涸辙以犹欢。**\n\n最正确的心态，是坦然地直面命运。不因权势而堕落，不因得志而骄傲，不因困境而绝望，不因落魄而自卑。当年的清官吴隐之路过贪泉，既不会因为这泉水的传说而避而不饮，也不会矫揉造作地找借口掩饰，而是遵从自心，渴了就喝，喝完就走——毕竟只是一杯泉水而已，难道就能浇灭君子心中的正气？路上小水坑里的鱼儿，哪怕陷入相濡以沫的困境，也一样可以笑着面对，谁说就一定要惶惶然不可终日？\n\n**北海虽赊，扶摇可接；东隅已逝，桑榆非晚。**\n\n就算是小水坑里的鱼儿，也可能是北冥之鱼啊。北冥有鱼，其名为鲲，化而为鸟，其名为鹏。当它化作鲲鹏之时，自然可以水击三千里，抟扶摇而上者九万里，不管是南冥还是北海，一振翅就可以抵达。有这样的本领和志向，自然不用因为一时身处涸辙而自怨自艾。就算失之东隅，错过了上一个好机会，但一样可以收之桑榆，未来会有更多的机遇在等待着你。但如果你因为错过一个机会就把余生都用来悔恨哭泣，那后面的机遇就都被你自己放弃了。\n\n**孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！**\n\n君子既要胸怀高远，又要知行合一。志向这东西，单靠心中想想是万万不可能实现的，一定要踏踏实实、持之以恒的去做事。像当年还珠合浦的孟尝，虽然自己的品性确实高洁，但遇到困难就回家隐居务农，这就算有报国之心，也只是空话而已。阮籍可算是有才，可却将才华全用来谈玄说易、搞得两晋风气都虚无放诞。后面东晋朝廷诸公、一群名士，不想着克复中原，反而新亭对泣，这根本就不是值得学习的榜样！\n\n在这两段中，王勃的笔锋一转，从写景自然地转向抒情。汉人朴实浑厚，魏晋飘逸潇洒，宋人以文载道，但唐人的风气却是极致的豪迈奔放。就算处在人生中最为困顿的时期，王勃的笔下依然是满溢着自信和希望，坚信自己一定能够走出困境、一飞冲天。\n\n当时的主流风气其并不是这样的。“争构纤微，竞为雕刻，骨气都尽，刚健不闻”，这才是当时宫廷流行的靡靡之风。滕王阁上，那些事先已经悄悄写好、揣在各人怀中的诗文，想来也都是这些纤巧绮靡的货色。王勃所写下的前几段，虽然文字之美已经达到了极致，可还没有彻底脱出这个窠臼。\n\n但从这两段开始，整篇文章彻底去到了一个全新的境界。纵然形制还是四六对仗的骈体、纵然文字还是那样的极尽华丽，但有某种东西、某种直击人的心底让人泪流满面无法呼吸的东西慢慢从中浮现出来。这种东西，就是人们常说的“风骨”，是支持中国文学传承数千年的奥妙所在。\n\n高情壮思，有抑扬天地之心；雄笔奇才，有鼓怒风云之气。初唐四杰，正是这种风骨的引领者。他们像庄子笔下的大鹏一样，绝云气，负青天，将文学的边界撑展开来，给后来的唐代文人们留下一个可以尽情施展的世界。","source":"_posts/reproduce/literature/TengWangGeXu-HaiShangGangQinShi-3.md","raw":"---\ntitle: 美文系列：滕王阁序(3)\ndate: 2018-6-10 03:29:43\ncategories: 文学\ntags: \n    - 文学\n    - 滕王阁序\n    - 转载\ntoc: false\nthumbnail: /images/reproduce/literature/TengWangGeXu-thumbnail.png\nbanner: /images/reproduce/literature/TengWangGeXu-banner.png\n---\n本文系转载，已征得原文作者同意，特此声明。\n原文作者：海上钢琴师\n原文链接：[http://www.acfun.cn/a/ac4399635](http://www.acfun.cn/a/ac4399635)\n\n---\n\n**遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？**\n\n**嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心。穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！**\n\n三百年前的一个春日，王羲之与谢安等好友会于兰亭。酒至酣处，诗已成章，王羲之提起笔来，准备写一篇序文。文章自然是从这场盛会开始，大家仰观宇宙之大，俯察品类之盛，将视听之娱都享受到了极致，可谓人生至乐。\n\n但接下来，王羲之笔锋一转，开始感慨。这样的至乐转瞬即逝，人生苦短，命运无常。人在志得意满之时，可曾想到老之将至？等看到自己所爱已经逝去，谁又能忍得住自己的悲伤？一代又一代的人们，都在这样的悲苦中辗转零落，这是多么哀痛的事情啊！\n\n三百年后的这个秋天，王勃站在滕王阁上。暮色低垂，四顾茫茫。大江在脚下滔滔而去，一直流向天地的尽头。吾生须臾，大江无穷，以须臾之身临无穷之境，此情此景，是应该悲伤，还是应该喜乐呢？\n\n**遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。**\n\n和已经老之将至的王羲之不同，王勃此时正是少年意气。凭栏远眺天外，不由觉得胸怀畅快，兴致飞扬。身后的宴席上，细细的箫声传来，和江上的清风一起在身边旋绕。当女孩子们的歌声告一段落时，仿佛天边的白云也凝滞了。\n\n这一点很有趣。面对类似的景色时，不同的人，感慨也是不同的。再过三百年，同样是在大江之上，苏轼和朋友们又是另外的感触。这三位顶尖的人物，有哀伤感怀，有气势昂扬，有遗世独立，但无论是哪一种情感，都是如此的自然，毫无矫揉造作之嫌。\n\n这恰好就是王国维所说的“境界”。“一切景语皆情语。境非独谓景物也，喜怒哀乐，亦人心中之一境界”。境界并非简单的写景，而是写真景色、真感情。山高水长、气象万千，谁又规定了必须发什么样的感慨呢？只要真景色和真感情可以交融在一起，那便是最好的文字了。\n\n**睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。**\n\n这一句里连用了四个典故。睢园是当年西汉梁王所修建的园林，遍植翠竹，在历史上以梁园雅集而著称。当年汉代最出色的文学家如司马相如、枚乘、严忌等人常常聚会于此，饮酒做赋。李白曾经作梁园诗：“人生达命岂暇愁，且饮美酒登高楼”，说的就是这里。\n\n彭泽是说的历史上另一个文学大家陶渊明，因为他做过彭泽令，所以后世常用彭泽来指代他。陶渊明也酷爱饮酒，给自己作挽歌都要写上“但恨在世时，饮酒不得足”，可见其酒瘾之大。\n\n三国时，曹魏建都于邺城，旁边便是邺水。三曹、建安七子等一众名士曾聚集于邺水之畔的铜雀台上，饮宴作乐。曹植写诗道：“秋兰被长坂，朱华冒绿池。潜鱼跃清波，好鸟鸣高枝”，也是极言欢聚之美。\n\n曹植的文笔，历来为诗家所称道。到了南北朝时，另一位大诗人谢灵运就吹嘘说“天下之才共一石。曹子建独得八斗，我得一斗，天下人共分一斗”。当然，谢灵运可是被李白推崇为“中间小谢又清发”的人，其才华自不必言。谢灵运虽然不是临川人，但做过江西临川的官员，所以临川之笔指的就是他。\n\n多说一句，江西多才子，而临川又是江西之冠。在王勃发出这句感慨后，临川才子便层出不穷，晏殊父子、王安石、曾巩、汤显祖等，无不是中国文学史上的顶尖人物。\n\n这一句中虽然连用了四个典故，但丝毫不觉得晦涩。这四个典故都和良辰美景、主宾欢宴、美酒佳肴、文学大家有关，和今天滕王阁上的聚会有着异曲同工之妙，也是在赞誉今日之会，可以和当年梁园、铜雀台之会相媲美。\n\n**四美具，二难并。穷睇眄于中天，极娱游于暇日。**\n\n就像上一句所描绘的，此时有美景、有美食、有美酒、有美文，于难得之时遇到难得之人，真是一场盛会！大家一起极目天边，欣赏这转瞬即逝的美景；一起尽情游戏，享受这片刻的欢乐时光。\n\n**天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。**\n\n物盛而衰，乐极则悲。面对高远无极的天地之时，人们自然可以意识到自身的渺小，意识到眼下的小小欢乐，只不过是天地之间的一瞬而已。与永恒相比，这些欢乐又有什么意义呢？况且人生在世，福祸本来就是定数。此时欢乐越多，明日的空虚失落就越大——此时终将过去，明日终会来临。眼见逆旅在前却避无可避，这是多么的无奈！\n\n**望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。**\n\n王勃正在自己的人生旅程上艰难跋涉。初唐之时，除了关中到洛阳一带尚称得上繁华以外，南方大部分地方都还贫困落后。他从长安一路向南，去交趾探望自己的父亲，仿佛是慢慢从文明走入蛮荒。\n\n南昌刚好是他旅程的中点。回首来路，西北望长安，已经在几千里以外了，在那太阳落下的地方。眺望前程，吴楚东南坼，父亲所在的地方隐藏在重重的云雾里，看不清还有多少艰难险阻。一边是再也攀不上的高耸天柱，一边是不可知的万丈深渊，人生沦落到此，进退两难。\n\n**关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。**\n\n这是与前面落霞一句并称的千古名句。关山是什么？是连接关中与西部的唯一通道，以关陇古道的名字为人所熟知。关陇古道在崇山峻岭之中萦回曲折，是有名难走的道路。当年张衡在四愁诗中说“我所思兮在汉阳，欲往从之陇坂长”，说的就是这里。\n\n王勃虽然没有翻越关山，但他一路行来，旅途中的艰辛比翻越关山古道更多更难。旅人迷于道路，甚至客死道边，乃是常见的事情，谁又知道这些漂泊天涯的人心中有多少失意悲苦！后来王守仁贬谪在贵州，遇到一家三口同时倒毙于山下，也只有他出于同情才埋葬祭拜。“古者重去其乡，游宦不逾千里。吾以窜逐而来此，宜也。尔亦何辜乎？”\n\n谁不爱自己的故园？谁愿意冒着死亡的危险远赴他乡？漂泊天涯的游子，大都有着自己不得不漂泊的理由。试看今日之宴上，从阎公、宇文州牧到千里逢迎的各位高朋，不管看起来光鲜还是落魄，不都是孤独的异乡之人吗？大家都像那无根的浮萍、像大江中失去控制的小舟，只能随着天下的大势而随波逐流、身不由己啊！\n\n**怀帝阍而不见，奉宣室以何年？**\n\n用这一句，王勃清楚的点出了自己漂泊的原因——宦途失意，报国无门。“道不行，乘桴浮于海”，既然此时君主不待见我，那我也只好浪迹于江湖了。当年贾谊能被文帝召回长安，我有没有这样一天呢？\n\n**嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。**\n\n时也运也命也——人的一生，真的是被冥冥中不可知的命运所操纵。西汉的冯唐勤恳贤良，却历经文帝、景帝两朝不被提拔。等终于被汉武帝赏识要委以重任时，已经年过九十了。人的一生，就是这样短暂，时机一纵即逝。汉武帝时的飞将军李广一生数十次参战，威名远播于匈奴，却总是因为各种各样的原因无法以军功封侯。最后更是因出征迷路获罪，自尽而死。这难道不是他们注定的悲剧吗？\n\n**屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？**\n\n即使是遇到圣明的君主，也难以拯救这些人的命运。贾谊是西汉承前启后的大学问家、第一流的聪明贤才，在史记上和屈原并列在《屈子贾生列传》里的人物。但这样的人却被汉文帝下令贬谪到长沙，虽然后来文帝又召回他问询，但问的却不是治国安邦之道，而是鬼神虚妄之事，多么令人惋惜。\n\n梁鸿是东汉的大学者，举案齐眉中的男主角。他因为写了首政治讽刺诗而被汉章帝追捕，被迫逃亡到海曲，隐姓埋名才得以终老。这两位都是著名的贤良之人、大学问家，而汉文帝和汉章帝也是历史上出色的明君。结果明君贤臣不但不能相得益彰，反而以此为下场，这是不是也说明了命运的难以抵抗呢？\n\n**所赖君子见机，达人知命。老当益壮，宁移白首之心。穷且益坚，不坠青云之志。**\n\n但是，这并不代表我们要向命运低下头颅。君子能够乐观面对一切逆境，不改心中青云之志；更能够伺机而动，随时准备挑战命运。人在衰老之时，心灵要愈加强大，不能因为老去而改变自己的想法。人在穷困之时，更要坚定自己的信念，不能让自己的志向和现实妥协。\n\n因为每一次妥协都是向命运的屈服，都是将自己的未来推向那注定潦倒的结局。只有那些永不服输、屡败屡战的猛士，才能真正主宰自己的人生。当年班超投笔从戎时已经三十多岁了，刘邦起义兵之时更是年近五十，如果他们早早就安于自己的命运，又怎么可能创下如此绝世的功业呢？\n\n**酌贪泉而觉爽，处涸辙以犹欢。**\n\n最正确的心态，是坦然地直面命运。不因权势而堕落，不因得志而骄傲，不因困境而绝望，不因落魄而自卑。当年的清官吴隐之路过贪泉，既不会因为这泉水的传说而避而不饮，也不会矫揉造作地找借口掩饰，而是遵从自心，渴了就喝，喝完就走——毕竟只是一杯泉水而已，难道就能浇灭君子心中的正气？路上小水坑里的鱼儿，哪怕陷入相濡以沫的困境，也一样可以笑着面对，谁说就一定要惶惶然不可终日？\n\n**北海虽赊，扶摇可接；东隅已逝，桑榆非晚。**\n\n就算是小水坑里的鱼儿，也可能是北冥之鱼啊。北冥有鱼，其名为鲲，化而为鸟，其名为鹏。当它化作鲲鹏之时，自然可以水击三千里，抟扶摇而上者九万里，不管是南冥还是北海，一振翅就可以抵达。有这样的本领和志向，自然不用因为一时身处涸辙而自怨自艾。就算失之东隅，错过了上一个好机会，但一样可以收之桑榆，未来会有更多的机遇在等待着你。但如果你因为错过一个机会就把余生都用来悔恨哭泣，那后面的机遇就都被你自己放弃了。\n\n**孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！**\n\n君子既要胸怀高远，又要知行合一。志向这东西，单靠心中想想是万万不可能实现的，一定要踏踏实实、持之以恒的去做事。像当年还珠合浦的孟尝，虽然自己的品性确实高洁，但遇到困难就回家隐居务农，这就算有报国之心，也只是空话而已。阮籍可算是有才，可却将才华全用来谈玄说易、搞得两晋风气都虚无放诞。后面东晋朝廷诸公、一群名士，不想着克复中原，反而新亭对泣，这根本就不是值得学习的榜样！\n\n在这两段中，王勃的笔锋一转，从写景自然地转向抒情。汉人朴实浑厚，魏晋飘逸潇洒，宋人以文载道，但唐人的风气却是极致的豪迈奔放。就算处在人生中最为困顿的时期，王勃的笔下依然是满溢着自信和希望，坚信自己一定能够走出困境、一飞冲天。\n\n当时的主流风气其并不是这样的。“争构纤微，竞为雕刻，骨气都尽，刚健不闻”，这才是当时宫廷流行的靡靡之风。滕王阁上，那些事先已经悄悄写好、揣在各人怀中的诗文，想来也都是这些纤巧绮靡的货色。王勃所写下的前几段，虽然文字之美已经达到了极致，可还没有彻底脱出这个窠臼。\n\n但从这两段开始，整篇文章彻底去到了一个全新的境界。纵然形制还是四六对仗的骈体、纵然文字还是那样的极尽华丽，但有某种东西、某种直击人的心底让人泪流满面无法呼吸的东西慢慢从中浮现出来。这种东西，就是人们常说的“风骨”，是支持中国文学传承数千年的奥妙所在。\n\n高情壮思，有抑扬天地之心；雄笔奇才，有鼓怒风云之气。初唐四杰，正是这种风骨的引领者。他们像庄子笔下的大鹏一样，绝云气，负青天，将文学的边界撑展开来，给后来的唐代文人们留下一个可以尽情施展的世界。","slug":"reproduce/literature/TengWangGeXu-HaiShangGangQinShi-3","published":1,"updated":"2018-07-10T17:31:12.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjfz3zg3001oektzhbwx16bf","content":"<p>本文系转载，已征得原文作者同意，特此声明。<br>原文作者：海上钢琴师<br>原文链接：<a href=\"http://www.acfun.cn/a/ac4399635\" target=\"_blank\" rel=\"noopener\">http://www.acfun.cn/a/ac4399635</a></p>\n<hr>\n<p><strong>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？</strong></p>\n<p><strong>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心。穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</strong></p>\n<p>三百年前的一个春日，王羲之与谢安等好友会于兰亭。酒至酣处，诗已成章，王羲之提起笔来，准备写一篇序文。文章自然是从这场盛会开始，大家仰观宇宙之大，俯察品类之盛，将视听之娱都享受到了极致，可谓人生至乐。</p>\n<p>但接下来，王羲之笔锋一转，开始感慨。这样的至乐转瞬即逝，人生苦短，命运无常。人在志得意满之时，可曾想到老之将至？等看到自己所爱已经逝去，谁又能忍得住自己的悲伤？一代又一代的人们，都在这样的悲苦中辗转零落，这是多么哀痛的事情啊！</p>\n<p>三百年后的这个秋天，王勃站在滕王阁上。暮色低垂，四顾茫茫。大江在脚下滔滔而去，一直流向天地的尽头。吾生须臾，大江无穷，以须臾之身临无穷之境，此情此景，是应该悲伤，还是应该喜乐呢？</p>\n<p><strong>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。</strong></p>\n<p>和已经老之将至的王羲之不同，王勃此时正是少年意气。凭栏远眺天外，不由觉得胸怀畅快，兴致飞扬。身后的宴席上，细细的箫声传来，和江上的清风一起在身边旋绕。当女孩子们的歌声告一段落时，仿佛天边的白云也凝滞了。</p>\n<p>这一点很有趣。面对类似的景色时，不同的人，感慨也是不同的。再过三百年，同样是在大江之上，苏轼和朋友们又是另外的感触。这三位顶尖的人物，有哀伤感怀，有气势昂扬，有遗世独立，但无论是哪一种情感，都是如此的自然，毫无矫揉造作之嫌。</p>\n<p>这恰好就是王国维所说的“境界”。“一切景语皆情语。境非独谓景物也，喜怒哀乐，亦人心中之一境界”。境界并非简单的写景，而是写真景色、真感情。山高水长、气象万千，谁又规定了必须发什么样的感慨呢？只要真景色和真感情可以交融在一起，那便是最好的文字了。</p>\n<p><strong>睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。</strong></p>\n<p>这一句里连用了四个典故。睢园是当年西汉梁王所修建的园林，遍植翠竹，在历史上以梁园雅集而著称。当年汉代最出色的文学家如司马相如、枚乘、严忌等人常常聚会于此，饮酒做赋。李白曾经作梁园诗：“人生达命岂暇愁，且饮美酒登高楼”，说的就是这里。</p>\n<p>彭泽是说的历史上另一个文学大家陶渊明，因为他做过彭泽令，所以后世常用彭泽来指代他。陶渊明也酷爱饮酒，给自己作挽歌都要写上“但恨在世时，饮酒不得足”，可见其酒瘾之大。</p>\n<p>三国时，曹魏建都于邺城，旁边便是邺水。三曹、建安七子等一众名士曾聚集于邺水之畔的铜雀台上，饮宴作乐。曹植写诗道：“秋兰被长坂，朱华冒绿池。潜鱼跃清波，好鸟鸣高枝”，也是极言欢聚之美。</p>\n<p>曹植的文笔，历来为诗家所称道。到了南北朝时，另一位大诗人谢灵运就吹嘘说“天下之才共一石。曹子建独得八斗，我得一斗，天下人共分一斗”。当然，谢灵运可是被李白推崇为“中间小谢又清发”的人，其才华自不必言。谢灵运虽然不是临川人，但做过江西临川的官员，所以临川之笔指的就是他。</p>\n<p>多说一句，江西多才子，而临川又是江西之冠。在王勃发出这句感慨后，临川才子便层出不穷，晏殊父子、王安石、曾巩、汤显祖等，无不是中国文学史上的顶尖人物。</p>\n<p>这一句中虽然连用了四个典故，但丝毫不觉得晦涩。这四个典故都和良辰美景、主宾欢宴、美酒佳肴、文学大家有关，和今天滕王阁上的聚会有着异曲同工之妙，也是在赞誉今日之会，可以和当年梁园、铜雀台之会相媲美。</p>\n<p><strong>四美具，二难并。穷睇眄于中天，极娱游于暇日。</strong></p>\n<p>就像上一句所描绘的，此时有美景、有美食、有美酒、有美文，于难得之时遇到难得之人，真是一场盛会！大家一起极目天边，欣赏这转瞬即逝的美景；一起尽情游戏，享受这片刻的欢乐时光。</p>\n<p><strong>天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。</strong></p>\n<p>物盛而衰，乐极则悲。面对高远无极的天地之时，人们自然可以意识到自身的渺小，意识到眼下的小小欢乐，只不过是天地之间的一瞬而已。与永恒相比，这些欢乐又有什么意义呢？况且人生在世，福祸本来就是定数。此时欢乐越多，明日的空虚失落就越大——此时终将过去，明日终会来临。眼见逆旅在前却避无可避，这是多么的无奈！</p>\n<p><strong>望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。</strong></p>\n<p>王勃正在自己的人生旅程上艰难跋涉。初唐之时，除了关中到洛阳一带尚称得上繁华以外，南方大部分地方都还贫困落后。他从长安一路向南，去交趾探望自己的父亲，仿佛是慢慢从文明走入蛮荒。</p>\n<p>南昌刚好是他旅程的中点。回首来路，西北望长安，已经在几千里以外了，在那太阳落下的地方。眺望前程，吴楚东南坼，父亲所在的地方隐藏在重重的云雾里，看不清还有多少艰难险阻。一边是再也攀不上的高耸天柱，一边是不可知的万丈深渊，人生沦落到此，进退两难。</p>\n<p><strong>关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。</strong></p>\n<p>这是与前面落霞一句并称的千古名句。关山是什么？是连接关中与西部的唯一通道，以关陇古道的名字为人所熟知。关陇古道在崇山峻岭之中萦回曲折，是有名难走的道路。当年张衡在四愁诗中说“我所思兮在汉阳，欲往从之陇坂长”，说的就是这里。</p>\n<p>王勃虽然没有翻越关山，但他一路行来，旅途中的艰辛比翻越关山古道更多更难。旅人迷于道路，甚至客死道边，乃是常见的事情，谁又知道这些漂泊天涯的人心中有多少失意悲苦！后来王守仁贬谪在贵州，遇到一家三口同时倒毙于山下，也只有他出于同情才埋葬祭拜。“古者重去其乡，游宦不逾千里。吾以窜逐而来此，宜也。尔亦何辜乎？”</p>\n<p>谁不爱自己的故园？谁愿意冒着死亡的危险远赴他乡？漂泊天涯的游子，大都有着自己不得不漂泊的理由。试看今日之宴上，从阎公、宇文州牧到千里逢迎的各位高朋，不管看起来光鲜还是落魄，不都是孤独的异乡之人吗？大家都像那无根的浮萍、像大江中失去控制的小舟，只能随着天下的大势而随波逐流、身不由己啊！</p>\n<p><strong>怀帝阍而不见，奉宣室以何年？</strong></p>\n<p>用这一句，王勃清楚的点出了自己漂泊的原因——宦途失意，报国无门。“道不行，乘桴浮于海”，既然此时君主不待见我，那我也只好浪迹于江湖了。当年贾谊能被文帝召回长安，我有没有这样一天呢？</p>\n<p><strong>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。</strong></p>\n<p>时也运也命也——人的一生，真的是被冥冥中不可知的命运所操纵。西汉的冯唐勤恳贤良，却历经文帝、景帝两朝不被提拔。等终于被汉武帝赏识要委以重任时，已经年过九十了。人的一生，就是这样短暂，时机一纵即逝。汉武帝时的飞将军李广一生数十次参战，威名远播于匈奴，却总是因为各种各样的原因无法以军功封侯。最后更是因出征迷路获罪，自尽而死。这难道不是他们注定的悲剧吗？</p>\n<p><strong>屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？</strong></p>\n<p>即使是遇到圣明的君主，也难以拯救这些人的命运。贾谊是西汉承前启后的大学问家、第一流的聪明贤才，在史记上和屈原并列在《屈子贾生列传》里的人物。但这样的人却被汉文帝下令贬谪到长沙，虽然后来文帝又召回他问询，但问的却不是治国安邦之道，而是鬼神虚妄之事，多么令人惋惜。</p>\n<p>梁鸿是东汉的大学者，举案齐眉中的男主角。他因为写了首政治讽刺诗而被汉章帝追捕，被迫逃亡到海曲，隐姓埋名才得以终老。这两位都是著名的贤良之人、大学问家，而汉文帝和汉章帝也是历史上出色的明君。结果明君贤臣不但不能相得益彰，反而以此为下场，这是不是也说明了命运的难以抵抗呢？</p>\n<p><strong>所赖君子见机，达人知命。老当益壮，宁移白首之心。穷且益坚，不坠青云之志。</strong></p>\n<p>但是，这并不代表我们要向命运低下头颅。君子能够乐观面对一切逆境，不改心中青云之志；更能够伺机而动，随时准备挑战命运。人在衰老之时，心灵要愈加强大，不能因为老去而改变自己的想法。人在穷困之时，更要坚定自己的信念，不能让自己的志向和现实妥协。</p>\n<p>因为每一次妥协都是向命运的屈服，都是将自己的未来推向那注定潦倒的结局。只有那些永不服输、屡败屡战的猛士，才能真正主宰自己的人生。当年班超投笔从戎时已经三十多岁了，刘邦起义兵之时更是年近五十，如果他们早早就安于自己的命运，又怎么可能创下如此绝世的功业呢？</p>\n<p><strong>酌贪泉而觉爽，处涸辙以犹欢。</strong></p>\n<p>最正确的心态，是坦然地直面命运。不因权势而堕落，不因得志而骄傲，不因困境而绝望，不因落魄而自卑。当年的清官吴隐之路过贪泉，既不会因为这泉水的传说而避而不饮，也不会矫揉造作地找借口掩饰，而是遵从自心，渴了就喝，喝完就走——毕竟只是一杯泉水而已，难道就能浇灭君子心中的正气？路上小水坑里的鱼儿，哪怕陷入相濡以沫的困境，也一样可以笑着面对，谁说就一定要惶惶然不可终日？</p>\n<p><strong>北海虽赊，扶摇可接；东隅已逝，桑榆非晚。</strong></p>\n<p>就算是小水坑里的鱼儿，也可能是北冥之鱼啊。北冥有鱼，其名为鲲，化而为鸟，其名为鹏。当它化作鲲鹏之时，自然可以水击三千里，抟扶摇而上者九万里，不管是南冥还是北海，一振翅就可以抵达。有这样的本领和志向，自然不用因为一时身处涸辙而自怨自艾。就算失之东隅，错过了上一个好机会，但一样可以收之桑榆，未来会有更多的机遇在等待着你。但如果你因为错过一个机会就把余生都用来悔恨哭泣，那后面的机遇就都被你自己放弃了。</p>\n<p><strong>孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</strong></p>\n<p>君子既要胸怀高远，又要知行合一。志向这东西，单靠心中想想是万万不可能实现的，一定要踏踏实实、持之以恒的去做事。像当年还珠合浦的孟尝，虽然自己的品性确实高洁，但遇到困难就回家隐居务农，这就算有报国之心，也只是空话而已。阮籍可算是有才，可却将才华全用来谈玄说易、搞得两晋风气都虚无放诞。后面东晋朝廷诸公、一群名士，不想着克复中原，反而新亭对泣，这根本就不是值得学习的榜样！</p>\n<p>在这两段中，王勃的笔锋一转，从写景自然地转向抒情。汉人朴实浑厚，魏晋飘逸潇洒，宋人以文载道，但唐人的风气却是极致的豪迈奔放。就算处在人生中最为困顿的时期，王勃的笔下依然是满溢着自信和希望，坚信自己一定能够走出困境、一飞冲天。</p>\n<p>当时的主流风气其并不是这样的。“争构纤微，竞为雕刻，骨气都尽，刚健不闻”，这才是当时宫廷流行的靡靡之风。滕王阁上，那些事先已经悄悄写好、揣在各人怀中的诗文，想来也都是这些纤巧绮靡的货色。王勃所写下的前几段，虽然文字之美已经达到了极致，可还没有彻底脱出这个窠臼。</p>\n<p>但从这两段开始，整篇文章彻底去到了一个全新的境界。纵然形制还是四六对仗的骈体、纵然文字还是那样的极尽华丽，但有某种东西、某种直击人的心底让人泪流满面无法呼吸的东西慢慢从中浮现出来。这种东西，就是人们常说的“风骨”，是支持中国文学传承数千年的奥妙所在。</p>\n<p>高情壮思，有抑扬天地之心；雄笔奇才，有鼓怒风云之气。初唐四杰，正是这种风骨的引领者。他们像庄子笔下的大鹏一样，绝云气，负青天，将文学的边界撑展开来，给后来的唐代文人们留下一个可以尽情施展的世界。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文系转载，已征得原文作者同意，特此声明。<br>原文作者：海上钢琴师<br>原文链接：<a href=\"http://www.acfun.cn/a/ac4399635\" target=\"_blank\" rel=\"noopener\">http://www.acfun.cn/a/ac4399635</a></p>\n<hr>\n<p><strong>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？</strong></p>\n<p><strong>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心。穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</strong></p>\n<p>三百年前的一个春日，王羲之与谢安等好友会于兰亭。酒至酣处，诗已成章，王羲之提起笔来，准备写一篇序文。文章自然是从这场盛会开始，大家仰观宇宙之大，俯察品类之盛，将视听之娱都享受到了极致，可谓人生至乐。</p>\n<p>但接下来，王羲之笔锋一转，开始感慨。这样的至乐转瞬即逝，人生苦短，命运无常。人在志得意满之时，可曾想到老之将至？等看到自己所爱已经逝去，谁又能忍得住自己的悲伤？一代又一代的人们，都在这样的悲苦中辗转零落，这是多么哀痛的事情啊！</p>\n<p>三百年后的这个秋天，王勃站在滕王阁上。暮色低垂，四顾茫茫。大江在脚下滔滔而去，一直流向天地的尽头。吾生须臾，大江无穷，以须臾之身临无穷之境，此情此景，是应该悲伤，还是应该喜乐呢？</p>\n<p><strong>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。</strong></p>\n<p>和已经老之将至的王羲之不同，王勃此时正是少年意气。凭栏远眺天外，不由觉得胸怀畅快，兴致飞扬。身后的宴席上，细细的箫声传来，和江上的清风一起在身边旋绕。当女孩子们的歌声告一段落时，仿佛天边的白云也凝滞了。</p>\n<p>这一点很有趣。面对类似的景色时，不同的人，感慨也是不同的。再过三百年，同样是在大江之上，苏轼和朋友们又是另外的感触。这三位顶尖的人物，有哀伤感怀，有气势昂扬，有遗世独立，但无论是哪一种情感，都是如此的自然，毫无矫揉造作之嫌。</p>\n<p>这恰好就是王国维所说的“境界”。“一切景语皆情语。境非独谓景物也，喜怒哀乐，亦人心中之一境界”。境界并非简单的写景，而是写真景色、真感情。山高水长、气象万千，谁又规定了必须发什么样的感慨呢？只要真景色和真感情可以交融在一起，那便是最好的文字了。</p>\n<p><strong>睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。</strong></p>\n<p>这一句里连用了四个典故。睢园是当年西汉梁王所修建的园林，遍植翠竹，在历史上以梁园雅集而著称。当年汉代最出色的文学家如司马相如、枚乘、严忌等人常常聚会于此，饮酒做赋。李白曾经作梁园诗：“人生达命岂暇愁，且饮美酒登高楼”，说的就是这里。</p>\n<p>彭泽是说的历史上另一个文学大家陶渊明，因为他做过彭泽令，所以后世常用彭泽来指代他。陶渊明也酷爱饮酒，给自己作挽歌都要写上“但恨在世时，饮酒不得足”，可见其酒瘾之大。</p>\n<p>三国时，曹魏建都于邺城，旁边便是邺水。三曹、建安七子等一众名士曾聚集于邺水之畔的铜雀台上，饮宴作乐。曹植写诗道：“秋兰被长坂，朱华冒绿池。潜鱼跃清波，好鸟鸣高枝”，也是极言欢聚之美。</p>\n<p>曹植的文笔，历来为诗家所称道。到了南北朝时，另一位大诗人谢灵运就吹嘘说“天下之才共一石。曹子建独得八斗，我得一斗，天下人共分一斗”。当然，谢灵运可是被李白推崇为“中间小谢又清发”的人，其才华自不必言。谢灵运虽然不是临川人，但做过江西临川的官员，所以临川之笔指的就是他。</p>\n<p>多说一句，江西多才子，而临川又是江西之冠。在王勃发出这句感慨后，临川才子便层出不穷，晏殊父子、王安石、曾巩、汤显祖等，无不是中国文学史上的顶尖人物。</p>\n<p>这一句中虽然连用了四个典故，但丝毫不觉得晦涩。这四个典故都和良辰美景、主宾欢宴、美酒佳肴、文学大家有关，和今天滕王阁上的聚会有着异曲同工之妙，也是在赞誉今日之会，可以和当年梁园、铜雀台之会相媲美。</p>\n<p><strong>四美具，二难并。穷睇眄于中天，极娱游于暇日。</strong></p>\n<p>就像上一句所描绘的，此时有美景、有美食、有美酒、有美文，于难得之时遇到难得之人，真是一场盛会！大家一起极目天边，欣赏这转瞬即逝的美景；一起尽情游戏，享受这片刻的欢乐时光。</p>\n<p><strong>天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。</strong></p>\n<p>物盛而衰，乐极则悲。面对高远无极的天地之时，人们自然可以意识到自身的渺小，意识到眼下的小小欢乐，只不过是天地之间的一瞬而已。与永恒相比，这些欢乐又有什么意义呢？况且人生在世，福祸本来就是定数。此时欢乐越多，明日的空虚失落就越大——此时终将过去，明日终会来临。眼见逆旅在前却避无可避，这是多么的无奈！</p>\n<p><strong>望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。</strong></p>\n<p>王勃正在自己的人生旅程上艰难跋涉。初唐之时，除了关中到洛阳一带尚称得上繁华以外，南方大部分地方都还贫困落后。他从长安一路向南，去交趾探望自己的父亲，仿佛是慢慢从文明走入蛮荒。</p>\n<p>南昌刚好是他旅程的中点。回首来路，西北望长安，已经在几千里以外了，在那太阳落下的地方。眺望前程，吴楚东南坼，父亲所在的地方隐藏在重重的云雾里，看不清还有多少艰难险阻。一边是再也攀不上的高耸天柱，一边是不可知的万丈深渊，人生沦落到此，进退两难。</p>\n<p><strong>关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。</strong></p>\n<p>这是与前面落霞一句并称的千古名句。关山是什么？是连接关中与西部的唯一通道，以关陇古道的名字为人所熟知。关陇古道在崇山峻岭之中萦回曲折，是有名难走的道路。当年张衡在四愁诗中说“我所思兮在汉阳，欲往从之陇坂长”，说的就是这里。</p>\n<p>王勃虽然没有翻越关山，但他一路行来，旅途中的艰辛比翻越关山古道更多更难。旅人迷于道路，甚至客死道边，乃是常见的事情，谁又知道这些漂泊天涯的人心中有多少失意悲苦！后来王守仁贬谪在贵州，遇到一家三口同时倒毙于山下，也只有他出于同情才埋葬祭拜。“古者重去其乡，游宦不逾千里。吾以窜逐而来此，宜也。尔亦何辜乎？”</p>\n<p>谁不爱自己的故园？谁愿意冒着死亡的危险远赴他乡？漂泊天涯的游子，大都有着自己不得不漂泊的理由。试看今日之宴上，从阎公、宇文州牧到千里逢迎的各位高朋，不管看起来光鲜还是落魄，不都是孤独的异乡之人吗？大家都像那无根的浮萍、像大江中失去控制的小舟，只能随着天下的大势而随波逐流、身不由己啊！</p>\n<p><strong>怀帝阍而不见，奉宣室以何年？</strong></p>\n<p>用这一句，王勃清楚的点出了自己漂泊的原因——宦途失意，报国无门。“道不行，乘桴浮于海”，既然此时君主不待见我，那我也只好浪迹于江湖了。当年贾谊能被文帝召回长安，我有没有这样一天呢？</p>\n<p><strong>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。</strong></p>\n<p>时也运也命也——人的一生，真的是被冥冥中不可知的命运所操纵。西汉的冯唐勤恳贤良，却历经文帝、景帝两朝不被提拔。等终于被汉武帝赏识要委以重任时，已经年过九十了。人的一生，就是这样短暂，时机一纵即逝。汉武帝时的飞将军李广一生数十次参战，威名远播于匈奴，却总是因为各种各样的原因无法以军功封侯。最后更是因出征迷路获罪，自尽而死。这难道不是他们注定的悲剧吗？</p>\n<p><strong>屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？</strong></p>\n<p>即使是遇到圣明的君主，也难以拯救这些人的命运。贾谊是西汉承前启后的大学问家、第一流的聪明贤才，在史记上和屈原并列在《屈子贾生列传》里的人物。但这样的人却被汉文帝下令贬谪到长沙，虽然后来文帝又召回他问询，但问的却不是治国安邦之道，而是鬼神虚妄之事，多么令人惋惜。</p>\n<p>梁鸿是东汉的大学者，举案齐眉中的男主角。他因为写了首政治讽刺诗而被汉章帝追捕，被迫逃亡到海曲，隐姓埋名才得以终老。这两位都是著名的贤良之人、大学问家，而汉文帝和汉章帝也是历史上出色的明君。结果明君贤臣不但不能相得益彰，反而以此为下场，这是不是也说明了命运的难以抵抗呢？</p>\n<p><strong>所赖君子见机，达人知命。老当益壮，宁移白首之心。穷且益坚，不坠青云之志。</strong></p>\n<p>但是，这并不代表我们要向命运低下头颅。君子能够乐观面对一切逆境，不改心中青云之志；更能够伺机而动，随时准备挑战命运。人在衰老之时，心灵要愈加强大，不能因为老去而改变自己的想法。人在穷困之时，更要坚定自己的信念，不能让自己的志向和现实妥协。</p>\n<p>因为每一次妥协都是向命运的屈服，都是将自己的未来推向那注定潦倒的结局。只有那些永不服输、屡败屡战的猛士，才能真正主宰自己的人生。当年班超投笔从戎时已经三十多岁了，刘邦起义兵之时更是年近五十，如果他们早早就安于自己的命运，又怎么可能创下如此绝世的功业呢？</p>\n<p><strong>酌贪泉而觉爽，处涸辙以犹欢。</strong></p>\n<p>最正确的心态，是坦然地直面命运。不因权势而堕落，不因得志而骄傲，不因困境而绝望，不因落魄而自卑。当年的清官吴隐之路过贪泉，既不会因为这泉水的传说而避而不饮，也不会矫揉造作地找借口掩饰，而是遵从自心，渴了就喝，喝完就走——毕竟只是一杯泉水而已，难道就能浇灭君子心中的正气？路上小水坑里的鱼儿，哪怕陷入相濡以沫的困境，也一样可以笑着面对，谁说就一定要惶惶然不可终日？</p>\n<p><strong>北海虽赊，扶摇可接；东隅已逝，桑榆非晚。</strong></p>\n<p>就算是小水坑里的鱼儿，也可能是北冥之鱼啊。北冥有鱼，其名为鲲，化而为鸟，其名为鹏。当它化作鲲鹏之时，自然可以水击三千里，抟扶摇而上者九万里，不管是南冥还是北海，一振翅就可以抵达。有这样的本领和志向，自然不用因为一时身处涸辙而自怨自艾。就算失之东隅，错过了上一个好机会，但一样可以收之桑榆，未来会有更多的机遇在等待着你。但如果你因为错过一个机会就把余生都用来悔恨哭泣，那后面的机遇就都被你自己放弃了。</p>\n<p><strong>孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</strong></p>\n<p>君子既要胸怀高远，又要知行合一。志向这东西，单靠心中想想是万万不可能实现的，一定要踏踏实实、持之以恒的去做事。像当年还珠合浦的孟尝，虽然自己的品性确实高洁，但遇到困难就回家隐居务农，这就算有报国之心，也只是空话而已。阮籍可算是有才，可却将才华全用来谈玄说易、搞得两晋风气都虚无放诞。后面东晋朝廷诸公、一群名士，不想着克复中原，反而新亭对泣，这根本就不是值得学习的榜样！</p>\n<p>在这两段中，王勃的笔锋一转，从写景自然地转向抒情。汉人朴实浑厚，魏晋飘逸潇洒，宋人以文载道，但唐人的风气却是极致的豪迈奔放。就算处在人生中最为困顿的时期，王勃的笔下依然是满溢着自信和希望，坚信自己一定能够走出困境、一飞冲天。</p>\n<p>当时的主流风气其并不是这样的。“争构纤微，竞为雕刻，骨气都尽，刚健不闻”，这才是当时宫廷流行的靡靡之风。滕王阁上，那些事先已经悄悄写好、揣在各人怀中的诗文，想来也都是这些纤巧绮靡的货色。王勃所写下的前几段，虽然文字之美已经达到了极致，可还没有彻底脱出这个窠臼。</p>\n<p>但从这两段开始，整篇文章彻底去到了一个全新的境界。纵然形制还是四六对仗的骈体、纵然文字还是那样的极尽华丽，但有某种东西、某种直击人的心底让人泪流满面无法呼吸的东西慢慢从中浮现出来。这种东西，就是人们常说的“风骨”，是支持中国文学传承数千年的奥妙所在。</p>\n<p>高情壮思，有抑扬天地之心；雄笔奇才，有鼓怒风云之气。初唐四杰，正是这种风骨的引领者。他们像庄子笔下的大鹏一样，绝云气，负青天，将文学的边界撑展开来，给后来的唐代文人们留下一个可以尽情施展的世界。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjfz3zbj0001ektzaske7hfe","category_id":"cjjfz3zbq0003ektzx0i02wy0","_id":"cjjfz3zbw0007ektzz08g58lu"},{"post_id":"cjjfz3zdu0008ektzkhytqqx3","category_id":"cjjfz3ze4000aektzggwcrkc2","_id":"cjjfz3zea000hektzar5fv9rt"},{"post_id":"cjjfz3ze00009ektz39q6397r","category_id":"cjjfz3ze4000aektzggwcrkc2","_id":"cjjfz3zec000kektzt85x5e73"},{"post_id":"cjjfz3ze6000cektzc6sl6h13","category_id":"cjjfz3ze4000aektzggwcrkc2","_id":"cjjfz3zec000mektzr9gwywgz"},{"post_id":"cjjfz3zex000nektzfqi4kkeh","category_id":"cjjfz3ze4000aektzggwcrkc2","_id":"cjjfz3zf0000rektzvjfz3inf"},{"post_id":"cjjfz3zey000oektzet8tt8ch","category_id":"cjjfz3ze4000aektzggwcrkc2","_id":"cjjfz3zf0000sektz1a4fgzcp"},{"post_id":"cjjfz3zfh000tektz6hb06cbz","category_id":"cjjfz3zfj000vektzs4guj9by","_id":"cjjfz3zfm0011ektzk7n7178k"},{"post_id":"cjjfz3zfi000uektzn7kncvhj","category_id":"cjjfz3zfj000vektzs4guj9by","_id":"cjjfz3zfo0014ektzzqtpv1jh"},{"post_id":"cjjfz3zfk000xektzn6tzqwfi","category_id":"cjjfz3zfj000vektzs4guj9by","_id":"cjjfz3zfp0017ektz1nqu8anw"},{"post_id":"cjjfz3zfv001eektz8o40m0lk","category_id":"cjjfz3zfj000vektzs4guj9by","_id":"cjjfz3zg0001kektz4zsa499j"},{"post_id":"cjjfz3zfw001fektzsb865lov","category_id":"cjjfz3zfj000vektzs4guj9by","_id":"cjjfz3zgd001pektzo5jgqs6d"},{"post_id":"cjjfz3zfx001hektzz1zvse06","category_id":"cjjfz3zg2001lektz4jpun4s8","_id":"cjjfz3zgg001uektz6ltdiyuu"},{"post_id":"cjjfz3zfz001jektzihni0aan","category_id":"cjjfz3zg2001lektz4jpun4s8","_id":"cjjfz3zgg001wektz8eyzhntm"},{"post_id":"cjjfz3zg3001oektzhbwx16bf","category_id":"cjjfz3zg2001lektz4jpun4s8","_id":"cjjfz3zgh001zektz94vmjng4"}],"PostTag":[{"post_id":"cjjfz3zbj0001ektzaske7hfe","tag_id":"cjjfz3zbs0004ektzp2m97z2q","_id":"cjjfz3zbv0006ektz8h7ak9dv"},{"post_id":"cjjfz3zdu0008ektzkhytqqx3","tag_id":"cjjfz3ze5000bektzwnn7ci6v","_id":"cjjfz3ze9000fektzdytvomev"},{"post_id":"cjjfz3ze00009ektz39q6397r","tag_id":"cjjfz3ze5000bektzwnn7ci6v","_id":"cjjfz3zeb000jektzk3crarek"},{"post_id":"cjjfz3ze6000cektzc6sl6h13","tag_id":"cjjfz3ze5000bektzwnn7ci6v","_id":"cjjfz3zec000lektzcqmu754b"},{"post_id":"cjjfz3zex000nektzfqi4kkeh","tag_id":"cjjfz3ze5000bektzwnn7ci6v","_id":"cjjfz3zez000pektzasod76k2"},{"post_id":"cjjfz3zey000oektzet8tt8ch","tag_id":"cjjfz3ze5000bektzwnn7ci6v","_id":"cjjfz3zf0000qektz2upruhn8"},{"post_id":"cjjfz3zfh000tektz6hb06cbz","tag_id":"cjjfz3zfj000wektz9eh35f02","_id":"cjjfz3zfn0013ektzioekxn7g"},{"post_id":"cjjfz3zfh000tektz6hb06cbz","tag_id":"cjjfz3zfl000zektzicpemqa4","_id":"cjjfz3zfo0015ektzuprj0gv6"},{"post_id":"cjjfz3zfi000uektzn7kncvhj","tag_id":"cjjfz3zfj000wektz9eh35f02","_id":"cjjfz3zfp0019ektzfzp3s2sg"},{"post_id":"cjjfz3zfi000uektzn7kncvhj","tag_id":"cjjfz3zfl000zektzicpemqa4","_id":"cjjfz3zfp001aektzowbl8lf6"},{"post_id":"cjjfz3zfk000xektzn6tzqwfi","tag_id":"cjjfz3zfj000wektz9eh35f02","_id":"cjjfz3zfq001cektz0krcsfrb"},{"post_id":"cjjfz3zfk000xektzn6tzqwfi","tag_id":"cjjfz3zfl000zektzicpemqa4","_id":"cjjfz3zfq001dektzo2t1k9z4"},{"post_id":"cjjfz3zfv001eektz8o40m0lk","tag_id":"cjjfz3zfj000wektz9eh35f02","_id":"cjjfz3zfx001gektzsf62fq57"},{"post_id":"cjjfz3zfv001eektz8o40m0lk","tag_id":"cjjfz3zfl000zektzicpemqa4","_id":"cjjfz3zfy001iektzu7nu1ulx"},{"post_id":"cjjfz3zfw001fektzsb865lov","tag_id":"cjjfz3zfj000wektz9eh35f02","_id":"cjjfz3zg2001nektzjjts51im"},{"post_id":"cjjfz3zfw001fektzsb865lov","tag_id":"cjjfz3zfl000zektzicpemqa4","_id":"cjjfz3zge001qektz0c4z2y4z"},{"post_id":"cjjfz3zfx001hektzz1zvse06","tag_id":"cjjfz3zg2001mektzmopo301b","_id":"cjjfz3zgh001yektzomp655ap"},{"post_id":"cjjfz3zfx001hektzz1zvse06","tag_id":"cjjfz3zge001sektzhm0eqxmp","_id":"cjjfz3zgh0020ektzs4iace4p"},{"post_id":"cjjfz3zfx001hektzz1zvse06","tag_id":"cjjfz3zgg001vektzpa8tc5g7","_id":"cjjfz3zgi0022ektzi2ydm69w"},{"post_id":"cjjfz3zfz001jektzihni0aan","tag_id":"cjjfz3zg2001mektzmopo301b","_id":"cjjfz3zgj0025ektze4myt7ki"},{"post_id":"cjjfz3zfz001jektzihni0aan","tag_id":"cjjfz3zge001sektzhm0eqxmp","_id":"cjjfz3zgj0026ektza3p7jtpq"},{"post_id":"cjjfz3zfz001jektzihni0aan","tag_id":"cjjfz3zgg001vektzpa8tc5g7","_id":"cjjfz3zgk0028ektzsesb41yi"},{"post_id":"cjjfz3zg3001oektzhbwx16bf","tag_id":"cjjfz3zg2001mektzmopo301b","_id":"cjjfz3zgl002aektz6hgdiwrr"},{"post_id":"cjjfz3zg3001oektzhbwx16bf","tag_id":"cjjfz3zge001sektzhm0eqxmp","_id":"cjjfz3zgl002bektzi65n7njt"},{"post_id":"cjjfz3zg3001oektzhbwx16bf","tag_id":"cjjfz3zgg001vektzpa8tc5g7","_id":"cjjfz3zgl002cektz7elon9r7"}],"Tag":[{"name":"Hello World","_id":"cjjfz3zbs0004ektzp2m97z2q"},{"name":"Python","_id":"cjjfz3ze5000bektzwnn7ci6v"},{"name":"Project Euler","_id":"cjjfz3zfj000wektz9eh35f02"},{"name":"algorithm","_id":"cjjfz3zfl000zektzicpemqa4"},{"name":"文学","_id":"cjjfz3zg2001mektzmopo301b"},{"name":"滕王阁序","_id":"cjjfz3zge001sektzhm0eqxmp"},{"name":"转载","_id":"cjjfz3zgg001vektzpa8tc5g7"}]}}